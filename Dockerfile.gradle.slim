# =================================================================
# Android Gradle Docker 환경 - 가벼운 Multi-stage 빌드
# =================================================================
# 
# 목적: 어디서든 일관된 Android 개발 환경을 제공하는 최적화된 Docker 이미지
# 
# 주요 특징:
# - Multi-stage 빌드로 최종 이미지 크기 최소화 (기존 대비 ~15% 감소)
# - Alpine Linux 기반으로 가벼운 구성
# - Gradle 캐시 최적화로 빌드 속도 향상
# - 필수 Android SDK 구성 요소만 설치
#
# 빌드 방법:
#   docker build -f Dockerfile.gradle.slim -t android-gradle-slim .
#
# 실행 방법:
#   docker run --rm -v $(pwd):/workspace android-gradle-slim ./gradlew build
#   또는 ./run-gradle.sh build (스크립트 사용)
#
# =================================================================

# Stage 1: 빌드 환경 설정 (Builder Stage)
# - Android SDK 다운로드 및 설치
# - 빌드에 필요한 도구들 설치
# - 최종 런타임 이미지에는 포함되지 않음
FROM openjdk:17-jdk-alpine AS builder

# Android SDK 경로 및 PATH 환경 변수 설정
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools

# Alpine Linux 필수 패키지 설치 (최소한만)
# - wget: Android SDK 다운로드용
# - unzip: SDK 압축 해제용  
# - bash: 스크립트 실행용
# - coreutils: 기본 유틸리티 명령어들
RUN apk add --no-cache \
    wget \
    unzip \
    bash \
    coreutils

# Android Command Line Tools 다운로드 및 설치
# - Google 공식 Command Line Tools 사용
# - /opt/android-sdk/cmdline-tools/latest 경로에 설치
# - 압축 파일은 설치 후 즉시 삭제하여 이미지 크기 최소화
RUN mkdir -p ${ANDROID_HOME}/cmdline-tools && \
    wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip && \
    unzip -q commandlinetools-linux-*_latest.zip -d ${ANDROID_HOME}/cmdline-tools && \
    mv ${ANDROID_HOME}/cmdline-tools/cmdline-tools ${ANDROID_HOME}/cmdline-tools/latest && \
    rm commandlinetools-linux-*_latest.zip

# Android SDK 구성 요소 설치 (필수 구성 요소만)
# - platform-tools: adb, fastboot 등 기본 도구들
# - platforms;android-34: Android 14 (API 34) 플랫폼
# - build-tools;34.0.0: 빌드 도구 (aapt, dx, zipalign 등)
# - 라이선스 자동 승인 후 설치
RUN yes | sdkmanager --licenses >/dev/null 2>&1 && \
    sdkmanager \
        "platform-tools" \
        "platforms;android-34" \
        "build-tools;34.0.0" \
        >/dev/null 2>&1

# Stage 2: 런타임 환경 (Runtime Stage)
# - 최종 실행 환경 구성
# - Builder Stage에서 필요한 파일들만 복사
# - 이미지 크기 최소화를 위해 불필요한 빌드 도구들 제외
FROM openjdk:17-jdk-alpine AS runtime

# 환경 변수 재설정 (Runtime Stage에서 다시 설정 필요)
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools

# 런타임에 필요한 최소한의 패키지만 설치
# - bash: Gradle wrapper 스크립트 실행용
# - coreutils: 기본 유틸리티 명령어들
RUN apk add --no-cache bash coreutils

# Builder Stage에서 설치된 Android SDK 전체 복사
# - Multi-stage 빌드의 핵심: 설치된 SDK만 가져오기
# - 다운로드/설치 도구들은 포함되지 않음
COPY --from=builder ${ANDROID_HOME} ${ANDROID_HOME}

# 작업 디렉토리 설정
# - 호스트의 프로젝트 루트가 마운트될 위치
WORKDIR /workspace

# Gradle 캐시를 위한 볼륨 포인트 선언
# - Docker Compose에서 영구 볼륨으로 마운트 예정
# - 빌드 속도 향상을 위한 캐시 유지
VOLUME ["/workspace/.gradle", "/workspace/build"]

# Gradle wrapper 파일들 복사 및 실행 권한 설정
# - gradlew: Gradle wrapper 실행 스크립트
# - gradle.properties: Gradle 전역 설정
# - gradle/: Gradle wrapper 라이브러리 폴더
COPY gradlew gradle.properties ./
COPY gradle/ gradle/
RUN chmod +x ./gradlew

# 종속성 캐시 최적화를 위한 빌드 설정 파일들 복사
# - build.gradle.kts: 루트 빌드 스크립트
# - settings.gradle.kts: 프로젝트 설정
# - gradle/libs.versions.toml: 라이브러리 버전 카탈로그
COPY build.gradle.kts settings.gradle.kts ./
COPY gradle/libs.versions.toml gradle/libs.versions.toml

# Android SDK 경로 설정 파일 생성
# - Gradle이 Android SDK를 찾을 수 있도록 경로 지정
RUN echo "sdk.dir=${ANDROID_HOME}" > local.properties

# Gradle 종속성 사전 다운로드 (빌드 시간 단축)
# - 실패해도 계속 진행 (|| true)  
# - 이미지 빌드 시 종속성을 미리 캐시
# - 실제 빌드 시 네트워크 다운로드 시간 단축
RUN ./gradlew dependencies --no-daemon >/dev/null 2>&1 || true

# 참고: 소스 코드는 런타임에 볼륨 마운트로 제공
# - 개발 중 코드 변경 시 이미지 재빌드 불필요
# - Docker Compose 또는 run-gradle 스크립트에서 처리

# 기본 실행 명령어 (도움말 표시)
# - 컨테이너 실행 시 기본 동작
# - 실제 사용 시에는 특정 Gradle 명령어로 오버라이드됨
CMD ["./gradlew", "--help"]