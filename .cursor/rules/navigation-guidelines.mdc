---
description: 
globs: 
alwaysApply: false
---
# Projecting Kotlin: 네비게이션 가이드라인

## 1. 개요

본 문서는 "Projecting Kotlin" 프로젝트의 네비게이션 시스템의 구조, 주요 구성 요소, 사용 방법 및 모범 사례를 정의합니다. 일관되고 예측 가능한 네비게이션 흐름을 구축하여 개발 효율성을 높이고 사용자 경험을 향상시키는 것을 목표로 합니다.

이 네비게이션 시스템은 `core_navigation` 모듈을 통해 제공되며, 타입 안전하고 모듈화된 네비게이션을 지향합니다.

## 2. 주요 구성 요소

프로젝트의 네비게이션은 주로 다음 요소들을 통해 관리됩니다.

### 2.1. `AppNavigator` 인터페이스

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/core/AppNavigator.kt`
-   **역할**: 앱 전체 네비게이션 로직을 위한 통합 인터페이스입니다. ViewModel 등에서는 이 인터페이스에 의존하여 네비게이션 기능을 사용합니다. 네비게이션 명령 발행, 컨트롤러 설정, 결과 처리, 화면 상태 관리 등 다양한 네비게이션 관련 기능을 추상화합니다.

### 2.2. `NavigationManager` 클래스

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/core/NavigationManager.kt`
-   **역할**: `AppNavigator` 인터페이스의 주요 구현체이자 싱글톤 클래스입니다. 앱 전체의 네비게이션 로직을 중앙에서 관리합니다.
-   **주요 특징**:
    -   최상위 `NavHostController` (`parentNavController`)와 현재 활성화된 중첩(자식) `NavHostController` (`activeChildNavController`)를 내부적으로 관리합니다.
    -   네비게이션 요청은 `NavigationCommand` 객체를 통해 이루어지며, `SharedFlow` (`navigationCommands`)를 통해 발행되어 UI 레이어(NavHost)에서 처리됩니다.
    -   화면 간 결과 전달, 화면 상태 저장/복원 등의 고급 기능을 제공합니다.

### 2.3. `NavHostController`

-   Android Jetpack Navigation 라이브러리의 핵심 컴포넌트입니다.
-   실제 네비게이션 그래프를 관리하고 화면 스택 및 전환을 수행합니다.
-   `NavigationManager`는 `parentNavController` (앱의 메인 NavHost)와 `activeChildNavController` (중첩 NavHost)를 통해 이 컨트롤러와 상호작용합니다.

### 2.4. `NavDestination` 인터페이스

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/core/NavigationCommand.kt` (내부에 정의)
-   **역할**: 네비게이션 목적지(화면)를 정의하는 인터페이스입니다. 모든 화면 목적지 객체가 구현할 수 있으며, 최소한 `route` 문자열을 가집니다. 인자를 포함한 전체 경로를 생성하는 `createRoute`와 같은 유틸리티 함수를 제공합니다.

### 2.5. `NavigationCommand` sealed 클래스

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/core/NavigationCommand.kt`
-   **역할**: 네비게이션 동작을 정의하는 다양한 명령 타입을 포함하는 sealed 클래스입니다. ViewModel에서 `AppNavigator`를 통해 이 커맨드를 발행하면, `NavigationManager`가 이를 수신하여 적절한 네비게이션 로직을 수행합니다.
-   **주요 명령 종류**:
    -   `NavigateToRoute(destination: NavDestination, args: Map<String, Any>, navOptions: NavOptions?)`: 특정 목적지로 인자와 함께 이동합니다. `NavDestination.fromRoute(route)` 헬퍼를 통해 문자열 경로로도 생성 가능합니다.
    -   `NavigateBack`: 이전 화면으로 돌아갑니다.
    -   `NavigateUp`: 논리적 상위 화면으로 이동합니다 (Up 버튼 동작).
    -   `NavigateToNestedGraph(parentDestination: NavDestination, childDestination: NavDestination)`: 중첩된 네비게이션 그래프로 이동합니다.
    -   `NavigateToTab(destination: NavDestination, saveState: Boolean, restoreState: Boolean)`: 특정 탭으로 이동하며 상태 저장/복원 옵션을 지원합니다.
    -   `NavigateClearingBackStack(destination: NavDestination)`: 백스택을 모두 비우고 특정 경로로 이동합니다.

### 2.6. `AppRoutes` object

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/destination/AppRoutes.kt`
-   **역할**: 앱 내 모든 화면 및 네비게이션 그래프의 경로를 타입 안전하게 정의하는 object입니다.
-   **구조**:
    -   기능별로 중첩된 object(예: `AppRoutes.Auth`, `AppRoutes.Main`, `AppRoutes.Project`)를 사용하여 경로를 그룹화합니다.
    -   각 화면 경로는 `path`라는 `const val`로 정의되거나, 인자가 필요한 경우 인자를 받아 경로 문자열을 반환하는 함수(예: `AppRoutes.Project.detail(projectId: String)`)로 정의됩니다.
    -   경로 인자 정의(`navArgument`)도 함께 제공하여 `NavHost` 구성 시 사용됩니다 (예: `AppRoutes.Project.detailArguments`).
-   **규칙**:
    -   모든 경로는 `AppRoutes`를 통해 참조되어야 하며, 문자열 리터럴을 직접 사용하는 것을 지양합니다.

### 2.7. `BottomNavConfig.kt`

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/destination/BottomNavConfig.kt`
-   **역할**: 하단 네비게이션 바에 사용될 아이템들(`BottomNavItem` 데이터 클래스)의 목록(`mainBottomNavItems`)을 정의합니다. 각 아이템은 경로, 제목, 아이콘 정보를 가집니다.

### 2.8. `NavControllerState.kt`

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/core/NavControllerState.kt`
-   **역할**: 네비게이션 컨트롤러의 상태(백스택, 화면 UI 상태)를 저장하기 위한 `Parcelable` 데이터 클래스입니다. `NavControllerSaver`는 이 상태 맵을 저장하고 복원하는 `Saver` 구현체입니다.

### 2.9. `di/NavigationModule.kt`

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/di/NavigationModule.kt`
-   **역할**: Dagger Hilt 모듈로서, `NavigationManager`의 인스턴스를 `AppNavigator` 인터페이스 타입으로 바인딩하여 앱 전체에 싱글톤으로 제공합니다.

### 2.10. 확장 함수들

-   **경로**: `core/core_navigation/src/main/java/com/example/core_navigation/extension/`
-   **역할**: `AppNavigator`, `NavController`, `SavedStateHandle` 등에 대한 Kotlin 확장 함수들을 제공하여 네비게이션 관련 작업을 더 간결하고 편리하게 수행할 수 있도록 돕습니다.
    -   `DestinationExtensions.kt`: 특정 목적지로의 이동을 위한 `AppNavigator` 확장 함수들 (예: `navigateToProjectDetails`, `navigateToChat`).
    -   `NavigationExtensions.kt`: `NavController`에서 인자를 가져오거나 결과를 관찰하는 유틸리티 (`ObserveResult` Composable, `ObserveNavigationResult` Composable).
    -   `SavedStateHandleExtensions.kt`: ViewModel의 `SavedStateHandle`에서 네비게이션 인자를 타입 안전하게 가져오기 위한 다양한 확장 함수들 (예: `getRequiredString`, `getIntOrDefault`, `getStringFlow`).

## 3. 네비게이션 흐름

### 3.1. ViewModel에서의 네비게이션 요청

-   ViewModel은 `AppNavigator` 인터페이스를 주입받습니다.
-   화면 이동 필요시, ViewModel은 적절한 `NavigationCommand`를 생성하고 `AppNavigator`의 메서드(예: `navigate(command)`, `navigateTo(command)`, `navigateBack()`)를 호출합니다.

    ```kotlin
    // 예시: ViewModel에서 로그인 화면으로 이동 요청
    viewModelScope.launch {
        // AppRoutes를 사용하여 목적지 정의
        val loginDestination = NavDestination.fromRoute(AppRoutes.Auth.Login.path)
        appNavigator.navigateTo(NavigationCommand.NavigateToRoute(loginDestination))
    }
    ```

### 3.2. NavHost에서의 네비게이션 처리

-   Activity 또는 최상위 Composable 함수 내의 `NavHost`는 `NavigationManager` (실제로는 `AppNavigator`를 통해 주입받은)의 `navigationCommands` Flow를 구독합니다.
-   새로운 `NavigationCommand`가 발행되면, `NavHostController`를 사용하여 실제 화면 전환을 수행합니다. 이 로직은 보통 앱의 메인 네비게이션 그래프 설정 부분에 위치합니다.
-   `NavigationManager.setNavController(navController)`를 통해 `NavHost`의 `NavController`를 `NavigationManager`에 등록합니다.

### 3.3. 중첩 네비게이션 (Nested Navigation)

-   하나의 화면 내에 별도의 네비게이션 스택을 가지는 자식 `NavHost`를 사용하는 경우입니다. (예: `MainScreen` 내의 여러 탭, 각 탭이 독립적인 백스택 소유)
-   **설정**:
    -   중첩 `NavHost`가 생성될 때, 해당 `NavHostController`를 `AppNavigator.setChildNavController(childNavController)`를 통해 등록합니다.
    -   중첩 `NavHost`가 해제될 때, `AppNavigator.setChildNavController(null)`을 호출하여 참조를 해제합니다.
-   **동작**:
    -   `NavigationManager`는 `activeChildNavController`가 설정되어 있으면 우선적으로 자식 컨트롤러를 통해 네비게이션을 시도합니다.
    -   `navigateBack()` 호출 시, 자식 컨트롤러의 백스택을 먼저 처리하고, 없으면 부모 컨트롤러(`parentNavController`)의 백스택을 처리합니다.
    -   `NavigationManager.navigateTo(command)`는 경로를 분석하여, 현재 중첩 그래프 내의 경로인지, 아니면 부모 그래프로 이동 후 중첩 그래프로 다시 진입해야 하는지를 판단하여 처리합니다. (`NavigationManager.kt`의 `navigateTo` 로직 참고)

### 3.4. 탭 네비게이션

-   주로 하단 네비게이션 바 (`BottomNavigationBar`)를 통해 여러 메인 기능 화면으로 전환하는 경우입니다.
-   `AppNavigator.navigateToTab(command: NavigationCommand.NavigateToTab)` 메서드 또는 `NavigationCommand.NavigateToTab.fromRoute(route, saveState, restoreState)`를 생성하여 `navigate()`를 사용합니다.
-   `BottomNavConfig.kt`에 정의된 `BottomNavItem`들의 `route`를 사용합니다.
-   탭 전환 시 `saveState` 및 `restoreState` 옵션을 통해 이전 탭의 상태를 보존하거나 복원할 수 있습니다.

## 4. 화면 간 데이터 전달 및 결과 수신

-   `AppNavigator`는 화면 간 데이터를 전달하고 결과를 수신하기 위한 메서드들을 제공합니다.
    1.  **`setResult(key: String, result: T)`**:
        -   이전 화면으로 전달할 데이터를 설정합니다.
        -   `NavigationManager`는 내부 `resultStore`와 `previousBackStackEntry`의 `SavedStateHandle`에 결과를 저장합니다.
        -   해당 `key`를 구독하는 `getResultFlow`가 있다면 즉시 발행합니다.
    2.  **`getResult(key: String): T?`**:
        -   이전 화면으로부터 전달된 데이터를 일회성으로 가져옵니다.
        -   `NavigationManager`는 내부 `resultStore` 또는 `currentBackStackEntry`의 `SavedStateHandle`에서 데이터를 가져온 후 해당 데이터를 제거합니다.
    3.  **`getResultFlow(key: String): Flow<T>`**:
        -   특정 `key`에 대한 결과 데이터 스트림을 `Flow`로 제공받습니다. 결과가 `setResult`를 통해 설정될 때마다 데이터를 수신할 수 있습니다.
-   **ViewModel에서의 인자 수신**:
    -   ViewModel의 `SavedStateHandle`을 사용하여 네비게이션 인자를 수신합니다.
    -   `core_navigation/extension/SavedStateHandleExtensions.kt`의 확장 함수들 (예: `getRequiredString`, `getIntOrDefault`)을 사용하면 편리합니다.
-   **Composable에서의 결과 수신**:
    -   `core_navigation/extension/NavigationExtensions.kt`의 `ObserveNavigationResult` Composable 함수를 사용하여 `NavigationManager`를 통해 전달되는 결과를 관찰할 수 있습니다.

## 5. 화면 상태 관리

-   탭 전환 등 화면이 백스택에서 완전히 제거되지는 않지만 UI 상태(스크롤 위치, 입력 값 등)를 보존해야 할 때 사용합니다.
-   `AppNavigator`는 다음 메서드를 제공합니다:
    1.  **`saveScreenState(screenRoute: String, state: Bundle)`**: 특정 화면(라우트 기준)의 상태를 `Bundle` 형태로 저장합니다.
    2.  **`getScreenState(screenRoute: String): Bundle?`**: 저장된 화면 상태를 가져옵니다.
-   `NavControllerState.kt`의 `NavControllerState`와 `NavControllerSaver`는 이러한 상태 저장/복원 메커니즘의 일부로 사용될 수 있습니다.

## 6. 경로 정의 및 관리 (`AppRoutes.kt`)

-   모든 네비게이션 경로는 `core/core_navigation/src/main/java/com/example/core_navigation/destination/AppRoutes.kt` 파일의 `AppRoutes` object를 통해 타입 안전하게 정의되고 관리됩니다.
-   **구조 및 명명 규칙**:
    -   최상위 경로는 모듈이나 주요 기능을 나타내는 중첩 object (예: `Auth`, `Main`, `Project`, `User`, `Settings`, `Friends`, `Chat`, `Search`, `Dev`, `FCM`)로 그룹화됩니다.
    -   각 화면 또는 그래프의 경로는 `const val path`로 정의되거나, 인자를 받는 함수의 형태로 제공됩니다 (예: `Project.detail(projectId: String)`).
    -   네비게이션 그래프 자체의 경로도 정의됩니다 (예: `Auth.Graph.path`, `Main.Home.GRAPH_ROOT`).
    -   경로 인자는 `ARG_` 접두사를 사용하여 상수로 정의되고 (예: `Project.ARG_PROJECT_ID`), `navArgument`를 사용하여 `NavType`과 함께 리스트로 제공됩니다 (예: `Project.detailArguments`).
-   **사용**:
    -   ViewModel이나 `NavigationCommand` 생성 시 항상 `AppRoutes`의 정의를 사용해야 합니다.
        ```kotlin
        // 프로젝트 상세 화면으로 이동하는 경로 생성
        val route = AppRoutes.Project.detail(projectId = "someProjectId")
        // 로그인 화면 경로
        val loginRoute = AppRoutes.Auth.Login.path
        ```
-   **유효성 검사**:
    -   `AppNavigator.isValidRoute(routePath: String)`: 제공된 경로 문자열이 기본적인 유효성을 갖는지 검사합니다. (`NavigationManager` 구현 참고)

## 7. 네비게이션 관련 유틸리티 및 확장 함수

-   `core_navigation` 모듈은 개발 편의성을 위해 다양한 확장 함수를 제공합니다.
    -   **`DestinationExtensions.kt`**: `AppNavigator`에 대한 확장 함수로, 특정 `AppRoutes` 목적지로 쉽게 이동할 수 있는 편의 함수들을 제공합니다 (예: `appNavigator.navigateToProjectDetails(projectId)`).
    -   **`NavigationExtensions.kt`**: `NavController`를 위한 확장 함수 (예: `getArgument`) 및 Composable 함수 (예: `ObserveResult`, `ObserveNavigationResult`)를 제공하여 결과 처리를 단순화합니다.
    -   **`SavedStateHandleExtensions.kt`**: ViewModel에서 `SavedStateHandle`을 통해 네비게이션 인자를 보다 안전하고 간편하게 가져올 수 있도록 다양한 타입별 get 함수 및 Flow 변환 함수를 제공합니다.

## 8. 모범 사례 및 주의사항

-   **ViewModel은 `NavHostController`를 직접 참조하지 마십시오.** 항상 `AppNavigator` 인터페이스를 통해 네비게이션을 요청하여 관심사를 분리하고 테스트 용이성을 높입니다.
-   네비게이션 로직은 `NavigationManager` 또는 ViewModel 내의 네비게이션 담당 부분에 집중시켜 UI 컴포넌트(Composable)의 복잡도를 낮춥니다.
-   화면 간 전달되는 데이터는 가능한 한 작게 유지합니다. 필요한 최소한의 식별자(ID)만 전달하고, 상세 데이터는 ViewModel에서 Repository를 통해 다시 로드하는 것을 권장합니다.
-   중첩 네비게이션 사용 시, `activeChildNavController`의 등록 및 해제(`setChildNavController`) 생명주기 관리에 유의하여 메모리 누수나 잘못된 참조가 발생하지 않도록 합니다.
-   `AppRoutes`를 사용하여 모든 경로를 중앙에서 관리하고, 타입 안전성을 확보합니다.
-   `NavigationManager`에서 발생할 수 있는 `IllegalStateException` (예: `previousBackStackEntry`가 없는 경우 결과 설정 시도) 등에 대한 방어 로직이 `NavigationManager` 내부에 일부 포함되어 있으나, 사용 시 주의가 필요합니다.

## 9. 새로운 화면/기능 추가 시 네비게이션 설정 가이드

1.  **경로 정의 (`AppRoutes.kt`)**:
    -   `AppRoutes.kt`에 새로운 화면 또는 네비게이션 그래프의 경로를 추가합니다. 기존 구조와 명명 규칙을 따릅니다.
    -   필요한 경우 인자(`ARG_`)와 해당 인자를 사용하는 경로 생성 함수, `navArgument` 리스트를 정의합니다.
2.  **NavGraph 구성**:
    -   관련 `NavHost`를 설정하는 Composable 함수에서 Jetpack Navigation의 `NavGraphBuilder`를 사용하여 새로운 `composable` 또는 `navigation` (중첩 그래프용)을 정의합니다. 이때 `AppRoutes`에서 정의한 경로와 인자를 사용합니다.
3.  **ViewModel 구현**:
    -   필요한 경우 `AppNavigator`를 주입받습니다.
    -   화면 이동 로직에서 `AppNavigator`의 메서드와 `NavigationCommand`를 사용하여 네비게이션을 요청합니다. `AppRoutes`를 사용하여 목적지를 지정합니다.
    -   인자를 받아야 하는 경우 `SavedStateHandle`과 `SavedStateHandleExtensions.kt`를 활용합니다.
4.  **UI (Composable) 구현**:
    -   새로운 화면 Composable 함수를 작성합니다.
    -   결과를 이전 화면으로 전달해야 하는 경우 `appNavigator.setResult(key, value)` 후 `appNavigator.navigateBack()`을 호출합니다.
    -   다른 화면으로부터 결과를 받아야 하는 경우 `ObserveNavigationResult` Composable 또는 `appNavigator.getResult(key)` / `appNavigator.getResultFlow(key)`를 사용합니다.
5.  **중첩 네비게이션**: 새로운 화면이 중첩된 `NavHost` 내에 포함된다면, 해당 `NavHostController`를 `appNavigator.setChildNavController`를 통해 적절히 등록 및 해제해야 합니다.
6.  **하단 탭 추가 (필요시)**: `BottomNavConfig.kt`의 `mainBottomNavItems` 리스트에 새로운 `BottomNavItem`을 추가합니다.

