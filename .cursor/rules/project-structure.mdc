---
description: The overall structure of this project.
globs: 
alwaysApply: false
---
# Projecting Kotlin: Project Structure

*이 문서는 프로젝트의 모듈/디렉토리 구조를 설명합니다. 중요한 구조적 변경이 있을 때 이 문서를 업데이트하세요.*

## 1. 모듈 계층 구조

### 도메인 레이어
- **`:domain:model`**
  - **역할:** 순수 비즈니스 엔티티/모델 (Kotlin data classes)
  - **내용:** 
    - `model/`: 엔티티 클래스 (User, Project, Friend, Message, Schedule, Invite 등)
    - `enum/`: 상태, 타입 등의 열거형
    - `exception/`: 도메인 특화 예외

- **`:domain:repository`**
  - **역할:** 데이터 접근을 위한 인터페이스 정의
  - **내용:** 
    - `repository/`: 레포지토리 인터페이스 (UserRepository, ProjectRepository, InviteRepository 등)

- **`:domain:usecase`**
  - **역할:** 비즈니스 로직 캡슐화
  - **내용:** 
    - `usecase/`: 단일 책임을 가진 유스케이스들

### 데이터 레이어
- **`:data:remote`**
  - **역할:** 원격 데이터 소스 구현 (Firebase Firestore, API)
  - **내용:** 
    - `api/`: API 인터페이스 (Retrofit)
    - `dto/`: 데이터 전송 객체
    - `mapper/`: DTO ↔ 도메인 모델 변환기
    - `firebase/`: Firebase 관련 코드
    - `datasource/`: 원격 데이터 소스 구현
      - `auth/`: 인증 관련 데이터 소스
      - `project/`: 프로젝트 관련 데이터 소스
      - `invite/`: 초대 관련 데이터 소스
      - `friend/`: 친구 관련 데이터 소스
      - `dm/`: DM 관련 데이터 소스
      - `schedule/`: 일정 관련 데이터 소스

- **`:data:local`**
  - **역할:** 로컬 데이터 저장소 구현 (Room, DataStore)
  - **내용:** 
    - `db/`: Room 데이터베이스 관련 코드
      - `dao/`: Data Access Object 인터페이스 
        - `UserDao`, `ProjectDao`, `FriendDao`, `InviteDao`, `DmDao`, `ScheduleDao` 등
      - `AppDatabase.kt`: 데이터베이스 정의 및 DAO 제공
      - `AppTypeConverters.kt`: 커스텀 타입 변환기 (Date, LocalDateTime, List<String>)
    - `model/local/`: 로컬 데이터베이스 엔티티
      - `UserEntity`, `ProjectEntity`, `FriendEntity`, `FriendRequestEntity`, `DmConversationEntity` 등
    - `datastore/`: DataStore 관련 코드
    - `datasource/`: 로컬 데이터 소스 구현
      - `auth/`: 인증 관련 로컬 데이터 소스
      - `project/`: 프로젝트 관련 로컬 데이터 소스
      - `invite/`: 초대 관련 로컬 데이터 소스
      - `friend/`: 친구 관련 로컬 데이터 소스
      - `dm/`: DM 관련 로컬 데이터 소스
      - `schedule/`: 일정 관련 로컬 데이터 소스

- **`:data:repository`**
  - **역할:** 도메인 레이어 레포지토리 인터페이스 구현
  - **내용:** 
    - `repository/`: 레포지토리 구현체
      - `AuthRepositoryImpl`, `ProjectRepositoryImpl`, `InviteRepositoryImpl` 등
    - `di/`: 레포지토리 의존성 주입 모듈

### 프레젠테이션 레이어
- **`:feature:auth`**: 인증 관련 기능
- **`:feature:chat`**: 메시징 및 채팅 기능
- **`:feature:dev`**: 개발/디버그 유틸리티
- **`:feature:friends`**: 친구 목록 및 관리
- **`:feature:main`**: 메인 화면 컨테이너
- **`:feature:profile`**: 사용자 프로필 표시 및 수정
- **`:feature:project`**: 프로젝트/서버 생성 및 관리
- **`:feature:schedule`**: 일정 관리
- **`:feature:search`**: 검색 기능
- **`:feature:settings`**: 앱 설정

**각 기능 모듈 내부 패키지 구조:**
```
feature:feature_name/
├── ui/                 # Composable 컴포넌트, 화면
├── viewmodel/          # 화면별 ViewModel
├── mapper/             # 도메인 모델 → UI 모델 변환
├── model/              # UI 모델 (상태, 이벤트)
└── di/                 # 기능별 의존성 주입 모듈
```

### 코어 레이어
- **`:core:ui`**
  - **역할:** 공통 UI 컴포넌트, 테마, 스타일
  - **내용:** 
    - `component/`: 재사용 가능한 Compose 컴포넌트
    - `theme/`: Material 테마 정의
    - `resource/`: 리소스 (색상, 크기, 문자열)
    - `animation/`: 애니메이션 유틸리티

- **`:core:common`**
  - **역할:** 프레임워크 독립적 유틸리티
  - **내용:**
    - `extension/`: Kotlin 확장 함수
    - `util/`: 유틸리티 클래스
    - `formatter/`: 날짜, 숫자 등 포맷터

- **`:core:logging`**
  - **역할:** 로깅 추상화 (Sentry)
  - **내용:**
    - `logger/`: 로깅 인터페이스 및 구현
    - `crashreporter/`: 충돌 보고 유틸리티

- **`:core:testing`**
  - **역할:** 테스트 관련 공통 코드
  - **내용:**
    - `factory/`: 테스트 객체 생성 팩토리
    - `rule/`: 테스트 규칙
    - `fake/`: Fake 구현체

- **`:core:network`**
  - **역할:** 네트워크 공통 구성 요소
  - **내용:**
    - `interceptor/`: OkHttp 인터셉터
    - `factory/`: Retrofit 팩토리
    - `monitoring/`: 네트워크 모니터링
    - `connectivity/`: 네트워크 연결 상태 모니터

- **`:core:di`**
  - **역할:** 의존성 주입 공통 설정
  - **내용:**
    - `module/`: 공통 Hilt 모듈
    - `qualifier/`: 한정자

- **`:core:analytics`**
  - **역할:** 분석 관련 공통 코드
  - **내용:**
    - `tracker/`: 이벤트 추적 인터페이스
    - `provider/`: 분석 제공자 구현

### 앱 레이어
- **`:app`**
  - **역할:** 모듈 통합, 앱 진입점
  - **내용:**
    - `di/`: 앱 수준 의존성 주입
    - `initializer/`: 앱 초기화 로직
    - `ui/`: 메인 액티비티, 앱 컴포저블

### 네비게이션 레이어
- **`:navigation`**
  - **역할:** 앱 전체 네비게이션 정의
  - **내용:**
    - `route/`: 네비게이션 라우트 상수
    - `args/`: 네비게이션 인자 정의
    - `graph/`: 네비게이션 그래프 정의

## 2. 주요 Firebase 구성 파일

- `firebase.json`: Firebase 호스팅 및 함수 배포 설정
- `.firebaserc`: Firebase 프로젝트 별칭 정의
- `firestore.rules`: Firestore 데이터베이스 접근 제어 규칙
  - 사용자, 친구, 프로젝트, DM, 일정, 초대 등에 대한 세부 접근 규칙
  - 문서 수준의 권한 관리 (읽기, 생성, 수정, 삭제)
- `storage.rules`: Firebase Storage 접근 제어 규칙
- `firestore.indexes.json`: Firestore 쿼리용 복합 색인 정의
  - 친구 필터링 및 정렬 (상태, 시간순)
  - DM 대화 필터링 및 정렬 (참가자, 최근 메시지 시간순)
  - 프로젝트 멤버, 역할, 카테고리, 채널 관련 색인
  - 초대 관련 색인

## 3. Room 데이터베이스 구조

### 엔티티
- **사용자 관련**
  - `UserEntity`: 사용자 프로필 정보
  - `FriendEntity`: 친구 관계 정보
  - `FriendRequestEntity`: 친구 요청 정보

- **프로젝트 관련**
  - `ProjectEntity`: 프로젝트 기본 정보
  - `ProjectMemberEntity`: 프로젝트 멤버 정보
  - `RoleEntity`: 역할 정의
  - `RolePermissionEntity`: 역할별 권한 정보
  - `CategoryEntity`: 카테고리 정보
  - `ChannelEntity`: 채널 정보

- **채팅 관련**
  - `ChatEntity`: 채팅방 정보
  - `ChatMessageEntity`: 채팅 메시지
  - `DmConversationEntity`: DM 대화 정보

- **기타**
  - `ScheduleEntity`: 일정 정보
  - `InviteEntity`: 초대 토큰 정보

### DAO
- `UserDao`: 사용자 조회, 저장, 업데이트
- `FriendDao`: 친구 목록 및 요청 관리
- `ProjectDao`: 프로젝트 정보 관리
- `ProjectMemberDao`: 프로젝트 멤버 관리
- `RoleDao`: 역할 및 권한 관리
- `ProjectStructureDao`: 카테고리 및 채널 관리
- `ChatDao`: 채널 채팅 관리
- `DmDao`: DM 대화 관리
- `ScheduleDao`: 일정 관리
- `InviteDao`: 초대 토큰 관리

### TypeConverters
- `AppTypeConverters`: 커스텀 타입 변환
  - `dateToLong(Date?)`: Date → Long 변환
  - `longToDate(Long?)`: Long → Date 변환
  - `fromTimestamp(Long?)`: Long → LocalDateTime 변환
  - `dateToTimestamp(LocalDateTime?)`: LocalDateTime → Long 변환
  - `listToJson(List<String>?)`: List → JSON 변환
  - `jsonToList(String?)`: JSON → List 변환

## 4. 디자인 패턴 및 명명 규칙

### 패키지 구조 규칙
- **기능 기반 패키징**: 관련 기능을 함께 그룹화
- **계층 내 기능 패키지**: 관련된 기능들을 한 패키지 안에 묶음
- **일관된 네이밍**: 모든 패키지는 소문자와 언더스코어 사용 (`snake_case`)

### 파일 명명 규칙
- **Kotlin 파일 (.kt)**: `PascalCase.kt`
- **클래스/인터페이스/객체/열거형**: `PascalCase`
  - 접미사: `UiState`, `Event`, `ViewModel`, `UseCase`, `Repository`, `Impl`
- **Composable 함수**: `PascalCase`
- **변수/프로퍼티**: `camelCase`
  - 접두사: `_` (private mutable flows)
- **상수**: `SCREAMING_SNAKE_CASE`

### 모듈 의존성 규칙
1. 모든 의존성은 단방향 흐름 유지 (안쪽 → 바깥쪽)
2. 기능 모듈은 다른 기능 모듈에 직접 의존하지 않음
3. 데이터 레이어는 도메인 레이어에만 의존
4. 모든 모듈은 관련 코어 모듈에 의존 가능
5. 앱 모듈은 모든 필요 모듈에 의존