---
description: Use when a feature is completed, there is work to be done with git.
globs: 
alwaysApply: false
---
# Testing and Git Workflow

*This document defines the standard workflow for test creation, validation, and code committing for the Projecting Kotlin project.*

## Workflow Overview

```mermaid
graph TD
    A[Create Tests] --> B[Run Tests]
    B -->|Fail| C[Fix Issues]
    C --> B
    B -->|All Tests Pass| D[Git Status & Add]
    D --> E[Git Commit]
    E --> F[Git Push]
    C -->|All Cases Fail| G[Notify User and Break]
```

## Detailed Steps

### 1. Test Creation

- Create comprehensive unit tests for **all new features and components**
- **Each feature must have its own test class(es)**
- Tests should be created for:
  - Core business logic (ViewModel tests)
  - UI components (Composable function tests)
  - Edge cases and error conditions
  - Utility functions
  
#### 1.1. Test Class Naming Conventions
- `<Class/Component>Test.kt` for general component tests
- `<Class/Component>UnitTest.kt` for detailed unit tests
- `<Class/Component>IntegrationTest.kt` for integration tests

#### 1.2. Required Test Coverage
Every new feature must include tests for:
- **Data validation**: Input validation, boundary checks
- **State management**: State transitions, side effects
- **UI rendering**: Component rendering in different states
- **User interactions**: Click handling, input processing
- **Error handling**: Error states, recovery paths

#### 1.3. Test Implementation Guidelines
```kotlin
// Example test structure
class MyFeatureTest {
    @Before
    fun setup() {
        // Initialize test dependencies
    }
    
    @Test
    fun `when condition then expected outcome`() {
        // Arrange: set up test conditions
        // Act: perform the action being tested
        // Assert: verify expected outcomes
    }
    
    // Test different scenarios for the same component/function
    @Test
    fun `when alternative condition then alternative outcome`() {
        // Test implementation
    }
}
```

### 2. Test Execution

Run tests using Gradle:
```
.\gradlew :feature:<module>:test
```

For more detailed output:
```
.\gradlew :feature:<module>:test --info
```

#### 2.1. Handling Test Failures

If tests fail:
- Analyze the failure logs and error messages
- Make necessary code adjustments
- Run tests again after each fix
- Continue until all tests pass

#### 2.2. Handling Persistent Failures

If tests fail across all attempted solutions:
- Document the specific failures in detail
- Notify the user/team of the unresolved issues
- Break the current workflow to allow for deeper analysis
- Consider creating a dedicated issue ticket

#### 2.3. Test Success Handling

When tests pass:
- Verify all requirements are met
- Continue to the git workflow stages

### 3. Git Workflow

#### 3.1. Check Status

Always start by checking what files have been changed:
```bash
git status
```
Review the output to confirm that:
- Expected files are modified
- No unexpected files are modified
- No sensitive files (credentials, local config) are included

#### 3.2. Stage Changes

Add the changes you want to commit:
```bash
# Add all changes
git add .

# Or add specific files
git add path/to/file1 path/to/file2
```

#### 3.3. Review Staged Changes

Verify what is about to be committed:
```bash
git status
# OR more detailed diff view
git diff --staged
```

#### 3.4. Commit Changes with Structured Messages

Commits must follow a structured markdown format with a clear title and detailed content:

```powershell
# 임시 커밋 메시지 파일 생성
$message = @"
제목: 요약 내용

상세 설명 (필요한 경우 여러 줄로 작성)
- 변경 사항 1
- 변경 사항 2
- 변경 사항 3

Closes #이슈번호 (해당되는 경우)
"@

# 임시 파일에 메시지 저장
$tempFile = "commit_msg.txt"
$message | Out-File -FilePath $tempFile -Encoding utf8

# 파일을 사용하여 커밋
git commit -F $tempFile

# 성공 메시지 (선택사항)
if ($LASTEXITCODE -eq 0) {
    Write-Host "커밋이 성공적으로 생성되었습니다." -ForegroundColor Green
} else {
    Write-Host "커밋 생성 중 오류가 발생했습니다." -ForegroundColor Red
}

# 임시 파일 삭제 (선택사항)
# Remove-Item $tempFile
```

**커밋 메시지 구조:**
- **제목:** 간결하고 명확한 요약 (50자 이내)
- **본문:** 필요한 경우 자세한 설명과 변경 사항 목록 (마크다운 형식 지원)
- **푸터:** 관련 이슈 참조 (Closes, Fixes, Resolves 등)

**예시 커밋 메시지:**
```powershell
# 임시 커밋 메시지 파일 생성
$message = @"
제목: 월간 캘린더 뷰 구현

월간 캘린더 화면 및 기능 구현 완료
- 월별 그리드 캘린더 표시 추가
- 일자 선택 처리 기능 구현
- 이벤트가 있는 날짜 표시 추가
- 애니메이션과 함께 월 탐색 기능 구현
- 상태 관리용 CalendarViewModel 연동

Closes #42
"@

# 임시 파일에 메시지 저장 및 커밋
$tempFile = "commit_msg.txt"
$message | Out-File -FilePath $tempFile -Encoding utf8
git commit -F $tempFile
```

```powershell
# 임시 커밋 메시지 파일 생성
$message = @"
제목: 캘린더 컴포넌트의 날짜 선택 오류 수정

- 월이 변경될 때 잘못된 날짜 하이라이팅 수정
- 월 경계를 처리하는 날짜 계산 로직 업데이트
- 경계 날짜 케이스에 대한 테스트 추가

Fixes #57
"@

# 임시 파일에 메시지 저장 및 커밋
$tempFile = "commit_msg.txt"
$message | Out-File -FilePath $tempFile -Encoding utf8
git commit -F $tempFile
```

**이 방식의 장점:**
- PowerShell 환경에서 안정적으로 작동
- 마크다운 형식을 통한 가독성 향상
- 제목과 본문의 명확한 분리
- 구조적이지만 간결한 메시지 작성 가능
- 변경 내용을 목록 형태로 명확하게 표현

#### 3.5. Push Changes

Push your commits to the remote repository:
```bash
# Push to the current branch
git push

# Or specify the branch
git push origin <branch-name>
```

#### 3.6. Verify Push

Ensure your changes have been pushed successfully:
```bash
# Check the remote status
git status
```

### 4. Post-Push Verification

- Verify CI/CD pipelines run successfully (if configured)
- Check the remote repository (GitHub/GitLab/etc.) to confirm your changes appear correctly
- Monitor for any post-push issues

## Command Reference

### Test Commands

```bash
# Run basic tests
.\gradlew :feature:<module>:test

# Clean test cache and run tests
.\gradlew :feature:<module>:cleanTest :feature:<module>:test

# Run tests with detailed output
.\gradlew :feature:<module>:test --info

# Run a specific test class
.\gradlew :feature:<module>:test --tests "com.example.MyTest"

# Run a specific test method
.\gradlew :feature:<module>:test --tests "com.example.MyTest.testMethod"
```

### Git Commands

```bash
# Check the status of your working directory
git status

# Stage changes
git add .
git add <file-path>

# Review staged changes
git diff --staged

# Commit with structured message
git commit -m "[Type]: Summary" -m "- Detailed point 1" -m "- Detailed point 2"

# For multi-line commit messages
git commit

# Push to remote
git push origin <branch-name>

# Check commit history
git log
```





