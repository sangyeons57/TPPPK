---
description: Rules for Firebase schema structure, reference when using Firebase.
globs: 
alwaysApply: false
---
# Projecting Kotlin: Firestore Schema

*This document outlines the primary Firestore database structure. Logic is implemented in the `:data` module's repositories.*

**Root:**
└── **`users`** [User information]
    └── `{userId}` (ID: Firebase Auth UID)
        ├── **Fields:** `email`, `nickname` (Unique), `profileImageUrl`?, `memo`?, `status`?, `createdAt`, `fcmToken`?, `participatingProjectIds`[]?, `accountStatus`, `activeDmIds`[]?, `isEmailVerified`
        └── **Subcollections:**
            └── **`friends`** [Friend relationships/status]
                └── `{friendId}` (ID: Friend UID)
                    └── **Fields:** 
                        ├── `status`: String - Relationship status (`accepted`, `pending_sent`, `pending_received`)
                        ├── `timestamp`: Timestamp - When the relationship was created
                        ├── `acceptedAt`: Timestamp? - When the relationship was accepted (nullable)
└── **`dms`** [1:1 direct message rooms]
    └── `{dmId}` (ID: Sorted UIDs `uid1_uid2`)
        ├── **Fields:** 
            ├── `participants`: Array<String> - List of user IDs
            ├── `lastMessage`: String? - Most recent message text
            ├── `lastMessageTimestamp`: Timestamp? - When the last message was sent
            ├── `createdAt`: Timestamp - When the DM channel was created
        └── **Subcollections:**
            └── **`messages`** [DM messages]
                └── `{messageId}` (ID: Auto)
                    └── **Fields:** `senderId`, `text`, `timestamp`
└── **`projects`** [Project/server information]
    └── `{projectId}` (ID: Auto)
        ├── **Fields:** `name`, `description`, `ownerId`, `createdAt`
        └── **Subcollections:**
            ├── **`members`** [Project members & roles]
            │   └── `{userId}` (ID: User UID)
            │       └── **Fields:** `roleIds`[]
            ├── **`roles`** [Project roles & permissions]
            │   └── `{roleId}` (ID: Auto)
            │       └── **Fields:** `name`, `permissions`: Map<String, Boolean>
            ├── **`categories`** [Channel categories]
            │   └── `{categoryId}` (ID: Auto)
            │       ├── **Fields:** `name`, `order`
            │       └── **Subcollections:**
            │           └── **`channels`** [Text channels]
            │               └── `{channelId}` (ID: Auto)
            │                   ├── **Fields:** `name`, `type`
            │                   └── **Subcollections:**
            │                       └── **`messages`** [Channel messages]
            │                           └── `{messageId}` (ID: Auto)
            │                               └── **Fields:** `senderId`, `text`, `timestamp`
            └── **`scheduleChannels`** [Schedule-related channels]
                └── `{scheduleId}` (ID: Schedule ID)
                    ├── **Fields:** `name`
                    └── **Subcollections:**
                        └── **`messages`** [Schedule channel messages]
                            └── `{messageId}` (ID: Auto)
                                └── **Fields:** `senderId`, `text`, `timestamp`
└── **`schedules`** [Personal & project schedules]
    └── `{scheduleId}` (ID: Auto)
        └── **Fields:** `title`, `startTime`, `endTime`, `participants`, `projectId`?
└── **`invites`** [Temporary invite tokens]
    └── `{inviteToken}` (ID: Auto unique token)
        └── **Fields:** 
            ├── `type`: String - Invite type (e.g., `project_invite`)
            ├── `inviterId`: String - User ID who created the invite
            ├── `projectId`: String? - Target project ID (for project invites)
            ├── `expiresAt`: Timestamp - When the invite expires
            ├── `createdAt`: Timestamp - When the invite was created
└── **`passwordResetTokens`** [Temporary password reset tokens]
    └── `{tokenId}` (ID: Auto)
        └── **Fields:** `userId`, `token`, `expiresAt`

