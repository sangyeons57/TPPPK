---
description: Project Architecture Document
globs: 
alwaysApply: false
---
# Projecting Kotlin: Architecture & Design Principles

## 핵심 원칙

- **Clean Architecture**: 계층 간 명확한 책임 분리와 단방향 의존성
- **모듈화**: 세분화된 모듈로 빌드 성능 최적화 및 코드 관리 용이성 확보
- **테스트 용이성**: 모든 레이어가 독립적으로 테스트 가능하도록 설계
- **오프라인 우선 (전략 변경 중)**: Firestore 캐시를 우선 활용하며, 필요시 Room DB를 통한 고도화된 로컬 캐싱 전략 적용 ([room_db_decoupling.md](mdc:.cursor/tasks/room_db_decoupling.md) 참조)
- **Data흐름 구조**: data -> datasource -> repository -> viewmodel -> ui (또한 각 계층은 추상화 되어있음)

## 계층 구조
- **datasource**: 가장 기본적인 구조 DTO형테로 DB에서 데이터 베이스 가지고 오는 역할
- **repository**: 데이터에 구조를 Domain model에 정의된 형태로 usecase에 전달하거나 usecase에서 위임한 직접적인 편집을 하는 계층.
- **usecase**: usecase는 강한 결합이 없어야 한다. 그리고 하나의 시나리오만 책임저야한다. 따라서 usecase에서 다른 usecase를 사용할수 없다. 따라서 다시 구현하거나 과하게 반복되는 경우 repository에게 해당 구현을 일부 위임한다.
- **viewmodel**: ui에 상호작용과 중간 정보 전달을 담당하는 계층 으로 기능에 대한 구현을 최대한 usecase에 위임해야 하고, 기능과 ui의 결합과 전달 반응 이라는 역할로 책임을 최소화해야한다 (복잡해지기 매우 쉽기 때문).
- **ui**: 실제 사용자가 보는 화면 정의하는 계층

## 모듈 구조 및 의존성

현재 프로젝트는 다음과 같은 모듈로 구성되어 있습니다 (settings.gradle.kts 기준):

```
:app                    # 앱 진입점 및 통합 모듈
:navigation             # 앱 전체 네비게이션 관리
:data                   # 데이터 레이어
:domain                 # 도메인 레이어
:core:core_common       # 공통 유틸리티 및 기본 기능
:core:core_logging      # 로깅 관련 기능
:core:core_ui           # UI 공통 컴포넌트
:core:core_navigation   # 네비게이션 관련 핵심 기능
:core:core_fcm          # Firebase Cloud Messaging 관련 기능
:feature:feature_chat   # 채팅 기능
:feature:feature_auth   # 인증 기능
:feature:feature_dev    # 개발자 전용 기능
:feature:feature_friends # 친구 관리 기능
:feature:feature_main   # 메인 화면 기능
:feature:feature_profile # 프로필 관리 기능
:feature:feature_project # 프로젝트 관리 기능
:feature:feature_schedule # 일정 관리 기능
:feature:feature_search # 검색 기능
:feature:feature_settings # 설정 기능
:app_api                # 앱 API 모듈
```

각 모듈의 책임과 의존성은 다음과 같습니다:

- **도메인 레이어 (`:domain`)**
  - **모델**: 순수 비즈니스 엔티티/모델 (Kotlin data classes)
  - **repository**: 데이터 소스 접근을 위한 인터페이스 정의
  - **usecase**: 비즈니스 로직을 캡슐화한 유스케이스
  - **util**: 도메인 레이어 유틸리티
  - 특징: 프레임워크 독립적, 외부 레이어에 대한 의존성 없음

- **데이터 레이어 (`:data`)**
  - **datasource**: 데이터 소스 구현
    - **local**: 로컬 데이터 소스 (Room, DataStore, Firestore 캐시)
    - **remote**: 원격 데이터 소스 (Firebase Firestore, Retrofit)
  - **db**: 로컬 데이터베이스 관련 코드
    - **converter**: 데이터 타입 변환기
    - **dao**: 데이터 액세스 객체
    - **migration**: 데이터베이스 마이그레이션
  - **di**: 의존성 주입 모듈
  - **migration**: 데이터 마이그레이션 관련 코드
  - **model**: 데이터 모델
    - **local**: 로컬 데이터 모델
    - **remote**: 원격 API 모델
    - **mapper**: 모델 변환 로직
  - **repository**: 도메인 레이어의 레포지토리 인터페이스 구현
  - **util**: 데이터 레이어 유틸리티
  - 의존성: `:domain:model`, `:domain:repository`, `:core:core_common`

- **프레젠테이션 레이어 (`:feature`)**
  - **`:feature:{feature_name}`**: 개별 기능별 모듈
  - 각 기능 모듈은 내부적으로 다음과 같은 패키지 구조를 가짐:
    - `ui`: Composable 컴포넌트, 화면
    - `viewmodel`: 화면별 ViewModel
    - `model`: UI 모델 (일부 모듈)
  - 의존성: `:domain:usecase`, `:domain:model`, `:core:core_ui`, `:core:core_navigation`
  - **중요**: ViewModel은 Repository를 직접 사용할 수 없고, 반드시 UseCase를 통해서만 도메인 로직에 접근해야 함

- **코어 레이어 (`:core`)**
  - **`:core:core_ui`**: 공통 UI 컴포넌트, 테마, 스타일
    - `components`: 재사용 가능한 UI 컴포넌트
    - `theme`: 앱 테마 및 스타일 정의
  - **`:core:core_common`**: 프레임워크 독립적 유틸리티
    - `di`: 공통 의존성 주입 모듈
    - `util`: 유틸리티 클래스
    - `constants`: 상수 정의
    - `dispatcher`: 코루틴 디스패처
    - `error`: 오류 처리
    - `network`: 네트워크 관련 공통 코드
    - `result`: 결과 래퍼 클래스
  - **`:core:core_logging`**: 로깅 추상화 (Sentry)
  - **`:core:core_navigation`**: 네비게이션 관련 핵심 기능
    - `compose`: Compose 네비게이션 관련 코드
    - `core`: 핵심 네비게이션 로직
    - `destination`: 네비게이션 목적지 정의
    - `di`: 네비게이션 의존성 주입
    - `extension`: 네비게이션 확장 함수
  - **`:core:core_fcm`**: Firebase Cloud Messaging 관련 기능
    - `di`: FCM 의존성 주입
    - `notification`: 알림 관리
    - `topic`: FCM 토픽 관리
    - `utils`: FCM 유틸리티
    - `viewmodel`: FCM 관련 ViewModel
    - `worker`: 백그라운드 작업

- **앱 레이어 (`:app`)**
  - 모든 모듈 통합 지점
  - 앱 시작점, 글로벌 설정(Hilt, Firebase)
  - 메인 네비게이션 그래프 설정
  - 의존성: 모든 필요 모듈

- **네비게이션 구조**
  - **`:core:core_navigation`**: 핵심 네비게이션 아키텍처 및 구현
    - 네비게이션 컴포넌트 기본 설정 및 확장 기능
    - 공통 네비게이션 인터페이스 및 유틸리티
    - 모듈 간 타입 안전한 네비게이션 지원
  - **`:navigation`**: 앱 수준 네비게이션 설정
    - 전체 네비게이션 그래프 정의
    - 화면 간 라우팅 및 인자 정의
    - 의존성: `:core:core_common`, `:core:core_navigation`

- **API 레이어 (`:app_api`)**
  - 앱의 API 인터페이스 및 구현 정의
  - 외부 시스템과의 통신 인터페이스 관리
  - 의존성: `:domain`, `:core:core_common`

## 아키텍처 패턴

- **MVVM (Model-View-ViewModel)**
  - **View (UI)**: Compose 기반 UI 컴포넌트, 단방향 데이터 흐름
    - UI 상태 변경 감지 및 표시
    - 사용자 이벤트를 ViewModel에 전달
  - **ViewModel**: UI 로직 및 상태 관리
    - UI 상태 (`UiState`) 노출 (StateFlow/SharedFlow)
    - 이벤트 처리 및 useCase 호출
    - 도메인 모델 → UI 모델 변환
  - **Model**: 도메인 레이어 (엔티티, 유스케이스, 레포지토리)

- **단방향 데이터 흐름 (Unidirectional Data Flow)**
  - ViewModel: 상태 관리 및 이벤트 처리
  - UI: 상태 소비 및 이벤트 전달
  - 명확한 상태 흐름으로 예측 가능성 향상

- **레포지토리 패턴**
  - 데이터 소스 추상화 (로컬/원격)
  - 오프라인 우선 전략
    - 로컬 데이터 우선 제공 (현재는 Firestore 캐시 우선)
    - 백그라운드에서 원격 데이터 동기화
    - 네트워크 상태에 따른 적응형 동작

- **유스케이스 패턴**
  - 단일 책임 원칙에 따른 비즈니스 로직 분리
  - 재사용 가능한 비즈니스 로직 단위
  - ViewModel과 레포지토리 사이의 중재자
  - 설계 규칙:
    - 각 UseCase는 단일 책임을 가짐
    - `operator fun invoke()` 패턴으로 호출 단순화
    - Repository 결과를 `Result<T>` 타입으로 래핑
    - 필요한 경우 추가적인 비즈니스 로직 처리
    - ViewModel에서는 반드시 UseCase를 통해서만 데이터에 접근
    - 직접적인 Repository 접근은 허용되지 않음

## 데이터 관리 전략

### 시간 처리 전략
- **시간 저장 방식**:
  - 서버에는 모든 시간 정보를 **Instant** 형식(UTC 시간)으로 저장
  - Firebase Timestamp는 내부적으로 UTC 시간 기준으로 처리됨
  
- **시간 변환 및 표시**:
  - 시스템 시간대 정보는 `ZoneId.systemDefault()`를 사용하여 가져옴
  ```kotlin
  // 시스템 기본 시간대 정보 획득 (예: Asia/Seoul)
  val systemZoneId = ZoneId.systemDefault()
  ```
  
- **시간 표현 클래스**:
  - `LocalTime`: 시간만 표현, 시간대 정보 없음
  - `LocalDateTime`: 날짜와 시간 표현, 시간대 정보 없음
  - `ZonedDateTime`: 날짜, 시간, 시간대를 모두 포함
  
- **시간대 변환 흐름**:
  - 네트워크/DB에서 UTC 시간 로드 → 필요시 사용자 시간대로 변환 → UI에 표시
  - UI 입력 → UTC로 변환 → 네트워크/DB에 저장

### 원격 데이터 관리 (Firebase Firestore)
- **컬렉션 구조**:
  - `users`: 사용자 프로필 정보
  - `projects`: 프로젝트 정보
    - `members`: 프로젝트 멤버 (서브컬렉션)
    - `roles`: 역할 정의 (서브컬렉션)
    - `categories`: 채널 카테고리 (서브컬렉션)
      - `channels`: 채널 정보 (서브컬렉션)
        - `messages`: 채널 메시지 (서브컬렉션) - WebSocket 서버가 Admin SDK로 저장
  - `dms`: DM 대화방
    - `messages`: DM 메시지 (서브컬렉션) - WebSocket 서버가 Admin SDK로 저장
  - `invites`: 초대 토큰
  - `schedules`: 일정 정보
- **채팅 데이터**: 채팅 메시지(`messages`)는 실시간성을 위해 WebSocket 서버를 통해 Firestore에 저장됩니다. 클라이언트는 과거 기록 로드를 위해 Firestore SDK를 직접 사용합니다. ([websocket-server.md](mdc:.cursor/tasks/websocket-server.md) 참조)

- **보안 규칙**:
  - 사용자 인증 기반 접근 제어
  - 역할 기반 권한 관리
  - 컬렉션/문서별 세분화된 접근 권한
  - **채팅 메시지**: `messages` 컬렉션 쓰기는 WebSocket 서버(Admin SDK)만 가능하도록 제한, 읽기는 해당 채팅방 멤버에게 허용.

- **복합 색인**:
  - 친구 관련 필터링 및 정렬
  - 채팅 관련 필터링 및 정렬
  - 프로젝트 멤버/역할 관련 필터링 및 정렬

### 로컬 데이터 관리 전략

#### Firestore 캐시 (주 전략)
- 현재 프로젝트는 주로 Firestore의 내장 캐싱 기능을 활용하여 오프라인 데이터 액세스를 제공합니다.
- **장점**:
  - 별도의 로컬 DB 관리 로직 최소화
  - 자동 동기화 지원
  - 구현 복잡성 감소
- **적용 영역**:
  - 대부분의 읽기 작업 (프로젝트, 채팅 기록, 사용자 정보 등)
  - 간단한 오프라인 작업

#### Room DB (제한적 사용)
- **(현재 비활성 상태)**: Room DB 구조는 유지되지만, 현재는 기능적으로 분리되어 제한적으로 사용됩니다. ([room_db_decoupling.md](mdc:.cursor/tasks/room_db_decoupling.md))
- **적용 예정 영역**:
  - 복잡한 로컬 검색이 필요한 기능
  - 오프라인 퍼시스턴스가 중요한 기능
  - Firestore 캐시로 해결하기 어려운 고급 오프라인 작업

- **엔티티 구조** (참조용):
  - 사용자 관련: `UserEntity`, `FriendEntity`, `FriendRequestEntity`
  - 프로젝트 관련: `ProjectEntity`, `ProjectMemberEntity`, `RoleEntity` 
  - 커뮤니케이션 관련: `ChatEntity`, `MessageEntity`, `DmConversationEntity`
  - 기타: `ScheduleEntity`, `CategoryEntity`, `ChannelEntity`, `InviteEntity`

- **TypeConverters**:
  - `Date` ↔ `Long` 변환
  - `LocalDateTime` ↔ `Long` 변환
  - `List<String>` ↔ `JSON String` 변환

## 의존성 주입

- **Hilt**: 안드로이드 의존성 주입 프레임워크
  - 모듈 간 결합도 감소
  - 테스트 용이성 향상
  - 컴포넌트 생명주기 자동 관리

## 데이터 흐름

1. UI: 사용자 이벤트 발생 → ViewModel에 전달
2. ViewModel: 이벤트 처리 → 적절한 UseCase 호출
3. UseCase: 비즈니스 로직 실행 → Repository 호출
4. Repository: 
   - 적절한 DataSource 선택 (주로 원격 Firestore, 로컬은 Firestore 캐시 활용)
   - 원격 호출 시 네트워크 오류 처리
   - 데이터 캐싱 및 동기화 (Firestore 캐시 기반)
5. ViewModel: UseCase 결과 수신 → UiState 업데이트
6. UI: 새 UiState 감지 → UI 갱신

## 예외 처리 전략

- 도메인 레이어: Result 타입 사용 → 명시적 성공/실패 처리
- Repository: Result 반환, 적절한 실패 래핑
- UseCase: 필요한 경우 추가적인 예외 처리 및 변환
- ViewModel: 예외 처리 및 적절한 UiState 변환
- UI: 사용자 친화적 오류 메시지 표시

## 테스트 전략

- 유닛 테스트: UseCase, Repository, ViewModel 
- 통합 테스트: DataSource와 실제 Repository 통합
- UI 테스트: Compose 컴포넌트 테스트

## 실시간 채팅 아키텍처 (WebSocket + Firestore Hybrid)

- **개요**: 실시간 메시지 교환은 WebSocket을 사용하고, 메시지 영구 저장 및 과거 기록 로드는 Firestore를 활용하는 하이브리드 방식입니다. ([websocket-server.md](mdc:.cursor/tasks/websocket-server.md))
- **컴포넌트**:
  - **클라이언트 (Android)**: OkHttp로 WebSocket 서버에 연결, 실시간 메시지 송수신. Firestore SDK로 과거 메시지 로드 및 오프라인 캐싱 활용. Firebase Storage에 미디어 업로드.
  - **WebSocket 서버 (Java/Cloud Run)**: 클라이언트 간 메시지 중계, 수신 메시지를 Firebase Admin SDK를 통해 Firestore에 저장, 필요한 경우 FCM 발송.
  - **Firebase**: Firestore (메시지 DB), Authentication (인증), Storage (미디어), FCM (푸시 알림).
- **데이터 흐름 (메시지 전송)**:
  1. 클라이언트 -> WebSocket 서버: `sendMessage` (텍스트 또는 미디어 URL)
  2. WebSocket 서버 -> 다른 클라이언트들: `newMessage` 브로드캐스팅
  3. WebSocket 서버 -> Firestore: Admin SDK로 메시지 저장 (비동기)
  4. WebSocket 서버 -> 발신 클라이언트: 저장 성공/실패 알림 (`messageSentConfirmation` / `messageSendFailed`)
- **데이터 흐름 (과거 기록 로드)**:
  1. 클라이언트 -> Firestore: SDK 사용하여 `messages` 컬렉션 직접 쿼리 (페이지네이션)
- **오프라인 처리**: Firestore의 디스크 캐시를 통해 오프라인 시 과거 메시지 조회 가능. 실시간 메시지 수신 및 전송은 온라인 상태 필요.

