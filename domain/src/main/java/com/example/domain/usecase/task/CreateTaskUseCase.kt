package com.example.domain.usecase.task

import com.example.core_common.result.CustomResult
import com.example.domain.model.base.Task
import com.example.domain.model.vo.DocumentId
import com.example.domain.model.vo.task.TaskContent
import com.example.domain.model.vo.task.TaskOrder
import com.example.domain.model.vo.task.TaskType
import com.example.domain.repository.base.TaskRepository
import javax.inject.Inject

/**
 * 새로운 태스크를 생성하는 유스케이스
 */
interface CreateTaskUseCase {
    suspend operator fun invoke(
        title: String,
        description: String = "",
        taskType: TaskType = TaskType.CHECKLIST,
        order: Int = 0
    ): CustomResult<String, Exception>
}

class CreateTaskUseCaseImpl @Inject constructor(
    private val taskRepository: TaskRepository
) : CreateTaskUseCase {
    
    override suspend operator fun invoke(
        title: String,
        description: String,
        taskType: TaskType,
        order: Int
    ): CustomResult<String, Exception> {
        val content = if (description.isNotBlank()) {
            "$title\n$description"
        } else {
            title
        }
        
        val newTask = Task.create(
            id = DocumentId.EMPTY, // Will be generated by Firestore
            taskType = taskType,
            content = TaskContent(content),
            order = TaskOrder(order)
        )

        return when (val result = taskRepository.save(newTask)) {
            is CustomResult.Success -> CustomResult.Success(result.data.value)
            is CustomResult.Failure -> CustomResult.Failure(result.error)
            is CustomResult.Initial -> CustomResult.Initial
            is CustomResult.Loading -> CustomResult.Loading
            is CustomResult.Progress -> CustomResult.Progress(result.progress)
        }
    }
}