package com.example.domain.usecase.task

import com.example.core_common.result.CustomResult
import com.example.domain.model.base.TaskContainer
import com.example.domain.model.vo.DocumentId
import com.example.domain.model.vo.task.TaskContainerOrder
import com.example.domain.repository.base.TaskContainerRepository
import javax.inject.Inject

/**
 * 새로운 태스크 컨테이너를 생성하는 유스케이스
 */
interface CreateTaskContainerUseCase {
    suspend operator fun invoke(
        order: Int = 0
    ): CustomResult<String, Exception>
}

class CreateTaskContainerUseCaseImpl @Inject constructor(
    private val taskContainerRepository: TaskContainerRepository
) : CreateTaskContainerUseCase {
    
    override suspend operator fun invoke(
        order: Int
    ): CustomResult<String, Exception> {
        val newTaskContainer = TaskContainer.create(
            id = DocumentId.EMPTY, // Will be generated by Firestore
            order = TaskContainerOrder(order)
        )

        return when (val result = taskContainerRepository.save(newTaskContainer)) {
            is CustomResult.Success -> CustomResult.Success(result.data.value)
            is CustomResult.Failure -> CustomResult.Failure(result.error)
            is CustomResult.Initial -> CustomResult.Initial
            is CustomResult.Loading -> CustomResult.Loading
            is CustomResult.Progress -> CustomResult.Progress(result.progress)
        }
    }
}