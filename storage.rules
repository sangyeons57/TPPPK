rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // === Utility Functions ===

    // Check if the user is authenticated
    function DBName() {
      return "(default)";
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // Check if the requesting user's ID matches the given userId
    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check if the user is the owner of a project
    // Assumes /projects/{projectId} document has an 'ownerId' field
    function isProjectOwner(projectId) {
      return isAuthenticated() &&
             firestore.get(/databases/$(DBName())/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    // Check if the user is a participant in a DM channel
    // Assumes /dm_channels/{dmChannelId}/participants/{userId} document exists
    function isDMChannelParticipant(dmChannelId) {
      return isAuthenticated() &&
             firestore.exists(/databases/$(DBName())/documents/dm_channels/$(dmChannelId)/participants/$(request.auth.uid));
    }

    // Check if the user is a member of a project
    // Assumes /projects/{projectId}/members/{userId} document exists
    function isProjectMember(projectId) {
      return isAuthenticated() &&
             firestore.exists(/databases/$(DBName())/documents/projects/$(projectId)/members/$(request.auth.uid));
    }

    // Check if the user is the author of a DM message
    // Assumes /dm_channels/{dmChannelId}/messages/{messageId} document has an 'authorId' field
    function isDMMessageAuthor(dmChannelId, messageId) {
      return isAuthenticated() &&
             firestore.get(/databases/$(DBName())/documents/dm_channels/$(dmChannelId)/messages/$(messageId)).data.authorId == request.auth.uid;
    }

    // Check if the user is the author of a project channel message
    // Assumes /project_channels/{projectChannelId}/messages/{messageId} document has an 'authorId' field
    // IMPORTANT: Adjust Firestore path if project channels are nested (e.g., /projects/{pId}/channels/{pcId}/messages/{mId})
    function isProjectChannelMessageAuthor(projectChannelId, messageId) {
      // This path assumes project_channels is a top-level collection.
      // If project_channels is a subcollection of projects, the path would be:
      // /databases/(default)/documents/projects/$(getProjectIdForChannel(projectChannelId))/project_channels/$(projectChannelId)/messages/$(messageId)
      return isAuthenticated() &&
             firestore.get(/databases/$(DBName())/documents/project_channels/$(projectChannelId)/messages/$(messageId)).data.authorId == request.auth.uid;
    }

    // Get the projectId associated with a projectChannelId
    // Assumes /project_channels/{projectChannelId} document has a 'projectId' field
    // IMPORTANT: Adjust Firestore path as needed if project_channels is a subcollection.
    function getProjectIdForChannel(projectChannelId) {
        // If project_channels is a top-level collection with a projectId field:
        return firestore.get(/databases/$(DBName())/documents/project_channels/$(projectChannelId)).data.projectId;
        // If project_channels is a subcollection, you might pass projectId directly or derive it differently.
    }

    // Placeholder: Check if user has read permission for a project channel.
    // This function needs to know the projectId to correctly check member permissions.
    // Assumes /projects/{projectId}/members/{userId} exists or has specific role/permission fields.
    function hasProjectChannelReadPermission(projectId, projectChannelId) {
      // Example: return isAuthenticated() && firestore.get(/databases/default/documents/projects/$(projectId)/project_channels/$(projectChannelId)/members/$(request.auth.uid)).data.canRead == true;
      // Simpler: Check if user is a member of the project this channel belongs to.
      return isAuthenticated() && firestore.exists(/databases/$(DBName())/documents/projects/$(projectId)/members/$(request.auth.uid));
    }

    // Placeholder: Check if user can post (create files/messages) in a project channel.
    // Assumes /projects/{projectId}/members/{userId} has a 'canPost' or similar role-based permission.
    function canPostToProjectChannel(projectId, projectChannelId) {
      // Example: return isAuthenticated() && firestore.get(/databases/default/documents/projects/$(projectId)/members/$(request.auth.uid)).data.canPostInChannel[$(projectChannelId)] == true;
      // Simpler: Check if user is a member of the project this channel belongs to.
      return isAuthenticated() && firestore.exists(/databases/$(DBName())/documents/projects/$(projectId)/members/$(request.auth.uid));
    }

    // Placeholder: Check if user has delete permission for messages/files in a project channel.
    // Assumes /projects/{projectId}/members/{userId} has a 'canDeleteMessages' or similar role-based permission.
    function hasProjectChannelDeletePermission(projectId, projectChannelId) {
      // Example: return isAuthenticated() && firestore.get(/databases/default/documents/projects/$(projectId)/members/$(request.auth
      return false; // Default to false, requiring explicit project owner or author status.
    }

    // === Default Deny Rule ===
    // Deny all access by default to paths not explicitly matched.
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // === Rules based on firebase-storage.md ===

    // 1. User Profile Images
    // Path: user_profile_images/{userId}/{fileName}
    match /user_profile_images/{userId}/{fileName} {
      allow read: if isAuthenticated(); // As per markdown: (로그인)인증된 모두
      allow write: if isCurrentUser(userId) &&
                      request.resource.size < 1 * 1024 * 1024 && // Max 1MB
                      request.resource.contentType.matches('image/.*'); // Only images
    }

    // 2. Project Profile Images
    // Path: project_profile_images/{projectId}/{fileName}
    match /project_profile_images/{projectId}/{fileName} {
      allow read: if isAuthenticated(); // As per markdown: (로그인)인증된 모두
      allow write, update, delete: if isAuthenticated() &&
                      request.resource.size < 2 * 1024 * 1024 && // Max 2MB
                      request.resource.contentType.matches('image/.*'); // Only images
    }

    // 3. DM Channel Files
    // Path: dm_channel_files/{dmChannelId}/{messageId}/{fileType}/{fileName}
    match /dm_channel_files/{dmChannelId}/{messageId}/{fileType}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // 4. Project Channel Files
    match /project_channel_files/{projectChannelId}/{messageId}/{fileType}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
  }
}
