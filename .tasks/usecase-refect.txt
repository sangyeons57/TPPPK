💻 ViewModel별 필요 UseCase 상세 명세 (feature_chat 제외)
🔑 feature/feature_auth
FindPasswordViewModel.kt - 비밀번호 찾기 화면 ViewModel
[x] ValidateEmailFormatUseCase(email: String) : Boolean // 이메일 형식 유효성을 검사합니다. 
[x] RequestPasswordResetEmailUseCase(email: String) : CustomResult<Unit> // 입력된 이메일로 비밀번호 재설정 이메일 발송을 요청합니다. {수정 필요} (기존 RequestPasswordResetUseCase 활용 또는 분리)
[x] ValidatePasswordResetCodeUseCase(code: String) : Boolean // 비밀번호 재설정 코드 형식(예: 길이) 유효성을 검사합니다. {추가 필요}
[x] VerifyPasswordResetCodeUseCase(code: String) : CustomResult<String?> // 입력된 비밀번호 재설정 코드를 서버에 검증 요청합니다. 성공 시 다음 단계에 필요한 토큰이나 이메일을 반환할 수 있습니다. {수정 필요}
[x] ValidateNewPasswordUseCase(password: String) : PasswordValidationResult // 새 비밀번호의 유효성(길이, 특수문자 포함 등)을 검사합니다. PasswordValidationResult는 유효성 상태와 메시지를 포함하는 data class. {추가 필요}
[x] ConfirmPasswordResetWithCodeUseCase(params: ConfirmPasswordResetParams) : CustomResult<Unit> // 코드(또는 토큰)와 새 비밀번호로 비밀번호 재설정을 최종 완료합니다. {수정 필요} (기존 ConfirmPasswordResetUseCase 활용)
ConfirmPasswordResetParams (복합 정보): codeOrToken: String, newPassword: String
LoginViewModel.kt - 로그인 화면 ViewModel
[x] ValidateEmailFormatUseCase(email: String) : Boolean // 이메일 형식 유효성을 검사합니다. {추가 필요} (위와 동일)
[x] ValidatePasswordFormatUseCase(password: String) : Boolean // 비밀번호 형식(최소 길이 등) 유효성을 검사합니다. {추가 필요}
[x] AttemptLoginUseCase(credentials: EmailPasswordCredentials) : CustomResult<UserSession> // 이메일과 비밀번호로 로그인을 시도하고 사용자 세션 정보를 반환합니다. {수정 필요} (기존 LoginUseCase 활용)
EmailPasswordCredentials (복합 정보): email: String, password: String
[x] CheckInitialSessionUseCase(Unit) : CustomResult<UserSession?> // 앱 시작 시 현재 유효한 세션이 있는지 확인합니다. {수정 필요} (기존 CheckSessionUseCase 활용)
[x] ObserveAuthenticationStateUseCase(Unit) : Flow<AuthenticationState> // 실시간 인증 상태를 스트리밍합니다. {추가 필요} (기존 GetAuthStateStreamUseCase 역할 분리 또는 활용)
[x] GetFirebaseAuthErrorMessageUseCase(exception: Throwable) : String // Firebase 인증 예외에 대한 사용자 친화적 오류 메시지를 생성합니다. {수정 필요} (기존 GetAuthErrorMessageUseCase 활용)
PrivacyPolicyViewModel.kt - 개인정보 처리방침 화면 ViewModel
[x] WorkspacePrivacyPolicyTextUseCase(Unit) : CustomResult<String> // 개인정보 처리방침 내용을 원격 또는 로컬에서 가져옵니다. {추가 필요}
SignUpViewModel.kt - 회원가입 화면 ViewModel
[x] ValidateEmailForSignUpUseCase(email: String) : EmailValidationResult // 회원가입용 이메일 유효성(형식, 중복 여부 등)을 검사합니다. EmailValidationResult는 상태와 메시지 포함. {추가 필요}
[x] ValidatePasswordForSignUpUseCase(password: String) : PasswordValidationResult // 회원가입용 비밀번호 유효성을 검사합니다. {추가 필요} (위 ValidateNewPasswordUseCase와 유사하나, 컨텍스트에 따라 분리 가능)
[x] ValidateNicknameForSignUpUseCase(nickname: String) : NicknameValidationResult // 회원가입용 닉네임 유효성(길이, 사용 가능 여부)을 검사합니다. {수정 필요} (기존 CheckNicknameAvailabilityUseCase 활용 및 확장)
[x] RegisterUserUseCase(params: UserRegistrationParams) : CustomResult<UserSession> // 사용자 정보를 등록하고 초기 사용자 세션을 반환합니다. {수정 필요} (기존 SignUpUseCase 활용)
UserRegistrationParams (복합 정보): email: String, password: String, nickname: String
[x] RequestEmailVerificationAfterSignUpUseCase(Unit) : CustomResult<Unit> // 회원가입 성공 후 이메일 인증 메일 발송을 요청합니다. {수정 필요} (기존 SendEmailVerificationUseCase 활용)
[x] GetFirebaseAuthErrorMessageUseCase(exception: Throwable) : String // Firebase 인증 예외에 대한 사용자 친화적 오류 메시지를 생성합니다. {수정 필요} (기존 GetAuthErrorMessageUseCase 활용)
SplashViewModel.kt - 스플래시(로딩) 화면 ViewModel
[x] DetermineInitialDestinationUseCase(Unit) : Flow<SplashDestination> // 세션 상태, 온보딩 완료 여부 등을 확인하여 다음 이동할 화면(로그인, 메인, 온보딩 등)을 결정합니다. SplashDestination은 enum class. {추가 필요} (기존 CheckSessionUseCase와 GetAuthStateStreamUseCase의 조합 및 확장)
TermsOfServiceViewModel.kt - 서비스 이용약관 화면 ViewModel
[x] WorkspaceTermsOfServiceTextUseCase(Unit) : CustomResult<String> // 서비스 이용약관 내용을 원격 또는 로컬에서 가져옵니다. {추가 필요}
🧑‍🤝‍🧑 feature/feature_friends
AcceptFriendsViewModel.kt - 친구 요청 수락 화면 ViewModel
[x] ObserveIncomingFriendRequestsUseCase(currentUserId: String) : Flow<CustomResult<List<Friend>>> // 현재 사용자에게 수신된 친구 요청 목록(status = PENDING_RECEIVED)을 스트림으로 관찰합니다. {수정 필요} (기존 GetPendingFriendRequestsUseCase 활용 또는 GetFriendsListStreamUseCase 필터링 강화)
[x] ProcessFriendRequestAcceptanceUseCase(friendId: String) : CustomResult<Unit> // 특정 사용자의 친구 요청을 수락 처리합니다. {수정 필요} (기존 AcceptFriendRequestUseCase 활용)
[x] ProcessFriendRequestDenialUseCase(friendId: String) : CustomResult<Unit> // 특정 사용자의 친구 요청을 거절 처리합니다. {수정 필요} (기존 DenyFriendRequestUseCase 또는 RemoveOrDenyFriendUseCase 활용)
[x] WorkspaceIncomingFriendRequestsUseCase(currentUserId: String): CustomResult<Unit> // 수신된 친구 요청 목록을 수동으로 새로고침합니다. {추가 필요}
AddFriendViewModel.kt - 친구 추가 화면 ViewModel
[x] ValidateSearchQueryUseCase(query: String) : Boolean // 사용자 검색어 유효성을 검사합니다 (예: 최소 길이). {추가 필요}
SearchUsersByQueryUseCase(query: String, currentUserId: String) : CustomResult<List<UserSearchResult>> // 입력된 검색어로 친구 추가 대상 사용자를 검색합니다. UserSearchResult는 사용자 정보와 친구 상태(이미 친구, 요청 보냄 등)를 포함. {수정 필요} (기존 SearchUserUseCase 또는 SearchUserByNameUseCase 활용 및 확장)
UserSearchResult (복합 정보): User 객체, friendshipStatus: FriendStatus?
InitiateFriendRequestUseCase(targetUserId: String) : CustomResult<Unit> // 검색된 사용자에게 친구 요청을 보냅니다. {수정 필요} (기존 SendFriendRequestUseCase 활용)
ObserveFriendshipStatusUseCase(targetUserId: String): Flow<FriendStatus?> // 특정 사용자와의 현재 친구 관계 상태를 스트리밍합니다. {추가 필요}
FriendViewModel.kt - 친구 목록 및 관리 화면 ViewModel
ObserveAcceptedFriendsUseCase(currentUserId: String) : Flow<CustomResult<List<Friend>>> // 현재 사용자의 수락된 친구 목록(status = ACCEPTED)을 스트림으로 관찰합니다. {수정 필요} (기존 GetFriendsListStreamUseCase 활용)
UnfriendUserUseCase(friendId: String) : CustomResult<Unit> // 특정 친구를 친구 목록에서 삭제(관계 해제)합니다. {수정 필요} (기존 RemoveOrDenyFriendUseCase 또는 RemoveFriendUseCase 활용)
RefreshAcceptedFriendsUseCase(currentUserId: String) : CustomResult<Unit> // 친구 목록을 수동으로 새로고침합니다. {수정 필요} (기존 WorkspaceFriendsListUseCase 활용)
ObserveBlockedUsersUseCase(currentUserId: String) : Flow<CustomResult<List<User>>> // 현재 사용자가 차단한 사용자 목록을 스트림으로 관찰합니다. {추가 필요}
BlockUserInteractionUseCase(targetUserId: String) : CustomResult<Unit> // 특정 사용자를 차단합니다. {추가 필요}
UnblockUserInteractionUseCase(targetUserId: String) : CustomResult<Unit> // 차단된 사용자를 해제합니다. {추가 필요}
🏠 feature/feature_main
CalendarViewModel.kt - 메인 캘린더 화면 ViewModel
ObserveMonthlyScheduleSummaryUseCase(params: ObserveMonthlyScheduleParams) : Flow<CustomResult<Map<LocalDate, ScheduleIndicator>>> // 특정 연도와 월의 날짜별 일정 유무 또는 개수 요약 정보를 스트림으로 관찰합니다. ScheduleIndicator는 일정 존재 여부, 개수, 중요도 등을 포함. {수정 필요} (기존 GetScheduleSummaryForMonthUseCase 활용 및 확장)
ObserveMonthlyScheduleParams (복합 정보): selectedProjectId: String?, year: Int, month: Int
ObserveDailySchedulesUseCase(params: ObserveDailyScheduleParams) : Flow<CustomResult<List<Schedule>>> // 특정 날짜의 일정 목록을 스트림으로 관찰합니다. {수정 필요} (기존 GetSchedulesForDateUseCase를 Flow로 변경 또는 신규)
ObserveDailyScheduleParams (복합 정보): selectedProjectId: String?, date: LocalDate
ObserveCurrentUserProjectsUseCase(Unit): Flow<CustomResult<List<Project>>> // 현재 사용자가 참여중인 프로젝트 목록을 스트림으로 받아 캘린더 필터링 등에 사용합니다. {수정 필요} (기존에 유사한 UseCase 없다면 {추가 필요})
FormatDateForDisplayUseCase(date: LocalDate, format: String): String // 날짜를 특정 형식의 문자열로 변환합니다. {추가 필요}
GenerateCalendarMonthUseCase(year: Int, month: Int): List<CalendarDay> // 해당 월의 캘린더 UI 구성을 위한 날짜 목록(이전/다음 달 일부 포함)을 생성합니다. CalendarDay는 날짜, 해당 월 여부, 선택 상태 등을 포함. {추가 필요}
HomeViewModel.kt - 홈(프로젝트/DM 목록) 화면 ViewModel
ObserveCurrentUserProjectsUseCase(Unit) : Flow<CustomResult<List<Project>>> // 현재 사용자가 참여 중인 프로젝트 목록을 스트림으로 관찰합니다. {수정 필요} (기존 GetProjectListStreamUseCase 활용)
ObserveDMWrappersUseCase(currentUserId: String) : Flow<CustomResult<List<DMWrapper>>> // 현재 사용자의 DM 채널 래퍼 목록(상대방 정보, 마지막 메시지, 안 읽은 수 포함)을 스트림으로 관찰합니다. {추가 필요}
ObserveCurrentUserUseCase(Unit) : Flow<CustomResult<User>> // 현재 사용자 정보를 스트림으로 관찰합니다. {수정 필요} (기존 GetCurrentUserStreamUseCase 또는 GetMyProfileUseCase 활용)
ObserveAuthenticationStateUseCase(Unit) : Flow<AuthenticationState> // 인증 상태를 관찰합니다. {추가 필요} (위 Auth의 UseCase와 동일)
RefreshUserProjectsUseCase(currentUserId: String) : CustomResult<Unit> // 프로젝트 목록을 수동으로 새로고침합니다. {수정 필요} (기존 WorkspaceProjectListUseCase 활용)
RefreshUserDMWrappersUseCase(currentUserId: String) : CustomResult<Unit> // DM 래퍼 목록을 수동으로 새로고침합니다. {추가 필요}
CreateDMChannelWithUserUseCase(targetUserId: String): CustomResult<String> // 특정 사용자와의 DM 채널을 생성하거나 기존 채널 ID를 반환합니다. {추가 필요}
ProfileViewModel.kt - 프로필 화면 ViewModel
ObserveMyProfileUseCase(Unit) : Flow<CustomResult<User>> // 현재 로그인된 사용자의 프로필 정보를 스트림으로 관찰합니다. {수정 필요} (기존 GetMyProfileUseCase 또는 GetCurrentUserStreamUseCase 활용)
RequestSignOutUseCase(Unit) : CustomResult<Unit> // 로그아웃을 요청합니다. {수정 필요} (기존 SignOutUseCase 활용)
ValidatePasswordForWithdrawalUseCase(password: String) : Boolean // 회원 탈퇴 시 비밀번호 유효성(형식)을 검사합니다. {추가 필요}
RequestUserWithdrawalUseCase(password: String) : CustomResult<Unit> // 회원 탈퇴를 요청합니다. {수정 필요} (기존 WithdrawUserUseCase 활용)
ObserveUserPresenceUseCase(userId: String): Flow<CustomResult<UserPresence>> // 특정 사용자의 현재 접속 상태를 스트리밍합니다. {추가 필요}
UserPresence (복합 정보): isOnline: Boolean, lastSeenAt: LocalDateTime?, statusMessage: String?
UpdateMyPresenceUseCase(newPresence: UserPresenceUpdate): CustomResult<Unit> // 자신의 접속 상태를 업데이트합니다. {추가 필요}
UserPresenceUpdate (복합 정보): isOnline: Boolean?, statusMessage: String?
👤 feature/feature_profile
ChangeStatusViewModel.kt - 상태 변경 ViewModel
ObserveMyCurrentStatusMessageUseCase(Unit): Flow<CustomResult<String?>> // 현재 설정된 나의 상태 메시지를 스트리밍합니다. {추가 필요}
UpdateMyStatusMessageUseCase(newStatusMessage: String?): CustomResult<Unit> // 나의 상태 메시지를 업데이트합니다. {수정 필요} (기존 UpdateUserStatusUseCase 활용 또는 분리)
GetPredefinedStatusMessagesUseCase(Unit): CustomResult<List<String>> // 미리 정의된 상태 메시지 목록을 가져옵니다. {추가 필요}
EditProfileViewModel.kt - 프로필 수정 ViewModel (feature_settings의 EditProfile과 기능 중복 가능성 있음. 여기서는 이 ViewModel이 존재한다고 가정)
ObserveMyProfileForEditUseCase(Unit) : Flow<CustomResult<User>> // 수정할 현재 사용자 프로필 정보를 스트리밍합니다. {수정 필요} (기존 GetMyProfileUseCase 활용)
ValidateNicknameForUpdateUseCase(nickname: String, currentUserId: String) : NicknameValidationResult // 변경할 닉네임의 유효성 및 중복 여부를 (자신 제외) 확인합니다. {수정 필요} (기존 CheckNicknameAvailabilityUseCase 확장)
UpdateMyProfileDetailsUseCase(profileUpdate: ProfileUpdateDetails) : CustomResult<Unit> // 닉네임, 상태 메시지 등 프로필 세부 정보를 업데이트합니다. {수정 필요} (기존 UpdateUserProfileUseCase 또는 UpdateUserUseCase 활용)
ProfileUpdateDetails (복합 정보): newNickname: String?, newStatusMessage: String? 등
PrepareProfileImageForUploadUseCase(imageUri: String): CustomResult<PreparedImageFile> // 선택한 이미지를 업로드 가능한 형태로 준비(압축, 형식 변환 등)합니다. {추가 필요}
PreparedImageFile (복합 정보): 압축된 이미지 파일, 파일명, MIME 타입 등
UploadAndUpdateProfileImageUseCase(preparedImage: PreparedImageFile) : CustomResult<String> // 준비된 프로필 이미지를 업로드하고 사용자 정보에 이미지 URL을 업데이트합니다. {수정 필요} (기존 UploadProfileImageUseCase 또는 UpdateUserImageUseCase 활용 및 확장)
RemoveMyProfileImageUseCase(Unit): CustomResult<Unit> // 프로필 이미지를 기본값으로 되돌립니다. {수정 필요} (기존 RemoveProfileImageUseCase 활용)
🏗️ feature/feature_project
AddProjectViewModel.kt - 프로젝트 추가 화면 ViewModel
ValidateProjectNameUseCase(projectName: String) : ProjectNameValidationResult // 프로젝트 이름 유효성(길이, 특수문자, 사용 가능 여부)을 검사합니다. {수정 필요} (기존 IsProjectNameAvailableUseCase 확장)
PrepareProjectIconForUploadUseCase(iconUri: String?): CustomResult<PreparedImageFile?> // 선택한 프로젝트 아이콘을 업로드 가능한 형태로 준비합니다. {추가 필요}
CreateNewProjectUseCase(params: CreateProjectParams) : CustomResult<String> // 아이콘 정보 포함하여 새 프로젝트를 생성하고 ID를 반환합니다. {수정 필요} (기존 CreateProjectUseCase 활용)
CreateProjectParams (복합 정보): projectName: String, projectDescription: String?, preparedIcon: PreparedImageFile?
JoinProjectDialogViewModel.kt & JoinProjectViewModel.kt - 프로젝트 참여 다이얼로그/화면 ViewModel
ValidateInviteCodeFormatUseCase(inviteCode: String) : Boolean // 초대 코드 형식 유효성을 검사합니다. {추가 필요}
WorkspaceProjectPreviewByInviteCodeUseCase(inviteCode: String) : CustomResult<ProjectPreview> // 초대 코드로 참여할 프로젝트의 미리보기 정보(이름, 멤버 수, 아이콘 등)를 가져옵니다. {수정 필요} (기존 GetProjectInfoFromTokenUseCase 확장)
ProjectPreview (복합 정보): projectName: String, memberCount: Int, projectIconUrl: String?
AttemptJoinProjectWithCodeUseCase(inviteCode: String) : CustomResult<String> // 초대 코드로 프로젝트 참여를 시도하고, 성공 시 프로젝트 ID를 반환합니다. {수정 필요} (기존 JoinProjectWithCodeUseCase 반환 값 변경)
ProjectDetailViewModel.kt - 프로젝트 상세 화면 ViewModel
ObserveProjectDetailsUseCase(projectId: String) : Flow<CustomResult<Project>> // 특정 프로젝트의 상세 정보를 스트림으로 관찰합니다. {수정 필요} (기존 GetProjectStreamUseCase 또는 GetProjectUseCase 활용)
ObserveProjectStructureUseCase(projectId: String) : Flow<CustomResult<List<CategoryWithChannels>>> // 프로젝트의 카테고리 및 각 카테고리 하위 채널 목록을 구조화하여 스트림으로 관찰합니다. {추가 필요} (기존 GetCategoriesStreamUseCase, GetProjectChannelsStreamUseCase 조합 및 확장)
CategoryWithChannels (복합 정보): Category 객체, 해당 카테고리에 속한 List<ProjectChannel>
ObserveProjectMembersCountUseCase(projectId: String): Flow<CustomResult<Int>> // 프로젝트 멤버 수를 스트림으로 관찰합니다. {추가 필요} (기존 ObserveProjectMembersUseCase에서 멤버 수만 추출)
DetermineChannelNavigationTargetUseCase(channel: ProjectChannel): NavigationCommand // 선택한 채널 타입에 따라 적절한 화면으로 이동하는 NavigationCommand를 생성합니다. {추가 필요}
CheckUserPermissionForChannelUseCase(params: ChannelPermissionCheckParams): CustomResult<Boolean> // 채널 접근/활동에 대한 사용자 권한을 확인합니다. {수정 필요} (기존 CheckChannelPermissionUseCase 활용)
ChannelPermissionCheckParams (복합 정보): userId: String, projectId: String, channelId: String, requiredPermission: String
SetProjectNameViewModel.kt - 프로젝트 이름 설정 화면 ViewModel (ViewModel 역할이 매우 작으므로, AddProjectViewModel 또는 ProjectSettingViewModel에 통합 고려 가능)
ValidateProjectNameUseCase(projectName: String) : ProjectNameValidationResult // 프로젝트 이름 유효성을 검사합니다. {수정 필요} (위와 동일)
(이 ViewModel은 프로젝트 생성 흐름의 일부이거나, 프로젝트 수정의 일부일 수 있습니다. 단독으로 존재하기보다 다른 ViewModel과 통합되거나, 특정 UseCase의 결과를 받아 UI에 전달하는 역할만 할 수 있습니다.)
🏗️ feature/feature_project (멤버 관리)
AddMemberViewModel.kt - 멤버 추가 ViewModel
ValidateUserSearchQueryForAddMemberUseCase(query: String) : Boolean // 멤버로 추가할 사용자 검색어 유효성을 검사합니다. {추가 필요}
SearchProspectiveMembersUseCase(projectId: String, query: String) : CustomResult<List<UserSearchResultForProject>> // 프로젝트에 아직 멤버가 아닌 사용자들을 검색합니다. {추가 필요} (SearchUsersByQueryUseCase 확장)
UserSearchResultForProject (복합 정보): User 객체, isAlreadyMember: Boolean, hasPendingInvite: Boolean
InviteUserToProjectUseCase(projectId: String, userId: String, roleIds: List<String>?) : CustomResult<Unit> // 특정 사용자를 프로젝트에 초대하거나 즉시 멤버로 추가합니다 (정책에 따라). {수정 필요} (기존 AddProjectMemberUseCase 활용)
ObserveProjectRolesForSelectionUseCase(projectId: String) : Flow<CustomResult<List<Role>>> // 멤버 추가 시 할당할 역할 목록을 스트림으로 관찰합니다. {추가 필요}
EditMemberViewModel.kt - 멤버 수정 ViewModel
ObserveProjectMemberDetailsForEditUseCase(projectId: String, userId: String) : Flow<CustomResult<Member>> // 수정할 멤버의 상세 정보를 스트림으로 관찰합니다. {수정 필요} (기존 GetProjectMemberUseCase 또는 GetProjectMemberDetailsUseCase 활용)
ObserveAssignableRolesForProjectUseCase(projectId: String) : Flow<CustomResult<List<Role>>> // 멤버에게 할당 가능한 역할 목록을 스트림으로 관찰합니다. {수정 필요} (기존 GetProjectRolesUseCase 활용)
UpdateProjectMemberRolesUseCase(projectId: String, userId: String, newRoleIds: List<String>) : CustomResult<Unit> // 특정 멤버의 역할을 업데이트합니다. {수정 필요} (기존 UpdateMemberRolesUseCase 활용)
UpdateProjectMemberNicknameUseCase(projectId: String, userId: String, newNickname: String): CustomResult<Unit> // 프로젝트 내 멤버 닉네임을 변경합니다. {추가 필요}
KickProjectMemberUseCase(projectId: String, userId: String): CustomResult<Unit> // 멤버를 프로젝트에서 추방합니다. (MemberListViewModel의 Remove와 유사하나, 권한 주체가 다를 수 있음) {추가 필요}
MemberListViewModel.kt - 멤버 목록 ViewModel
ObserveProjectMemberListUseCase(projectId: String) : Flow<CustomResult<List<Member>>> // 해당 프로젝트의 멤버 목록을 스트림으로 관찰합니다. {수정 필요} (기존 GetProjectMembersStreamUseCase 활용)
RemoveMemberFromProjectUseCase(projectId: String, userId: String) : CustomResult<Unit> // 특정 멤버를 프로젝트에서 제거합니다. {수정 필요} (기존 RemoveProjectMemberUseCase 또는 DeleteProjectMemberUseCase 활용)
RefreshProjectMemberListUseCase(projectId: String): CustomResult<Unit> // 멤버 목록을 수동으로 새로고침합니다. {수정 필요} (기존 WorkspaceProjectMembersUseCase 활용)
SortProjectMembersUseCase(members: List<Member>, criteria: MemberSortCriteria): List<Member> // 멤버 목록을 정렬 기준에 따라 정렬합니다. {추가 필요}
MemberSortCriteria (enum): BY_NICKNAME, BY_JOIN_DATE, BY_ROLE 등
FilterProjectMembersUseCase(members: List<Member>, query: String): List<Member> // 멤버 목록을 검색어로 필터링합니다. {추가 필요}
🏗️ feature/feature_project (역할 관리)
EditRoleViewModel.kt - 역할 수정 ViewModel
ObserveRoleDetailsForEditUseCase(projectId: String, roleId: String?) : Flow<CustomResult<Role?>> // 수정할 역할 정보(roleId 존재 시) 또는 생성 모드(roleId null)를 스트리밍합니다. {수정 필요} (기존 GetRoleDetailsUseCase 활용)
ObserveAllPermissionsForRoleAssignmentUseCase(Unit) : Flow<CustomResult<List<Permission>>> // 역할에 할당 가능한 전체 권한 목록을 스트리밍합니다. {수정 필요} (기존 GetAllPermissionsUseCase 활용)
ValidateRoleNameUseCase(projectId: String, roleName: String, existingRoleId: String?) : RoleNameValidationResult // 역할 이름 유효성 및 프로젝트 내 중복 여부를 확인합니다. {추가 필요}
SubmitRoleCreationUseCase(params: RoleCreationParams) : CustomResult<String> // 새 역할을 생성 요청하고 ID를 반환합니다. {수정 필요} (기존 CreateRoleUseCase 또는 CreateProjectRoleUseCase 활용)
RoleCreationParams (복합 정보): projectId: String, roleName: String, selectedPermissionIds: List<String>, colorHex: String?
SubmitRoleUpdateUseCase(roleUpdateData: Role) : CustomResult<Unit> // 기존 역할 정보를 업데이트 요청합니다. {수정 필요} (기존 UpdateRoleUseCase 또는 UpdateProjectRoleUseCase 활용)
Role (복합 정보): id, projectId, name, permissions, color 등
RoleListViewModel.kt - 역할 목록 ViewModel
ObserveProjectRolesWithMemberCountUseCase(projectId: String) : Flow<CustomResult<List<RoleWithMemberCount>>> // 프로젝트 역할 목록과 각 역할에 할당된 멤버 수를 스트리밍합니다. {추가 필요}
RoleWithMemberCount (복합 정보): Role 객체, memberCount: Int
RequestRoleDeletionUseCase(projectId: String, roleId: String, replacementRoleId: String?) : CustomResult<Unit> // 역할 삭제를 요청합니다. 해당 역할을 가진 멤버가 있을 경우, 대체 역할로 이전하거나 역할을 제거하는 정책이 필요합니다. {수정 필요} (기존 DeleteRoleUseCase 또는 DeleteProjectRoleUseCase 확장)
RequestRoleOrderUpdateUseCase(projectId: String, orderedRoleIds: List<String>) : CustomResult<Unit> // 역할 표시 순서 변경을 요청합니다. {추가 필요}
🏗️ feature/feature_project (프로젝트 설정)
ProjectSettingViewModel.kt - 프로젝트 설정 ViewModel
ObserveCurrentProjectSettingsUseCase(projectId: String) : Flow<CustomResult<Project>> // 현재 프로젝트의 설정 관련 정보를 스트리밍합니다. {수정 필요} (기존 GetProjectStreamUseCase 활용)
ValidateProjectNameForUpdateUseCase(projectId: String, newName: String): ProjectNameValidationResult // 프로젝트 이름 변경 시 유효성을 검사합니다. {추가 필요}
UpdateProjectDetailsUseCase(projectUpdate: Project) : CustomResult<Unit> // 프로젝트 이름, 설명, 아이콘 등 상세 정보를 업데이트합니다. {수정 필요} (기존 UpdateProjectUseCase 활용)
PrepareProjectIconForUpdateUseCase(iconUri: String): CustomResult<PreparedImageFile> // 업데이트할 프로젝트 아이콘을 준비합니다. {추가 필요}
RequestProjectDeletionUseCase(projectId: String, confirmationText: String) : CustomResult<Unit> // 프로젝트 삭제를 요청합니다. (확인 문구 입력 등 안전장치 포함 가능) {수정 필요} (기존 DeleteProjectUseCase 활용)
RequestLeaveProjectUseCase(projectId: String, userId: String): CustomResult<Unit> // 현재 사용자가 프로젝트에서 나가는 것을 요청합니다. {추가 필요}
GenerateProjectInviteCodeUseCase(projectId: String, validityDurationDays: Int?): CustomResult<Invite> // 프로젝트 초대 코드를 생성합니다. (유효기간 설정 옵션) {수정 필요} (기존 CreateInviteUseCase 활용)
ObserveProjectInviteCodesUseCase(projectId: String): Flow<CustomResult<List<Invite>>> // 현재 프로젝트의 활성 초대 코드 목록을 스트리밍합니다. {수정 필요} (기존 GetInvitesStreamUseCase 활용)
RevokeSpecificInviteCodeUseCase(inviteCode: String): CustomResult<Unit> // 특정 초대 코드를 무효화합니다. {수정 필요} (기존 RevokeInviteUseCase 또는 DeleteInviteUseCase 활용)
ObserveProjectOwnerUseCase(projectId: String): Flow<CustomResult<User>> // 프로젝트 소유자 정보를 스트리밍합니다. {추가 필요}
InitiateProjectOwnershipTransferUseCase(projectId: String, targetOwnerId: String): CustomResult<Unit> // 프로젝트 소유권 이전 절차를 시작합니다. {추가 필요}
🏗️ feature/feature_project (프로젝트 구조 - 카테고리/채널 관리)
CreateCategoryViewModel.kt - 카테고리 생성 ViewModel
ValidateCategoryNameUseCase(projectId: String, categoryName: String): CategoryNameValidationResult // 카테고리 이름 유효성(길이, 중복 등)을 검사합니다. {추가 필요}
SubmitCategoryCreationUseCase(params: NewCategoryParams) : CustomResult<Unit> // 새 카테고리 생성을 요청합니다. {수정 필요} (기존 CreateCategoryUseCase 활용)
NewCategoryParams (복합 정보): projectId: String, categoryName: String
CreateChannelViewModel.kt - 채널 생성 ViewModel
ObserveAvailableCategoriesForChannelCreationUseCase(projectId: String) : Flow<CustomResult<List<Category>>> // 채널을 추가할 수 있는 카테고리 목록을 스트리밍합니다. {수정 필요} (기존 GetCategoriesStreamUseCase 활용)
ValidateChannelNameUseCase(projectId: String, categoryId: String?, channelName: String): ChannelNameValidationResult // 채널 이름 유효성(길이, 해당 카테고리/프로젝트 내 중복 등)을 검사합니다. {추가 필요}
SubmitChannelCreationUseCase(params: NewChannelParams) : CustomResult<Unit> // 새 채널 생성을 요청합니다. {수정 필요} (기존 CreateProjectChannelUseCase 활용)
NewChannelParams (복합 정보): projectId: String, categoryId: String?, channelName: String, channelType: ProjectChannelType, isPrivate: Boolean
EditCategoryViewModel.kt - 카테고리 수정 ViewModel
ObserveCategoryDetailsForEditUseCase(projectId: String, categoryId: String) : Flow<CustomResult<Category>> // 수정할 카테고리의 상세 정보를 스트리밍합니다. {수정 필요} (기존 GetCategoryUseCase 활용)
ValidateCategoryNameForUpdateUseCase(projectId: String, categoryId: String, newName: String): CategoryNameValidationResult // 카테고리 이름 변경 시 유효성을 검사합니다. {추가 필요}
SubmitCategoryUpdateUseCase(updatedCategory: Category) : CustomResult<Unit> // 카테고리 정보 업데이트를 요청합니다. {수정 필요} (기존 UpdateCategoryUseCase 활용)
RequestCategoryDeletionUseCase(projectId: String, categoryId: String, moveChannelsToCategoryId: String?) : CustomResult<Unit> // 카테고리 삭제를 요청합니다. 하위 채널들을 다른 카테고리로 이동하거나 함께 삭제하는 옵션이 필요할 수 있습니다. {수정 필요} (기존 DeleteCategoryUseCase 확장)
EditChannelViewModel.kt - 채널 수정 ViewModel
ObserveChannelDetailsForEditUseCase(projectId: String, channelId: String) : Flow<CustomResult<ProjectChannel>> // 수정할 채널의 상세 정보를 스트리밍합니다. {수정 필요} (기존 GetProjectChannelUseCase 활용)
ObserveAvailableCategoriesForChannelMoveUseCase(projectId: String, currentChannelId: String) : Flow<CustomResult<List<Category>>> // 채널을 이동시킬 수 있는 다른 카테고리 목록을 스트리밍합니다. {추가 필요}
ValidateChannelNameForUpdateUseCase(projectId: String, categoryId: String?, channelId: String, newName: String): ChannelNameValidationResult // 채널 이름 변경 시 유효성을 검사합니다. {추가 필요}
SubmitChannelUpdateUseCase(updatedChannel: ProjectChannel) : CustomResult<Unit> // 채널 정보 업데이트(이름, 토픽, 카테고리 이동 등)를 요청합니다. {수정 필요} (기존 UpdateProjectChannelUseCase 활용)
RequestChannelDeletionUseCase(projectId: String, channelId: String) : CustomResult<Unit> // 채널 삭제를 요청합니다. {수정 필요} (기존 DeleteChannelUseCase 활용)
📅 feature/feature_schedule
AddScheduleViewModel.kt - 일정 추가 화면 ViewModel
ValidateScheduleTitleUseCase(title: String): Boolean // 일정 제목 유효성을 검사합니다. {추가 필요}
ValidateScheduleDateTimeUseCase(startTime: LocalDateTime, endTime: LocalDateTime): DateTimeValidationResult // 일정 시작/종료 시간 유효성(종료 시간이 시작 시간보다 늦는지 등)을 검사합니다. {추가 필요}
ObserveSchedulableProjectsUseCase(currentUserId: String): Flow<CustomResult<List<Project>>> // 일정을 등록할 수 있는 프로젝트 목록(내가 생성 또는 참여 중인)을 스트리밍합니다. {수정 필요} (기존 GetSchedulableProjectsUseCase 활용)
SearchUsersForAttendanceUseCase(query: String, currentAttendees: List<String>): CustomResult<List<UserSearchResultForAttendance>> // 일정에 초대할 참석자를 검색합니다. (이미 추가된 참석자 제외) {추가 필요}
UserSearchResultForAttendance (복합 정보): User 객체, isAlreadyAttending: Boolean
SubmitNewScheduleUseCase(scheduleDetails: NewScheduleDetails) : CustomResult<Unit> // 새 일정 정보를 저장 요청합니다. {수정 필요} (기존 AddScheduleUseCase 활용)
NewScheduleDetails (복합 정보): title: String, content: String?, startTime: LocalDateTime, endTime: LocalDateTime, projectId: String?, attendeeIds: List<String>, isAllDay: Boolean, repetitionRule: String?, alertTimeMinutesBefore: Int?
Calendar24HourViewModel.kt - 24시간 형식 캘린더 ViewModel (일별 상세 시간대별 일정 표시)
ObserveDailySchedulesWithBlockInfoUseCase(params: ObserveDailyScheduleParams) : Flow<CustomResult<List<ScheduleTimeBlock>>> // 특정 날짜의 일정 목록을 시간대별 블록 정보(UI 표현용)로 변환하여 스트리밍합니다. {추가 필요} (GetSchedulesForDateUseCase 확장)
ObserveDailyScheduleParams (복합 정보): selectedProjectId: String?, date: LocalDate
ScheduleTimeBlock (복합 정보): Schedule 객체, startHour: Int, durationMinutes: Int, color: String 등 UI 표현 정보
ObserveCurrentTimeIndicatorUseCase(Unit): Flow<LocalTime> // 현재 시간을 스트리밍하여 캘린더에 현재 시간 표시선을 그립니다. {추가 필요}
EditScheduleViewModel.kt - 일정 수정 화면 ViewModel
ObserveScheduleDetailsForEditUseCase(scheduleId: String) : Flow<CustomResult<Schedule>> // 수정할 일정의 현재 상세 정보를 스트리밍합니다. {수정 필요} (기존 GetScheduleDetailUseCase 활용)
ValidateScheduleTitleForUpdateUseCase(scheduleId: String, title: String): Boolean // 일정 제목 수정 시 유효성을 검사합니다. {추가 필요}
ValidateScheduleDateTimeForUpdateUseCase(scheduleId: String, startTime: LocalDateTime, endTime: LocalDateTime): DateTimeValidationResult // 일정 시간 수정 시 유효성을 검사합니다. {추가 필요}
ObserveSchedulableProjectsForEditUseCase(currentUserId: String, currentScheduleProjectId: String?): Flow<CustomResult<List<Project>>> // 수정 시 선택 가능한 프로젝트 목록을 스트리밍합니다. {추가 필요}
SearchUsersForAttendanceUpdateUseCase(query: String, currentAttendees: List<String>): CustomResult<List<UserSearchResultForAttendance>> // 일정 참석자 수정 시 사용자 검색. {추가 필요}
SubmitScheduleUpdateUseCase(updatedScheduleDetails: ScheduleUpdateDetails) : CustomResult<Unit> // 수정된 일정 정보를 저장 요청합니다. {수정 필요} (기존 UpdateScheduleUseCase 활용)
ScheduleUpdateDetails (복합 정보): scheduleId: String 포함, 변경된 필드들
ScheduleDetailViewModel.kt - 일정 상세 화면 ViewModel
ObserveScheduleDetailsUseCase(scheduleId: String) : Flow<CustomResult<ScheduleWithFormattedInfo>> // 특정 일정의 상세 정보와 UI 표시용 포맷된 정보(날짜, 시간, 참석자 이름 목록 등)를 스트리밍합니다. {수정 필요} (기존 GetScheduleDetailUseCase 확장)
ScheduleWithFormattedInfo (복합 정보): Schedule 객체, formattedStartDate: String, formattedTimeRange: String, attendeeNames: List<String>
RequestScheduleDeletionUseCase(scheduleId: String) : CustomResult<Unit> // 일정 삭제를 요청합니다. {수정 필요} (기존 DeleteScheduleUseCase 활용)
UpdateMyAttendanceStatusForScheduleUseCase(scheduleId: String, newStatus: AttendeeStatus) : CustomResult<Unit> // 특정 일정에 대한 나의 참석 상태(참석, 불참, 미정)를 업데이트합니다. {추가 필요}
AttendeeStatus (enum): ATTENDING, DECLINED, MAYBE
🔍 feature/feature_search
SearchViewModel.kt - 검색 화면 ViewModel
PerformGlobalSearchUseCase(query: String, filters: SearchFilters) : Flow<CustomResult<GlobalSearchResults>> // 다양한 조건(필터)으로 통합 검색을 수행하고 결과를 스트리밍합니다. {추가 필요}
SearchFilters (복합 정보): searchTargets: List<SearchTargetType>, dateRange: DateRange?, projectId: String? 등
SearchTargetType (enum): USERS, PROJECTS, MESSAGES, SCHEDULES, FILES
GlobalSearchResults (복합 정보): 각 SearchTargetType별 검색 결과 목록 (예: foundUsers: List<User>, foundMessages: List<MessageSearchResult>)
GetRecentSearchQueriesUseCase(limit: Int): Flow<CustomResult<List<String>>> // 최근 검색어 목록을 가져옵니다. {추가 필요}
SaveSearchQueryUseCase(query: String): CustomResult<Unit> // 검색어를 최근 검색어 목록에 저장합니다. {추가 필요}
ClearRecentSearchQueriesUseCase(Unit): CustomResult<Unit> // 최근 검색어 목록을 비웁니다. {추가 필요}
GetSearchSuggestionsUseCase(partialQuery: String, currentFilters: SearchFilters): Flow<CustomResult<List<SearchSuggestion>>> // 입력 중인 검색어에 대한 추천 검색어를 제공합니다. {추가 필요}
SearchSuggestion (복합 정보): suggestionText: String, suggestionType: SearchTargetType?
⚙️ feature/feature_settings
ChangePasswordViewModel.kt - 비밀번호 변경 ViewModel
ValidateCurrentPasswordFormatUseCase(password: String): Boolean // 현재 비밀번호 입력 형식 유효성을 검사합니다. {추가 필요}
ValidateNewPasswordPolicyUseCase(password: String): PasswordValidationResult // 새 비밀번호 정책(길이, 조합 등) 유효성을 검사합니다. {추가 필요} (ValidateNewPasswordUseCase와 유사하나, 컨텍스트가 다를 수 있음)
VerifyCurrentPasswordAndRequestChangeUseCase(params: PasswordChangeRequestParams) : CustomResult<Unit> // 현재 비밀번호를 서버에서 검증 후 새 비밀번호로 변경을 요청합니다. {수정 필요} (기존 ChangePasswordUseCase 활용)
PasswordChangeRequestParams (복합 정보): currentPassword: String, newPassword: String
ChangNameViewModel.kt - 이름 변경 ViewModel (앱 내 표시되는 닉네임 변경)
ObserveCurrentNicknameUseCase(Unit) : Flow<CustomResult<String?>> // 현재 설정된 닉네임을 스트리밍합니다. {추가 필요}
ValidateNewNicknameUseCase(newNickname: String, currentUserId: String) : NicknameValidationResult // 새 닉네임의 유효성(길이, 중복 등)을 검사합니다. {수정 필요} (기존 CheckNicknameAvailabilityUseCase 확장)
SubmitNewNicknameUseCase(newNickname: String) : CustomResult<Unit> // 새 닉네임 변경을 요청합니다. {수정 필요} (기존 UpdateNicknameUseCase 활용)
MigrationToolViewModel.kt - 마이그레이션 도구 ViewModel
(이전 설명과 동일하게, 매우 특수하고 개발/운영 목적이 강하여 일반적인 사용자 UseCase와 다릅니다.)
GetAvailableMigrationTasksUseCase(Unit): CustomResult<List<MigrationTaskInfo>> // 실행 가능한 마이그레이션 작업 목록을 가져옵니다. {추가 필요}
MigrationTaskInfo (복합 정보): taskId: String, description: String, lastRunStatus: String?
ExecuteSpecificMigrationTaskUseCase(taskId: String, params: Map<String, Any>?) : CustomResult<MigrationResult> // 특정 마이그레이션 작업을 실행하고 결과를 반환합니다. {추가 필요}
MigrationResult (복합 정보): success: Boolean, message: String, details: Map<String, String>?
SettingsViewModel.kt (presentation 패키지) - 설정 메인 화면 ViewModel
ObserveMySettingsProfileUseCase(Unit) : Flow<CustomResult<UserSettingsSummary>> // 설정 화면에 표시될 사용자 요약 정보(이름, 이메일, 프로필 이미지)를 스트리밍합니다. {수정 필요} (GetMyProfileUseCase 활용 및 가공)
UserSettingsSummary (복합 정보): displayName: String, email: String, profileImageUrl: String?
ObserveNotificationPreferencesUseCase(Unit) : Flow<CustomResult<NotificationPreferences>> // 현재 알림 설정을 스트리밍합니다. {추가 필요}
NotificationPreferences (복합 정보): globalEnable: Boolean, projectMentionEnable: Boolean, dmEnable: Boolean 등
UpdateSpecificNotificationPreferenceUseCase(preferenceKey: String, newValue: Boolean) : CustomResult<Unit> // 특정 알림 설정을 업데이트합니다. {추가 필요}
GetApplicationVersionInfoUseCase(Unit) : CustomResult<AppVersionInfo> // 앱 버전 정보(버전명, 버전 코드)를 가져옵니다. {추가 필요}
AppVersionInfo (복합 정보): versionName: String, versionCode: Int
RequestLogoutUseCase(Unit) : CustomResult<Unit> // 로그아웃을 요청합니다. {수정 필요} (기존 SignOutUseCase 활용)
CheckForAppUpdatesUseCase(Unit): CustomResult<AppUpdateInfo?> // 앱 스토어 등에서 새로운 앱 업데이트가 있는지 확인합니다. {추가 필요}
AppUpdateInfo (복합 정보): newVersionName: String, updateUrl: String, isForceUpdate: Boolean
최종 참고 사항:

단일 책임 원칙 (SRP): ViewModel의 각 사용자 인터랙션 또는 데이터 로딩이 가능한 한 하나의 UseCase 호출로 이어지도록 세분화하려고 노력했습니다. 예를 들어, 입력 값 검증, 데이터 준비, 실제 API 호출 등을 별도의 UseCase로 분리할 수 있습니다.
UseCase 재사용성: 여러 ViewModel에서 동일하거나 유사한 기능이 필요할 경우, 공통 UseCase를 만들어 재사용하는 것이 좋습니다. (예: ValidateEmailFormatUseCase)
Params 및 Result 데이터 클래스: UseCase의 입력과 출력이 명확해지도록 복합 정보를 전달할 때는 전용 데이터 클래스(예: LoginParams, LoginResult)를 사용하는 것을 적극 권장합니다.
{수정 필요} vs {추가 필요}: 이 표시는 현재 제공해주신 domain 모듈의 UseCase 목록을 기준으로 합니다. 실제 프로젝트에 이미 해당 기능을 수행하는 UseCase가 있다면 {수정 필요}로 간주하고, 없다면 {추가 필요}로 판단했습니다. 만약 UseCase 이름만 다르고 기능이 같다면 {수정 필요}로 보고 기존 것을 활용하는 방향으로 생각하시면 됩니다.
점진적 구현: 이 목록은 매우 상세하므로, 모든 UseCase를 한 번에 만들기보다는 기능 단위로 필요한 UseCase부터 점진적으로 구현해나가는 것이 효율적일 수 있습니다.