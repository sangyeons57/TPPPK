classDiagram
    title Main Feature Architecture

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_MainNS {
            class HomeViewModel {
                -getCurrentUserStreamUseCase: GetCurrentUserStreamUseCase
                -getUserDmChannelsUseCase: GetUserDmChannelsUseCase
                -getUserInfoUseCase: GetUserInfoUseCase
                -getSchedulableProjectsUseCase: GetSchedulableProjectsUseCase
                -getProjectAllCategoriesUseCase: GetProjectAllCategoriesUseCase
                +loadDataForUser()
                +onTopSectionSelect(section: TopSection)
                +onProjectClick(projectId: String)
                +onDmItemClick(dmUiModel: DmUiModel)
            }
            class CalendarViewModel {
                -getSchedulesForDateUseCase: GetSchedulesForDateUseCase
                -getScheduleSummaryForMonthUseCase: GetScheduleSummaryForMonthUseCase
                -appNavigator: AppNavigator
                +onDateSelected(date: LocalDate)
                +onPreviousMonthClick()
                +onNextMonthClick()
                +refreshSchedules()
            }
            class ProfileViewModel {
                -getCurrentUserStreamUseCase: GetCurrentUserStreamUseCase
                -updateUserStatusUseCase: UpdateUserStatusUseCase
                -updateUserProfileImageUseCase: UpdateUserImageUseCase
                +loadUserProfile()
                +onEditProfileClicked()
                +onEditStatusClick()
                +onLogoutClick()
            }
        }
    end

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_ProjectNS {
            class GetUserParticipatingProjectsUseCase {
                -projectsWrapperRepository: ProjectsWrapperRepository
                -projectRepository: ProjectRepository
                -authUtil: AuthUtil
                +invoke(): Flow<CustomResult<List<Project>, Exception>>
            }
            class GetSchedulableProjectsUseCase {
                -projectRepository: ProjectRepository
                +invoke(): Result<List<Project>>
            }
            class GetProjectAllCategoriesUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String): Result<ProjectStructure>
            }
        }
        namespace UseCases_DMNS {
            class GetUserDmChannelsUseCase {
                -dmChannelRepository: DMChannelRepository
                +invoke(): Flow<List<DMChannel>>
            }
        }
        namespace UseCases_UserNS {
            class GetCurrentUserStreamUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): Flow<CustomResult<User, Exception>>
            }
            class GetUserInfoUseCase {
                -userRepository: UserRepository
                +invoke(userId: String): Flow<Result<User>>
            }
            class UpdateUserStatusUseCase {
                -userRepository: UserRepository
                +invoke(status: String): Result<Unit>
            }
            class UpdateUserImageUseCase {
                -userRepository: UserRepository
                -mediaRepository: MediaRepository
                +invoke(imageUri: Uri): CustomResult<String, Exception>
            }
        }
        namespace UseCases_ScheduleNS {
            class GetScheduleSummaryForMonthUseCase {
                -scheduleRepository: ScheduleRepository
                -authRepository: AuthRepository
                +invoke(yearMonth: YearMonth): CustomResult<Map<Int, Boolean>, Exception>
            }
            class GetSchedulesForDateUseCase {
                -scheduleRepository: ScheduleRepository
                +invoke(date: LocalDate): Flow<CustomResult<List<Schedule>, Exception>>
            }
        }

        namespace Repositories_DomainNS {
            class ProjectRepository {
                <<Interface>>
                +getProjectDetails(projectId: String): CustomResult<Project, Exception>
                +getProjectStructureStream(projectId: String): Flow<CustomResult<List<Category>, Exception>>
            }
            class ProjectsWrapperRepository {
                <<Interface>>
                +getProjectsWrapperStream(userId: String): Flow<List<CustomResult<ProjectsWrapper, Exception>>>
            }
            class DMChannelRepository {
                <<Interface>>
                +getCurrentDmChannelsStream(): Flow<CustomResult<List<DMChannel>, Exception>>
            }
            class UserRepository {
                <<Interface>>
                +getUserStream(userId: String): Flow<CustomResult<User, Exception>>
                +updateUserProfile(userId: String, user: User, localImageUri: Uri?): CustomResult<User, Exception>
            }
            class ScheduleRepository {
                <<Interface>>
                +getScheduleSummaryForMonth(userId: String, yearMonth: YearMonth): CustomResult<Map<Int, Boolean>, Exception>
                +getSchedulesOnDate(date: LocalDate): Flow<CustomResult<List<Schedule>, Exception>>
            }
            class AuthRepository {
                <<Interface>>
                +getCurrentUserSession(): CustomResult<UserSession, Exception>
                +logout(): CustomResult<Unit, Exception>
            }
            class MediaRepository {
                <<Interface>>
                +uploadFile(uri: Uri, storagePath: String): CustomResult<String, Exception>
            }
        }
    end

    %% Data Layer
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class ProjectRepositoryImpl {
                -projectRemoteDataSource: ProjectRemoteDataSource
                -categoryRemoteDataSource: CategoryRemoteDataSource
                -memberRemoteDataSource: MemberRemoteDataSource
                -mediaRepository: MediaRepository
            }
            class ProjectsWrapperRepositoryImpl {
                -projectsWrapperRemoteDataSource: ProjectsWrapperRemoteDataSource
            }
            class DMChannelRepositoryImpl {
                -dmChannelRemoteDataSource: DMChannelRemoteDataSource
                -auth: FirebaseAuth
            }
            class UserRepositoryImpl {
                -userRemoteDataSource: UserRemoteDataSource
                -mediaRepository: MediaRepository
            }
            class ScheduleRepositoryImpl {
                -scheduleRemoteDataSource: ScheduleRemoteDataSource
            }
            class AuthRepositoryImpl {
                -authRemoteDataSource: AuthRemoteDataSource
                -auth: FirebaseAuth
            }
            class MediaRepositoryImpl {
                -firebaseStorage: FirebaseStorage
            }
        }

        namespace RemoteDataSources_DataNS {
            class ProjectRemoteDataSource { <<Interface>> }
            class ProjectsWrapperRemoteDataSource { <<Interface>> }
            class CategoryRemoteDataSource { <<Interface>> }
            class MemberRemoteDataSource { <<Interface>> }
            class DMChannelRemoteDataSource { <<Interface>> }
            class UserRemoteDataSource { <<Interface>> }
            class ScheduleRemoteDataSource { <<Interface>> }
            class AuthRemoteDataSource { <<Interface>> }
        }

        namespace DataSourceImpl_DataNS {
            class ProjectRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class ProjectsWrapperRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class CategoryRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class MemberRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class DMChannelRemoteDataSourceImpl { -auth: FirebaseAuth; -firestore: FirebaseFirestore }
            class UserRemoteDataSourceImpl { -auth: FirebaseAuth; -firestore: FirebaseFirestore; -storage: FirebaseStorage }
            class ScheduleRemoteDataSourceImpl { -auth: FirebaseAuth; -firestore: FirebaseFirestore }
            class AuthRemoteDataSourceImpl { -auth: FirebaseAuth }
        }
         namespace Utils_DataNS {
            class AuthUtil { +getCurrentUserId(): String }
        }
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase
    ViewModels_MainNS.HomeViewModel ..> UseCases_UserNS.GetCurrentUserStreamUseCase : uses
    ViewModels_MainNS.HomeViewModel ..> UseCases_DMNS.GetUserDmChannelsUseCase : uses
    ViewModels_MainNS.HomeViewModel ..> UseCases_UserNS.GetUserInfoUseCase : uses
    ViewModels_MainNS.HomeViewModel ..> UseCases_ProjectNS.GetSchedulableProjectsUseCase : uses
    ViewModels_MainNS.HomeViewModel ..> UseCases_ProjectNS.GetProjectAllCategoriesUseCase : uses

    ViewModels_MainNS.CalendarViewModel ..> UseCases_ScheduleNS.GetSchedulesForDateUseCase : uses
    ViewModels_MainNS.CalendarViewModel ..> UseCases_ScheduleNS.GetScheduleSummaryForMonthUseCase : uses

    ViewModels_MainNS.ProfileViewModel ..> UseCases_UserNS.GetCurrentUserStreamUseCase : uses
    ViewModels_MainNS.ProfileViewModel ..> UseCases_UserNS.UpdateUserStatusUseCase : uses
    ViewModels_MainNS.ProfileViewModel ..> UseCases_UserNS.UpdateUserImageUseCase : uses

    %% UseCase -> Repository Interface
    UseCases_ProjectNS.GetUserParticipatingProjectsUseCase ..> Repositories_DomainNS.ProjectsWrapperRepository : accesses
    UseCases_ProjectNS.GetUserParticipatingProjectsUseCase ..> Repositories_DomainNS.ProjectRepository : accesses
    UseCases_ProjectNS.GetUserParticipatingProjectsUseCase ..> Utils_DataNS.AuthUtil : uses
    UseCases_ProjectNS.GetSchedulableProjectsUseCase ..> Repositories_DomainNS.ProjectRepository : accesses
    UseCases_ProjectNS.GetProjectAllCategoriesUseCase ..> Repositories_DomainNS.ProjectRepository : accesses

    UseCases_DMNS.GetUserDmChannelsUseCase ..> Repositories_DomainNS.DMChannelRepository : accesses

    UseCases_UserNS.GetCurrentUserStreamUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.GetCurrentUserStreamUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.GetUserInfoUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UpdateUserStatusUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UpdateUserImageUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UpdateUserImageUseCase ..> Repositories_DomainNS.MediaRepository : accesses

    UseCases_ScheduleNS.GetScheduleSummaryForMonthUseCase ..> Repositories_DomainNS.ScheduleRepository : accesses
    UseCases_ScheduleNS.GetScheduleSummaryForMonthUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_ScheduleNS.GetSchedulesForDateUseCase ..> Repositories_DomainNS.ScheduleRepository : accesses

    %% Repository Impl -> Repo Interface
    Repositories_DomainNS.ProjectRepository <|.. RepositoryImpl_DataNS.ProjectRepositoryImpl : implements
    Repositories_DomainNS.ProjectsWrapperRepository <|.. RepositoryImpl_DataNS.ProjectsWrapperRepositoryImpl : implements
    Repositories_DomainNS.DMChannelRepository <|.. RepositoryImpl_DataNS.DMChannelRepositoryImpl : implements
    Repositories_DomainNS.UserRepository <|.. RepositoryImpl_DataNS.UserRepositoryImpl : implements
    Repositories_DomainNS.ScheduleRepository <|.. RepositoryImpl_DataNS.ScheduleRepositoryImpl : implements
    Repositories_DomainNS.AuthRepository <|.. RepositoryImpl_DataNS.AuthRepositoryImpl : implements
    Repositories_DomainNS.MediaRepository <|.. RepositoryImpl_DataNS.MediaRepositoryImpl : implements

    %% Repository Impl -> DataSource Interface
    RepositoryImpl_DataNS.ProjectRepositoryImpl ..> RemoteDataSources_DataNS.ProjectRemoteDataSource : uses
    RepositoryImpl_DataNS.ProjectRepositoryImpl ..> RemoteDataSources_DataNS.CategoryRemoteDataSource : uses
    RepositoryImpl_DataNS.ProjectRepositoryImpl ..> RemoteDataSources_DataNS.MemberRemoteDataSource : uses
    RepositoryImpl_DataNS.ProjectRepositoryImpl ..> Repositories_DomainNS.MediaRepository : uses

    RepositoryImpl_DataNS.ProjectsWrapperRepositoryImpl ..> RemoteDataSources_DataNS.ProjectsWrapperRemoteDataSource : uses
    RepositoryImpl_DataNS.DMChannelRepositoryImpl ..> RemoteDataSources_DataNS.DMChannelRemoteDataSource : uses
    RepositoryImpl_DataNS.UserRepositoryImpl ..> RemoteDataSources_DataNS.UserRemoteDataSource : uses
    RepositoryImpl_DataNS.UserRepositoryImpl ..> Repositories_DomainNS.MediaRepository : uses

    RepositoryImpl_DataNS.ScheduleRepositoryImpl ..> RemoteDataSources_DataNS.ScheduleRemoteDataSource : uses
    RepositoryImpl_DataNS.AuthRepositoryImpl ..> RemoteDataSources_DataNS.AuthRemoteDataSource : uses
    RepositoryImpl_DataNS.MediaRepositoryImpl ..> UseCases_Common.FirebaseStorage : uses

    %% DataSource Impl -> DS Interface
    RemoteDataSources_DataNS.ProjectRemoteDataSource <|.. DataSourceImpl_DataNS.ProjectRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.ProjectsWrapperRemoteDataSource <|.. DataSourceImpl_DataNS.ProjectsWrapperRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.CategoryRemoteDataSource <|.. DataSourceImpl_DataNS.CategoryRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.MemberRemoteDataSource <|.. DataSourceImpl_DataNS.MemberRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.DMChannelRemoteDataSource <|.. DataSourceImpl_DataNS.DMChannelRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.UserRemoteDataSource <|.. DataSourceImpl_DataNS.UserRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.ScheduleRemoteDataSource <|.. DataSourceImpl_DataNS.ScheduleRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.AuthRemoteDataSource <|.. DataSourceImpl_DataNS.AuthRemoteDataSourceImpl : implements

    note for Utils_DataNS.AuthUtil "Utility for current user ID"
    note for UseCases_Common.FirebaseStorage "External Firebase Storage SDK"
    note for RepositoryImpl_DataNS.ProjectRepositoryImpl "MediaRepository dep is for project image uploads"
    note for RepositoryImpl_DataNS.UserRepositoryImpl "MediaRepository dep is for user profile image uploads"
