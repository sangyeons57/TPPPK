classDiagram
    title 사용자 도메인 다이어그램

    subgraph Domain Layer
        direction LR

        namespace UseCases {
            class CheckNicknameAvailabilityUseCase {
                -userRepository: UserRepository
                +invoke(nickname: String): Result<Boolean>
            }
            class GetCurrentStatusUseCase {
                -userRepository: UserRepository
                +invoke(): Flow<UserStatus>
            }
            class GetCurrentUserStreamUseCase {
                -userRepository: UserRepository
                +invoke(): Flow<User?>
            }
            class GetCurrentUserUseCase {
                -authRepository: AuthRepository
                +invoke(): User?
            }
            class GetMyProfileUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): Result<User>
            }
            class GetUserProfileImageUseCase {
                -userRepository: UserRepository
                +invoke(userId: String): Flow<String?>
            }
            class GetUserInfoUseCase {
                 -userRepository: UserRepository
                 +invoke(userId: String): Result<User>
            }
            class GetUserStreamUseCase {
                -userRepository: UserRepository
                +invoke(userId: String): Flow<User?>
            }
            class GetUserUseCase {
                -userRepository: UserRepository
                +invoke(userId: String): Result<User?>
            }
            class RemoveProfileImageUseCase {
                -userRepository: UserRepository
                -mediaRepository: MediaRepository
                -authRepository: AuthRepository
                +invoke(): Result<Unit>
            }
            class SearchUserByNameUseCase {
                -userRepository: UserRepository
                +invoke(query: String): Flow<List<User>>
            }
            class UpdateImageUseCase {
                -userRepository: UserRepository
                -mediaRepository: MediaRepository
                -authRepository: AuthRepository
                +invoke(imageUri: String): Result<String>
            }
            class UpdateNicknameUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(newNickname: String): Result<Unit>
            }
            class UpdateUserImageUseCase {
                -userRepository: UserRepository
                -mediaRepository: MediaRepository
                -authRepository: AuthRepository
                +invoke(imageUri: String): Result<String>
            }
            class UpdateUserProfileUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(user: User): Result<Unit>
            }
            class UpdateUserStatusUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(status: UserStatus): Result<Unit>
            }
            class UpdateUserUseCase {
                -userRepository: UserRepository
                +invoke(user: User): Result<Unit>
            }
            class UploadProfileImageUseCase {
                -userRepository: UserRepository
                -mediaRepository: MediaRepository
                -authRepository: AuthRepository
                +invoke(imageUri: String): Result<String>
            }
            class WithdrawUserUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): Result<Unit>
            }
        }

        class UserRepository {
            <<Interface>>
            +getUser(userId: String): Result<User?>
            +observeUser(userId: String): Flow<User?>
            +getCurrentUser(): User?
            +observeCurrentUser(): Flow<User?>
            +updateUser(user: User): Result<Unit>
            +updateUserProfile(userId: String, nickname: String?, profileImageUrl: String?, statusMessage: String?): Result<Unit>
            +updateUserStatus(userId: String, status: UserStatus): Result<Unit>
            +updateUserNickname(userId: String, nickname: String): Result<Unit>
            +updateUserProfileImage(userId: String, imageUrl: String): Result<Unit>
            +removeUserProfileImage(userId: String): Result<Unit>
            +checkNicknameAvailability(nickname: String): Result<Boolean>
            +searchUsersByName(query: String): Flow<List<User>>
            +deleteUser(userId: String): Result<Unit>
            +observeUserStatus(userId: String): Flow<UserStatus>
        }
        note for UserRepository "사용자 데이터 CRUD 및 관찰"

        class AuthRepository {
            <<Interface>>
            +getCurrentUser(): User?
            +logout(): Result<Unit>
            +deleteAccount(): Result<Unit>
            # ... (다른 인증 관련 메서드들)
        }
        note for AuthRepository "인증 상태 및 현재 사용자 정보 제공"

        class MediaRepository {
            <<Interface>>
            +uploadImage(imageUri: String, path: String): Result<String>
            +deleteImage(imageUrl: String): Result<Unit>
        }
        note for MediaRepository "미디어(이미지) 업로드 및 삭제 처리"
    end

    %% Relationships
    CheckNicknameAvailabilityUseCase ..> UserRepository
    GetCurrentStatusUseCase ..> UserRepository
    GetCurrentUserStreamUseCase ..> UserRepository
    GetCurrentUserUseCase ..> AuthRepository
    GetMyProfileUseCase ..> UserRepository
    GetMyProfileUseCase ..> AuthRepository
    GetUserProfileImageUseCase ..> UserRepository
    GetUserInfoUseCase ..> UserRepository
    GetUserStreamUseCase ..> UserRepository
    GetUserUseCase ..> UserRepository

    RemoveProfileImageUseCase ..> UserRepository
    RemoveProfileImageUseCase ..> MediaRepository
    RemoveProfileImageUseCase ..> AuthRepository

    SearchUserByNameUseCase ..> UserRepository

    UpdateImageUseCase ..> UserRepository
    UpdateImageUseCase ..> MediaRepository
    UpdateImageUseCase ..> AuthRepository

    UpdateNicknameUseCase ..> UserRepository
    UpdateNicknameUseCase ..> AuthRepository

    UpdateUserImageUseCase ..> UserRepository
    UpdateUserImageUseCase ..> MediaRepository
    UpdateUserImageUseCase ..> AuthRepository

    UpdateUserProfileUseCase ..> UserRepository
    UpdateUserProfileUseCase ..> AuthRepository

    UpdateUserStatusUseCase ..> UserRepository
    UpdateUserStatusUseCase ..> AuthRepository

    UpdateUserUseCase ..> UserRepository

    UploadProfileImageUseCase ..> UserRepository
    UploadProfileImageUseCase ..> MediaRepository
    UploadProfileImageUseCase ..> AuthRepository

    WithdrawUserUseCase ..> UserRepository
    WithdrawUserUseCase ..> AuthRepository