classDiagram
    title AuthUseCase 중심 아키텍처

    %% Domain Layer (UseCases & Repository Interface)
    %% 애플리케이션의 핵심 비즈니스 로직 (인증 관련)


    subgraph Domain Layer
        direction LR
        namespace UseCases {
            class LoginUseCase {
                -authRepository: AuthRepository
                +invoke(email, password): Result<User>
            }
            class SignUpUseCase {
                -authRepository: AuthRepository
                +invoke(params): Result<Unit>
            }
            class RequestPasswordResetUseCase {
                -authRepository: AuthRepository
                +invoke(email): Result<Unit>
            }
            class CheckSessionUseCase {
                -authRepository: AuthRepository
                +invoke(): User?
            }
            class SendEmailVerificationUseCase {
                -authRepository: AuthRepository
                +invoke(): Result<Unit>
            }
            class CheckEmailVerificationUseCase {
                -authRepository: AuthRepository
                +invoke(): Result<Boolean>
            }
            class ChangePasswordUseCase {
                -authRepository: AuthRepository
                +invoke(oldPassword, newPassword): Result<Unit>
            }
            class VerifyPasswordResetCodeUseCase {
                -authRepository: AuthRepository
                +invoke(code): Result<String>
            }
            class GetAuthErrorMessageUseCase {
                +invoke(errorCode: String): String
            }
            class CheckAuthenticationStatusUseCase {
                -authRepository: AuthRepository
                +invoke(): Flow<Boolean>
            }
            class ResetPasswordUseCase {
                -authRepository: AuthRepository
                +invoke(email: String, code: String, newPassword: String): Result<Unit>
            }
        }

        note for LoginUseCase "로그인 처리"
        note for SignUpUseCase "회원가입 처리"
        note for RequestPasswordResetUseCase "비밀번호 재설정 요청"
        note for CheckSessionUseCase "현재 로그인 세션 확인"
        note for SendEmailVerificationUseCase "이메일 인증 메일 발송"
        note for CheckEmailVerificationUseCase "이메일 인증 상태 확인"
        note for ChangePasswordUseCase "사용자 비밀번호 변경"
        note for VerifyPasswordResetCodeUseCase "비밀번호 재설정 코드 유효성 확인"
        note for GetAuthErrorMessageUseCase "인증 에러 메시지 가져오기"
        note for CheckAuthenticationStatusUseCase "사용자 인증 상태 변화 감지"
        note for ResetPasswordUseCase "비밀번호 재설정 실행"

        class AuthRepository {
            <<Interface>>
            +login(email, password): Result<User>
            +signUp(params): Result<Unit>
            +requestPasswordReset(email): Result<Unit>
            +getCurrentUser(): User?
            +sendEmailVerification(): Result<Unit>
            +checkEmailVerification(): Result<Boolean>
            +changePassword(oldPassword, newPassword): Result<Unit>
            +verifyPasswordResetCode(code): Result<String>
            +observeAuthenticationStatus(): Flow<Boolean>
            +saveUserSession(user: User): Result<Unit>
            +clearUserSession(): Result<Unit>
            +logout(): Result<Unit>
        }
        note for AuthRepository "인증 데이터 접근을 위한<br/>추상화 인터페이스"

    end

    %% Data Layer (Repository Implementation & DataSources)
    %% Domain 계층의 Repository 인터페이스를 구현하고, 실제 데이터 소스와 통신합니다.
    subgraph Data Layer
        direction LR
        class AuthRepositoryImpl {
            -authRemoteDataSource: AuthRemoteDataSource
            -userLocalDataSource: UserLocalDataSource
            +login(email, password): Result<User>
            +signUp(params): Result<Unit>
            +requestPasswordReset(email): Result<Unit>
            +getCurrentUser(): User?
            +sendEmailVerification(): Result<Unit>
            +checkEmailVerification(): Result<Boolean>
            +changePassword(oldPassword, newPassword): Result<Unit>
            +verifyPasswordResetCode(code): Result<String>
            +observeAuthenticationStatus(): Flow<Boolean>
            +saveUserSession(user: User): Result<Unit>
            +clearUserSession(): Result<Unit>
            +logout(): Result<Unit>
        }
        note for AuthRepositoryImpl "AuthRepository의 구현체.<br/>원격/로컬 데이터 소스 사용"

        class AuthRemoteDataSource {
            <<Interface>>
            +login(email, password): Result<UserDto>
            +signUp(params): Result<Unit>
            +requestPasswordReset(email): Result<Unit>
            +getCurrentFirebaseUser(): FirebaseUser?
            +sendEmailVerification(): Result<Unit>
            +checkEmailVerification(): Result<Boolean>
            +changePassword(oldPassword, newPassword): Result<Unit>
            +verifyPasswordResetCode(code): Result<String>
            +logout(): Result<Unit>
        }
        note for AuthRemoteDataSource "원격 인증 서비스(Firebase 등)와 통신"

        class AuthRemoteDataSourceImpl {
            -firebaseAuth: FirebaseAuth
            +login(email, password): Result<UserDto>
            +signUp(params): Result<Unit>
            +requestPasswordReset(email): Result<Unit>
            +getCurrentFirebaseUser(): FirebaseUser?
            +sendEmailVerification(): Result<Unit>
            +checkEmailVerification(): Result<Boolean>
            +changePassword(oldPassword, newPassword): Result<Unit>
            +verifyPasswordResetCode(code): Result<String>
            +logout(): Result<Unit>
        }

        class UserLocalDataSource {
            <<Interface>>
            +saveUser(user: UserEntity): Result<Unit>
            +getUser(): Flow<UserEntity?>
            +deleteUser(): Result<Unit>
        }
        note for UserLocalDataSource "로컬에 사용자 정보 저장/조회 (선택적)"
        
        class UserLocalDataSourceImpl {
            -userDao: UserDao
            +saveUser(user: UserEntity): Result<Unit>
            +getUser(): Flow<UserEntity?>
            +deleteUser(): Result<Unit>
        }

    end

    %% Relationships
    LoginUseCase ..> AuthRepository
    SignUpUseCase ..> AuthRepository
    RequestPasswordResetUseCase ..> AuthRepository
    CheckSessionUseCase ..> AuthRepository
    SendEmailVerificationUseCase ..> AuthRepository
    CheckEmailVerificationUseCase ..> AuthRepository
    ChangePasswordUseCase ..> AuthRepository
    VerifyPasswordResetCodeUseCase ..> AuthRepository
    CheckAuthenticationStatusUseCase ..> AuthRepository
    ResetPasswordUseCase ..> AuthRepository
    %% GetAuthErrorMessageUseCase는 Repository에 직접 의존하지 않을 수 있음 (유틸리티 함수)

    AuthRepository <|.. AuthRepositoryImpl

    AuthRepositoryImpl ..> AuthRemoteDataSource
    AuthRepositoryImpl ..> UserLocalDataSource

    AuthRemoteDataSource <|.. AuthRemoteDataSourceImpl
    UserLocalDataSource <|.. UserLocalDataSourceImpl

