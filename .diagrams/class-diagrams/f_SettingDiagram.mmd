classDiagram
    title Settings Feature Architecture 
    %% Layered Architecture: Feature (ViewModels) -> Domain (UseCases, Repository Interfaces) -> Data (Repository Implementations, DataSources, Components).
    %% Data Flow: External services (e.g., Firebase) are accessed by DataSource Implementations, which are abstracted by DataSource Interfaces.
    %% Repository Implementations use DataSource Interfaces and are abstracted by Repository Interfaces.
    %% UseCases consume Repository Interfaces for business logic. ViewModels use UseCases (or sometimes Data Layer Components for tools) for UI state and interactions.
    %% UI (not shown) observes ViewModels.
    %% Data Models: DTOs (e.g., UserDTO) in Data layer, Domain Models (e.g., User) in Domain/ViewModel layers.

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_SettingsNS {
            class SettingsViewModel {
                -getCurrentUserStreamUseCase: GetCurrentUserStreamUseCase
                -logoutUseCase: LogoutUseCase
                -withdrawUserUseCase: WithdrawUserUseCase
                +observeUserProfile()
                +performLogout()
                +performWithdrawal()
            }
            class ChangePasswordViewModel {
                -changePasswordUseCase: ChangePasswordUseCase
                -getAuthErrorMessageUseCase: GetAuthErrorMessageUseCase
                +updatePassword(currentPassword: String, newPassword: String)
            }
            class ChangeNameViewModel { 
                %% Corrected from ChangNameViewModel
                -getMyProfileUseCase: GetMyProfileUseCase
                -updateNicknameUseCase: UpdateNicknameUseCase
                -checkNicknameAvailabilityUseCase: CheckNicknameAvailabilityUseCase
                +loadCurrentNickname()
                +saveNewNickname(nickname: String)
            }
            class MigrationToolViewModel {
                %% Data layer component
                -channelMigrationTool: ChannelMigrationTool 
                -projectRepository: ProjectRepository
                -channelRepository: ChannelRepository
                +startChannelMigration(projectId: String)
            }
        }
    end
    note for SettingsViewModel "메인 설정 화면 UI 로직 (로그아웃, 회원탈퇴 등)"
    note for ChangePasswordViewModel "비밀번호 변경 화면 UI 로직"
    note for ChangeNameViewModel "이름(닉네임) 변경 다이얼로그 UI 로직"
    note for MigrationToolViewModel "데이터 마이그레이션 도구 UI 로직 (개발용)"

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_UserNS {
            %% From other features, used here
            class GetCurrentUserStreamUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): Flow<CustomResult<User, Exception>>
            }
            class GetMyProfileUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): Flow<CustomResult<User, Exception>>
            }
            class UpdateNicknameUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(nickname: String): CustomResult<Unit, Exception>
            }
            class CheckNicknameAvailabilityUseCase {
                -userRepository: UserRepository
                +invoke(nickname: String): CustomResult<Boolean, Exception>
            }
            class WithdrawUserUseCase {
                -authRepository: AuthRepository
                -userRepository: UserRepository
                +invoke(): CustomResult<Unit, Exception>
            }
        }
        namespace UseCases_AuthNS {
            %% From other features, used here
            class LogoutUseCase {
                -authRepository: AuthRepository
                +invoke(): CustomResult<Unit, Exception>
            }
            class ChangePasswordUseCase {
                -authRepository: AuthRepository
                +invoke(currentPassword: String, newPassword: String): CustomResult<Unit, Exception>
            }
            class GetAuthErrorMessageUseCase {
                %% Error mapping
                +invoke(throwable: Exception): String
            }
        }

        namespace Repositories_DomainNS {
            class UserRepository { %% Defined elsewhere
                <<Interface>>
                +getUserProfile(userId: String): Flow<CustomResult<User, Exception>>
                +updateNickname(userId: String, nickname: String): CustomResult<Unit, Exception>
                +isNicknameAvailable(nickname: String): CustomResult<Boolean, Exception>
                +deleteUserAccountData(userId: String): CustomResult<Unit, Exception> %% For WithdrawUserUseCase
            }
            class AuthRepository { %% Defined elsewhere
                <<Interface>>
                +logout(): CustomResult<Unit, Exception>
                +changePassword(currentPassword: String, newPassword: String): CustomResult<Unit, Exception>
                +deleteCurrentUserAccount(): CustomResult<Unit, Exception> %% For WithdrawUserUseCase
                +getCurrentUserSession(): CustomResult<UserSession, Exception>
            }
            class ProjectRepository { %% Defined elsewhere, for MigrationTool
                <<Interface>>
                +getProjectListStream(): Flow<CustomResult<List<Project>, Exception>> %% For migration tool
            }
            class ChannelRepository { %% Defined elsewhere, for MigrationTool
                <<Interface>>
                +getAllChannelsForProject(projectId: String): Flow<CustomResult<List<Channel>, Exception>> %% For migration
            }
        }
        note for UserRepository "사용자 정보 접근 인터페이스"
        note for AuthRepository "인증 관련 작업 인터페이스"
        note for ProjectRepository "프로젝트 정보 접근 인터페이스 (마이그레이션용)"
        note for ChannelRepository "채널 정보 접근 인터페이스 (마이그레이션용)"
    end

    %% Data Layer (Repository Impl, DataSources, Other Components - Local Excluded)
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class UserRepositoryImpl {
                %% Defined elsewhere
                -userRemoteDataSource: UserRemoteDataSource
            }
            class AuthRepositoryImpl {
                %% Defined elsewhere
                -authRemoteDataSource: AuthRemoteDataSource
            }
            class ProjectRepositoryImpl {
                %% Defined elsewhere
                -projectRemoteDataSource: ProjectRemoteDataSource
                -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource
            }
            class ChannelRepositoryImpl {
                %% Defined elsewhere
                -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource
            }
        }
        note for UserRepositoryImpl "UserRepository 구현체 (Remote)"
        note for AuthRepositoryImpl "AuthRepository 구현체 (Remote)"
        note for ProjectRepositoryImpl "ProjectRepository 구현체 (Remote, 마이그레이션용)"
        note for ChannelRepositoryImpl "ChannelRepository 구현체 (Remote, 마이그레이션용)"

        namespace RemoteDataSources_DataNS {
            class UserRemoteDataSource { %% Defined elsewhere
                <<Interface>>
                +observeMyProfile(): Flow<UserDTO>
                +updateUserNickname(nickname: String): Result<Unit>
                +checkNickname(nickname: String): Result<Boolean>
                +deleteUserData(uid: String): Result<Unit>
            }
            class AuthRemoteDataSource { %% Defined elsewhere
                <<Interface>>
                +signOut(): Result<Unit>
                +updatePassword(currentPassword: String, newPassword: String): Result<Unit>
                +deleteUserAccount(): Result<Unit>
            }
            class ProjectRemoteDataSource { %% Defined elsewhere
                <<Interface>>
                +fetchAllProjectsBasic(): Flow<List<ProjectDTO>>
            }
            class ProjectChannelRemoteDataSource { %% Defined elsewhere
                <<Interface>>
                +fetchAllChannelsForProjectFromRemote(projectId: String): Flow<List<ProjectChannelDTO>>
                +migrateChannelData(projectId: String, channelId: String, newData: Any): Result<Unit> %% For migration
            }
        }
        note for UserRemoteDataSource "원격 사용자 서비스 통신"
        note for AuthRemoteDataSource "원격 인증 서비스 통신"
        note for ProjectRemoteDataSource "원격 프로젝트 서비스 통신 (마이그레이션용)"
        note for ProjectChannelRemoteDataSource "원격 프로젝트 채널 서비스 통신 (마이그레이션용)"


        namespace DataSourceImpl_DataNS {
            class UserRemoteDataSourceImpl { -firestore: FirebaseFirestore } 
            %% Defined elsewhere
            class AuthRemoteDataSourceImpl { -firebaseAuth: FirebaseAuth } 
            %% Defined elsewhere
            class ProjectRemoteDataSourceImpl { -firestore: FirebaseFirestore } 
            %% Defined elsewhere
            class ProjectChannelRemoteDataSourceImpl { -firestore: FirebaseFirestore } 
            %% Defined elsewhere
        }

        namespace DataComponents_DataNS {
            class ChannelMigrationTool {
                -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource
                %% -projectStructureLocalDataSource: ProjectStructureLocalDataSource (EXCLUDED)
                +executeMigrationForProject(projectId: String): Flow<String>
            }
        }
        note for ChannelMigrationTool "채널 데이터 마이그레이션 로직 (Data Layer)"
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase / Data Component
    SettingsViewModel ..> GetCurrentUserStreamUseCase : observes user
    SettingsViewModel ..> LogoutUseCase : performs logout
    SettingsViewModel ..> WithdrawUserUseCase : performs withdrawal

    ChangePasswordViewModel ..> ChangePasswordUseCase : uses
    ChangePasswordViewModel ..> GetAuthErrorMessageUseCase : handles errors

    ChangeNameViewModel ..> GetMyProfileUseCase : loads profile
    ChangeNameViewModel ..> UpdateNicknameUseCase : updates nickname
    ChangeNameViewModel ..> CheckNicknameAvailabilityUseCase : checks nickname

    MigrationToolViewModel ..> ChannelMigrationTool : uses tool
    MigrationToolViewModel ..> ProjectRepository : reads project data for migration
    MigrationToolViewModel ..> ChannelRepository : reads channel data for migration

    %% UseCase -> Repository Interface
    GetCurrentUserStreamUseCase ..> UserRepository : accesses
    GetMyProfileUseCase ..> UserRepository : accesses
    UpdateNicknameUseCase ..> UserRepository : accesses
    CheckNicknameAvailabilityUseCase ..> UserRepository : accesses
    WithdrawUserUseCase ..> AuthRepository : for auth actions
    WithdrawUserUseCase ..> UserRepository : for user data deletion
    LogoutUseCase ..> AuthRepository : accesses
    ChangePasswordUseCase ..> AuthRepository : accesses

    %% Repository Implementation -> Repository Interface
    UserRepository <|.. UserRepositoryImpl : implements
    AuthRepository <|.. AuthRepositoryImpl : implements
    ProjectRepository <|.. ProjectRepositoryImpl : implements
    ChannelRepository <|.. ChannelRepositoryImpl : implements

    %% Repository Implementation -> DataSource Interface (Remote Only)
    UserRepositoryImpl ..> UserRemoteDataSource : uses
    AuthRepositoryImpl ..> AuthRemoteDataSource : uses
    ProjectRepositoryImpl ..> ProjectRemoteDataSource : uses
    ProjectRepositoryImpl ..> ProjectChannelRemoteDataSource : uses %% For migration-related project data
    ChannelRepositoryImpl ..> ProjectChannelRemoteDataSource : uses %% For migration-related channel data

    %% DataSource Implementation -> DataSource Interface
    UserRemoteDataSource <|.. UserRemoteDataSourceImpl : implements
    AuthRemoteDataSource <|.. AuthRemoteDataSourceImpl : implements
    ProjectRemoteDataSource <|.. ProjectRemoteDataSourceImpl : implements
    ProjectChannelRemoteDataSource <|.. ProjectChannelRemoteDataSourceImpl : implements

    %% Data Component -> DataSource Interface
    ChannelMigrationTool ..> ProjectChannelRemoteDataSource : uses for remote migration steps