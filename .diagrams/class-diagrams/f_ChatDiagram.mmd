classDiagram
    title Chat Feature Architecture
    %% This diagram outlines the Chat feature's architecture, following a layered approach:
    %% Feature (ViewModels) -> Domain (UseCases, Repository Interfaces) -> Data (Repository Implementations, DataSources).
    %% Data Flow: External services (e.g., Firebase Firestore for messages, Firebase Storage for attachments) are accessed by DataSource Implementations,
    %% which are abstracted by DataSource Interfaces. Repository Implementations use these DataSource Interfaces
    %% (e.g., MessageRepositoryImpl uses MessageRemoteDataSource and MessageAttachmentRemoteDataSource).
    %% Repositories are abstracted by Repository Interfaces. UseCases consume Repository Interfaces to manage business logic.
    %% ViewModels use UseCases to handle UI state, user interactions, and prepare data for the UI.
    %% UI (Activities/Fragments/Composables) would observe ViewModels for state changes.

    %% Feature Layer (ViewModels)
    %% ViewModels manage UI logic and state, interacting with UseCases for data and operations.
    %% UI models are implicitly managed, often as StateFlow/LiveData exposed to the UI, representing combined chat data.
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_ChatNS {
            class ChatViewModel {
                -getMessagesStreamUseCase: GetMessagesStreamUseCase
                -fetchPastMessagesUseCase: FetchPastMessagesUseCase
                -sendMessageUseCase: SendMessageUseCase
                -editMessageUseCase: EditMessageUseCase
                -deleteMessageUseCase: DeleteMessageUseCase
                -getChannelUseCase: GetChannelUseCase
                -getCurrentUserUseCase: GetCurrentUserUseCase
                -getUserInfoUseCase: GetUserInfoUseCase
                -checkChannelPermissionUseCase: CheckChannelPermissionUseCase
                +loadInitialMessages(channelId: String)
                +loadMoreMessages()
                +sendTextMessage(text: String)
                +sendImageMessage(imageUri: Uri)
                +editUserMessage(messageId: String, newText: String)
                +deleteUserMessage(messageId: String)
                +loadChannelInfo(channelId: String)
            }
        }
    end
    %% note for ChatViewModel "채팅 화면의 메시지 및 채널 정보 관리, 사용자 상호작용 처리" (Covered by new note)

    %% Domain Layer (UseCases & Repository Interfaces)
    %% UseCases contain specific chat-related business logic (e.g., sending a message, fetching messages).
    %% Repository Interfaces (e.g., MessageRepository, ChannelRepository) define contracts for accessing chat data,
    %% abstracting how and where data is stored. Domain models (Message, Channel, User) are used here.
    subgraph Domain Layer
        direction LR
        namespace UseCases_MessageNS {
            class GetMessagesStreamUseCase
            class FetchPastMessagesUseCase
            class SendMessageUseCase
            class EditMessageUseCase
            class DeleteMessageUseCase
        }
        namespace UseCases_ChannelNS {
            class GetChannelUseCase
        }
        namespace UseCases_UserNS {
            class GetCurrentUserUseCase
            class GetUserInfoUseCase
        }
        namespace UseCases_PermissionNS {
            class CheckChannelPermissionUseCase
        }

        namespace Repositories_DomainNS {
            class MessageRepository {
                <<Interface>>
                +getMessagesStream(channelId: String): Flow<List<Message>>
                +fetchPastMessages(channelId: String, lastMessageTimestamp: Long?): Result<List<Message>>
                +sendMessage(channelId: String, message: Message): Result<Unit>
                +editMessage(channelId: String, messageId: String, newText: String): Result<Unit>
                +deleteMessage(channelId: String, messageId: String): Result<Unit>
                +uploadMessageAttachment(channelId: String, attachmentUri: Uri): Result<String>
            }
            class ChannelRepository {
                <<Interface>>
                +getChannelDetails(channelId: String): Flow<Channel?>
            }
            class UserRepository { <<Interface>> }
            class ProjectRepository { <<Interface>> }
            class RoleRepository { <<Interface>> }
        }
    end

    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class MessageRepositoryImpl {
                -messageRemoteDataSource: MessageRemoteDataSource
                -messageAttachmentRemoteDataSource: MessageAttachmentRemoteDataSource
            }
            class ChannelRepositoryImpl {
                -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource
                -dmChannelRemoteDataSource: DMChannelRemoteDataSource
            }
            class UserRepositoryImpl {

            }
            class ProjectRepositoryImpl {

            }
            class RoleRepositoryImpl {

            }
        }

        namespace RemoteDataSources_DataNS {
            class MessageRemoteDataSource { <<Interface>>
                +observeMessages(channelId: String): Flow<List<MessageDTO>>
                +fetchOldMessages(channelId: String, lastTimestamp: Long?): Result<List<MessageDTO>>
                +postMessage(channelId: String, messageDTO: MessageDTO): Result<Unit>
                +updateMessage(channelId: String, messageId: String, newText: String): Result<Unit>
                +removeMessage(channelId: String, messageId: String): Result<Unit>
            }
            class MessageAttachmentRemoteDataSource { <<Interface>>
                +uploadAttachment(channelId: String, attachmentUri: Uri): Result<String> %% Returns URL
            }
            class ProjectChannelRemoteDataSource { <<Interface>>
                 +getChannelInfo(channelId: String): Flow<ProjectChannelDTO?>
            }
            class DMChannelRemoteDataSource { <<Interface>>
                +getDmChannelInfo(channelId: String): Flow<DMChannelDTO?>
            }
            class UserRemoteDataSource { <<Interface>> }
            class ProjectRemoteDataSource { <<Interface>> }
            class RoleRemoteDataSource { <<Interface>> }
        }

        namespace DataSourceImpl_DataNS {
            class MessageRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class MessageAttachmentRemoteDataSourceImpl { -firebaseStorage: FirebaseStorage }
            class ProjectChannelRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class DMChannelRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class UserRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class ProjectRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class RoleRemoteDataSourceImpl { -firestore: FirebaseFirestore }
        }
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase
    ChatViewModel ..> GetMessagesStreamUseCase : observes messages
    ChatViewModel ..> FetchPastMessagesUseCase : loads history
    ChatViewModel ..> SendMessageUseCase : sends message
    ChatViewModel ..> EditMessageUseCase : edits message
    ChatViewModel ..> DeleteMessageUseCase : deletes message
    ChatViewModel ..> GetChannelUseCase : gets channel info
    ChatViewModel ..> GetCurrentUserUseCase : gets current user
    ChatViewModel ..> GetUserInfoUseCase : gets participant info
    ChatViewModel ..> CheckChannelPermissionUseCase : checks permissions

    %% UseCase -> Repository Interface
    GetMessagesStreamUseCase ..> MessageRepository : accesses
    FetchPastMessagesUseCase ..> MessageRepository : accesses
    SendMessageUseCase ..> MessageRepository : for sending and possibly uploading attachment
    SendMessageUseCase ..> UserRepository : for sender info
    EditMessageUseCase ..> MessageRepository : accesses
    DeleteMessageUseCase ..> MessageRepository : accesses
    GetChannelUseCase ..> ChannelRepository : accesses
    GetCurrentUserUseCase ..> UserRepository : accesses
    GetUserInfoUseCase ..> UserRepository : accesses
    CheckChannelPermissionUseCase ..> UserRepository : for user roles
    CheckChannelPermissionUseCase ..> ProjectRepository : for project context
    CheckChannelPermissionUseCase ..> RoleRepository : for role permissions
    CheckChannelPermissionUseCase ..> ChannelRepository : for channel type

    %% Repository Implementation -> Repository Interface
    MessageRepository <|.. MessageRepositoryImpl : implements
    ChannelRepository <|.. ChannelRepositoryImpl : implements
    UserRepository <|.. UserRepositoryImpl : implements
    ProjectRepository <|.. ProjectRepositoryImpl : implements
    RoleRepository <|.. RoleRepositoryImpl : implements

    %% Repository Implementation -> DataSource Interface (Remote Only)
    MessageRepositoryImpl ..> MessageRemoteDataSource : uses
    MessageRepositoryImpl ..> MessageAttachmentRemoteDataSource : for attachments
    ChannelRepositoryImpl ..> ProjectChannelRemoteDataSource : for project channels
    ChannelRepositoryImpl ..> DMChannelRemoteDataSource : for DMs
    UserRepositoryImpl ..> UserRemoteDataSource : uses
    ProjectRepositoryImpl ..> ProjectRemoteDataSource : uses
    RoleRepositoryImpl ..> RoleRemoteDataSource : uses

    %% DataSource Implementation -> DataSource Interface
    MessageRemoteDataSource <|.. MessageRemoteDataSourceImpl : implements
    MessageAttachmentRemoteDataSource <|.. MessageAttachmentRemoteDataSourceImpl : implements
    ProjectChannelRemoteDataSource <|.. ProjectChannelRemoteDataSourceImpl : implements
    DMChannelRemoteDataSource <|.. DMChannelRemoteDataSourceImpl : implements
    UserRemoteDataSource <|.. UserRemoteDataSourceImpl : implements
    ProjectRemoteDataSource <|.. ProjectRemoteDataSourceImpl : implements
    RoleRemoteDataSource <|.. RoleRemoteDataSourceImpl : implements