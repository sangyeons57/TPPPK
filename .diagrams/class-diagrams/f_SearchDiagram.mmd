classDiagram
    title Search Feature Architecture

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_SearchNS {
            class SearchViewModel {
                -searchUseCase: SearchUseCase
                +onQueryChange(newQuery: String)
                +onScopeChange(newScope: SearchScope)
                +performSearch()
                +onResultItemClick(item: SearchResultItem)
            }
        }
    end

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_SearchNS {
            class SearchUseCase {
                -searchRepository: SearchRepository
                +invoke(query: String, scope: SearchScope): Result<List<SearchResultItem>>
            }
        }
        namespace UseCases_UserNS { %% Existing separate user search
            class SearchUserByNameUseCase {
                -userRepository: UserRepository
                +invoke(nameQuery: String): CustomResult<List<User>, Exception>
            }
        }

        namespace Repositories_DomainNS {
            class SearchRepository {
                <<Interface>>
                +search(query: String, scope: SearchScope): Result<List<SearchResult>> %% SearchResult is a domain model
            }
            class UserRepository {
                <<Interface>>
                +searchUsersByName(name: String, limit: Int): CustomResult<List<User>, Exception>
            }
            %% Potentially ProjectRepository, MessageRepository if SearchRepository covers them
            class ProjectRepository { <<Interface>> }
            class MessageRepository { <<Interface>> }
        }
    end

    %% Data Layer (Repository Implementation & Remote DataSources)
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class SearchRepositoryImpl {
                <<Missing Implementation>>
                %% -userRemoteDataSource: UserRemoteDataSource
                %% -projectRemoteDataSource: ProjectRemoteDataSource
                %% -messageRemoteDataSource: MessageRemoteDataSource
                %% OR
                %% -searchRemoteDataSource: SearchRemoteDataSource (if a generic one)
            }
            class UserRepositoryImpl {
                -userRemoteDataSource: UserRemoteDataSource
            }
            class ProjectRepositoryImpl { /* ... */ }
            class MessageRepositoryImpl { /* ... */ }
        }

        namespace RemoteDataSources_DataNS {
            class UserRemoteDataSource { <<Interface>> }
            class ProjectRemoteDataSource { <<Interface>> }
            class MessageRemoteDataSource { <<Interface>> }
            %% class SearchRemoteDataSource { <<Interface>> } %% If a generic one exists
        }

        namespace DataSourceImpl_DataNS {
            class UserRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class ProjectRemoteDataSourceImpl { /* ... */ }
            class MessageRemoteDataSourceImpl { /* ... */ }
            %% class SearchRemoteDataSourceImpl { /* ... */ } %% If a generic one exists
        }
    end

    %% ===== Relationships =====
    ViewModels_SearchNS.SearchViewModel ..> UseCases_SearchNS.SearchUseCase : uses

    UseCases_SearchNS.SearchUseCase ..> Repositories_DomainNS.SearchRepository : accesses
    UseCases_UserNS.SearchUserByNameUseCase ..> Repositories_DomainNS.UserRepository : accesses

    Repositories_DomainNS.SearchRepository <|.. RepositoryImpl_DataNS.SearchRepositoryImpl : (is implemented by)
    Repositories_DomainNS.UserRepository <|.. RepositoryImpl_DataNS.UserRepositoryImpl : implements

    RepositoryImpl_DataNS.UserRepositoryImpl ..> RemoteDataSources_DataNS.UserRemoteDataSource : uses

    RemoteDataSources_DataNS.UserRemoteDataSource <|.. DataSourceImpl_DataNS.UserRemoteDataSourceImpl : implements

    note for RepositoryImpl_DataNS.SearchRepositoryImpl "SearchRepositoryImpl.kt not found in data/repository. \nActual data sources for search are TBD."
    note "Diagram focuses on the main SearchUseCase flow. \nUser search via SearchUserByNameUseCase is also possible but not directly used by SearchViewModel."
    note "Project and Message search capabilities are implied by SearchScope and SearchResult domain models, but their implementations are not detailed due to missing SearchRepositoryImpl."
