classDiagram
    title Auth Feature Architecture

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_AuthNS {
            class SplashViewModel {
                -checkAuthenticationStatusUseCase: CheckAuthenticationStatusUseCase
                +retry()
            }
            class LoginViewModel {
                -loginUseCase: LoginUseCase
                -getAuthErrorMessageUseCase: GetAuthErrorMessageUseCase
                +onEmailChange(email: String)
                +onPasswordChange(password: String)
                +onLoginClick()
                +onFindPasswordClick()
                +onSignUpClick()
            }
            class SignUpViewModel {
                -signUpUseCase: SignUpUseCase
                -checkNicknameAvailabilityUseCase: CheckNicknameAvailabilityUseCase
                -sendEmailVerificationUseCase: SendEmailVerificationUseCase
                -getAuthErrorMessageUseCase: GetAuthErrorMessageUseCase
                +signUp()
                +onEmailChange(email: String)
                +onPasswordChange(password: String)
                +onNameChange(name: String)
                +onTermsOfServiceClick()
                +onPrivacyPolicyClick()
            }
            class FindPasswordViewModel {
                -requestPasswordResetUseCase: RequestPasswordResetUseCase
                -getAuthErrorMessageUseCase: GetAuthErrorMessageUseCase
                +onEmailChange(email: String)
                +requestPasswordResetEmail()
                +onDoneClicked()
                +onBackClick()
            }
            class TermsOfServiceViewModel {
                +onBackClick()
            }
            class PrivacyPolicyViewModel {
                +onBackClick()
            }
        }
    end
    note for SplashViewModel "Handles splash screen logic and navigation based on auth status."
    note for LoginViewModel "Handles login screen UI logic and user authentication."
    note for SignUpViewModel "Handles sign-up screen UI logic, user registration, and email verification."
    note for FindPasswordViewModel "Handles find password screen UI logic and password reset requests."
    note for TermsOfServiceViewModel "Displays terms of service."
    note for PrivacyPolicyViewModel "Displays privacy policy."

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_AuthNS {
            class CheckAuthenticationStatusUseCase {
                -authRepository: AuthRepository
                +invoke(): Result<Pair<Boolean, Boolean>>
            }
            class CheckEmailVerificationUseCase {
                -authRepository: AuthRepository
                +invoke(): CustomResult<Boolean, Exception>
            }
            class LoginUseCase {
                -authRepository: AuthRepository
                +invoke(email: String, password: String): CustomResult<UserSession, Exception>
            }
            class GetAuthErrorMessageUseCase {
                +invoke(exception: Exception): String
                +invoke(errorCode: String): String
                +invoke(errorType: AuthErrorType): String
            }
            class SignUpUseCase {
                -authRepository: AuthRepository
                -userRepository: UserRepository
                +invoke(email: String, password: String, nickname: String, consentTimeStamp: Instant): CustomResult<User, Exception>
            }
            class SendEmailVerificationUseCase {
                -authRepository: AuthRepository
                +invoke(): CustomResult<Unit, Exception>
            }
            class RequestEmailVerificationAfterSignUpUseCase {
                -authRepository: AuthRepository
                +invoke(): CustomResult<Unit, Exception>
            }
            class RequestPasswordResetUseCase {
                -authRepository: AuthRepository
                +invoke(email: String): CustomResult<Unit, Exception>
            }
        }
        namespace UseCases_UserNS {
            class CheckNicknameAvailabilityUseCase {
                -userRepository: UserRepository
                +invoke(nickname: String): CustomResult<Boolean, Exception>
            }
        }

        namespace Repositories_DomainNS {
            class AuthRepository {
                <<Interface>>
                +login(email: String, password: String): CustomResult<UserSession, Exception>
                +isLoggedIn(): Boolean
                +getCurrentUserId(): CustomResult<String, Exception>
                +logout(): CustomResult<Unit, Exception>
                +signup(email: String, password: String): CustomResult<String, Exception>
                +requestPasswordResetCode(email: String): CustomResult<Unit, Exception>
                +sendEmailVerification(): CustomResult<Unit, Exception>
                +checkEmailVerification(): CustomResult<Boolean, Exception>
                +getCurrentUserSession(): CustomResult<UserSession, Exception>
                +getUserSessionStream(): Flow<CustomResult<UserSession, Exception>>
            }
            class UserRepository {
                <<Interface>>
                +checkNicknameAvailability(nickname: String): CustomResult<Boolean, Exception>
                +createUserProfile(user: User): CustomResult<Unit, Exception>
                +getUserStream(userId: String): Flow<CustomResult<User, Exception>>
            }
        }
        note for AuthRepository "Interface for authentication data operations."
        note for UserRepository "Interface for user profile data operations (relevant parts for Auth)."
    end

    %% Data Layer (Repository Implementation & Remote DataSources - Local Excluded)
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class AuthRepositoryImpl {
                -authRemoteDataSource: AuthRemoteDataSource
                -firebaseAuth: FirebaseAuth
                -authWrapper: FirebaseAuthWrapper
            }
            class UserRepositoryImpl {
                -userRemoteDataSource: UserRemoteDataSource
                -mediaRepository: MediaRepository
            }
        }
        note for AuthRepositoryImpl "Implementation of AuthRepository using remote data source."
        note for UserRepositoryImpl "Implementation of UserRepository using remote data source."

        namespace RemoteDataSources_DataNS {
            class AuthRemoteDataSource {
                <<Interface>>
                +observeAuthState(): Flow<CustomResult<FirebaseUser, Exception>>
                +getCurrentUser(): CustomResult<FirebaseUser, Exception>
                +getCurrentUserId(): String?
                +signUp(email: String, password: String): CustomResult<String, Exception>
                +signIn(email: String, password: String): CustomResult<String, Exception>
                +signOut(): CustomResult<Unit, Exception>
                +requestPasswordResetCode(email: String): CustomResult<Unit, Exception>
                +sendEmailVerification(): CustomResult<Unit, Exception>
                +checkEmailVerification(): CustomResult<Boolean, Exception>
            }
            class UserRemoteDataSource {
                <<Interface>>
                +observeUser(userId: String): Flow<CustomResult<UserDTO, Exception>>
                +createUser(user: UserDTO): CustomResult<Unit, Exception>
                +checkNicknameAvailability(nickname: String): CustomResult<Boolean, Exception>
                +getMyUserInfo(): CustomResult<UserDTO, Exception>
            }
        }
        note for AuthRemoteDataSource "Interface for remote authentication operations (e.g., Firebase Auth)."
        note for UserRemoteDataSource "Interface for remote user data operations (e.g., Firestore, relevant for Auth)."

        namespace DataSourceImpl_DataNS {
            class AuthRemoteDataSourceImpl {
                -firebaseAuth: FirebaseAuth
            }
            class UserRemoteDataSourceImpl {
                -firebaseAuth: FirebaseAuth
                -firestore: FirebaseFirestore
                -storage: FirebaseStorage
            }
        }
        note for AuthRemoteDataSourceImpl "Implementation of AuthRemoteDataSource using FirebaseAuth."
        note for UserRemoteDataSourceImpl "Implementation of UserRemoteDataSource using Firestore and FirebaseStorage."
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase
    ViewModels_AuthNS.SplashViewModel ..> UseCases_AuthNS.CheckAuthenticationStatusUseCase : uses
    ViewModels_AuthNS.LoginViewModel ..> UseCases_AuthNS.LoginUseCase : uses
    ViewModels_AuthNS.LoginViewModel ..> UseCases_AuthNS.GetAuthErrorMessageUseCase : uses
    ViewModels_AuthNS.SignUpViewModel ..> UseCases_AuthNS.SignUpUseCase : uses
    ViewModels_AuthNS.SignUpViewModel ..> UseCases_UserNS.CheckNicknameAvailabilityUseCase : uses
    ViewModels_AuthNS.SignUpViewModel ..> UseCases_AuthNS.SendEmailVerificationUseCase : uses
    ViewModels_AuthNS.SignUpViewModel ..> UseCases_AuthNS.GetAuthErrorMessageUseCase : uses
    ViewModels_AuthNS.FindPasswordViewModel ..> UseCases_AuthNS.RequestPasswordResetUseCase : uses
    ViewModels_AuthNS.FindPasswordViewModel ..> UseCases_AuthNS.GetAuthErrorMessageUseCase : uses

    %% UseCase -> Repository Interface
    UseCases_AuthNS.CheckAuthenticationStatusUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_AuthNS.CheckEmailVerificationUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_AuthNS.LoginUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_AuthNS.SignUpUseCase ..> Repositories_DomainNS.AuthRepository : for auth operations
    UseCases_AuthNS.SignUpUseCase ..> Repositories_DomainNS.UserRepository : for profile creation
    UseCases_AuthNS.SendEmailVerificationUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_AuthNS.RequestEmailVerificationAfterSignUpUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_AuthNS.RequestPasswordResetUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.CheckNicknameAvailabilityUseCase ..> Repositories_DomainNS.UserRepository : accesses

    %% Repository Implementation -> Repository Interface
    Repositories_DomainNS.AuthRepository <|.. RepositoryImpl_DataNS.AuthRepositoryImpl : implements
    Repositories_DomainNS.UserRepository <|.. RepositoryImpl_DataNS.UserRepositoryImpl : implements

    %% Repository Implementation -> DataSource Interface (Remote Only)
    RepositoryImpl_DataNS.AuthRepositoryImpl ..> RemoteDataSources_DataNS.AuthRemoteDataSource : uses
    RepositoryImpl_DataNS.UserRepositoryImpl ..> RemoteDataSources_DataNS.UserRemoteDataSource : uses

    %% DataSource Implementation -> DataSource Interface
    RemoteDataSources_DataNS.AuthRemoteDataSource <|.. DataSourceImpl_DataNS.AuthRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.UserRemoteDataSource <|.. DataSourceImpl_DataNS.UserRemoteDataSourceImpl : implements
