classDiagram
    title Auth Feature Architecture
    %% This diagram illustrates the architecture of the Authentication feature,
    %% following a layered approach: Feature (ViewModels) -> Domain (UseCases, Repository Interfaces) -> Data (Repository Implementations, DataSources).
    %% Data Flow: External services (e.g., Firebase Auth, Firestore) are accessed by DataSource Implementations,
    %% which are abstracted by DataSource Interfaces. Repository Implementations use these DataSource Interfaces
    %% and are themselves abstracted by Repository Interfaces. UseCases consume Repository Interfaces to orchestrate
    %% domain logic, and ViewModels use UseCases to manage UI state and handle user interactions.
    %% UI (Activities/Fragments/Composables) would observe ViewModels.

    %% Feature Layer (ViewModels)
    %% ViewModels are responsible for preparing and managing data for the UI.
    %% They interact with UseCases to get data and process user actions.
    %% UI models are implicitly managed here, often as StateFlow/LiveData exposed to the UI.
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_AuthNS {
            class SplashViewModel {
                -checkSessionUseCase: CheckSessionUseCase
                -checkAuthStatusUseCase: CheckAuthenticationStatusUseCase
                +onAppStart()
            }

            class LoginViewModel {
                -loginUseCase: LoginUseCase
                -getAuthErrorMessageUseCase: GetAuthErrorMessageUseCase
                +login(email, password)
            }

            class SignUpViewModel {
                -signUpUseCase: SignUpUseCase
                -checkNicknameAvailabilityUseCase: CheckNicknameAvailabilityUseCase
                -sendEmailVerificationUseCase: SendEmailVerificationUseCase
                -getAuthErrorMessageUseCase: GetAuthErrorMessageUseCase
                +signUp(email, password, nickname)
                +sendVerificationEmail()
            }

            class FindPasswordViewModel {
                -requestPasswordResetUseCase: RequestPasswordResetUseCase
                -verifyPasswordResetCodeUseCase: VerifyPasswordResetCodeUseCase
                -resetPasswordUseCase: ResetPasswordUseCase
                -getAuthErrorMessageUseCase: GetAuthErrorMessageUseCase
                +requestPasswordReset(email)
                +verifyCodeAndResetPassword(code, newPassword)
            }
        }
    end
    %% Existing notes provide basic descriptions, new notes aim to elaborate on roles and flow.
    %% note for SplashViewModel "스플래시 화면 UI 로직 및 세션 확인"
    %% note for LoginViewModel "로그인 화면 UI 로직"
    %% note for SignUpViewModel "회원가입 화면 UI 로직"
    %% note for FindPasswordViewModel "비밀번호 찾기 화면 UI 로직"
    %% note for TermsOfServiceViewModel "서비스 이용약관 표시"
    %% note for PrivacyPolicyViewModel "개인정보처리방침 표시"

    %% Domain Layer (UseCases & Repository Interfaces)
    %% UseCases encapsulate specific business logic operations. They are called by ViewModels.
    %% Repository Interfaces define contracts for data access, abstracting the Data layer.
    %% Domain models are used here, representing core business entities/data structures.
    subgraph Domain Layer
        direction LR
        namespace UseCases_AuthNS {
            class CheckSessionUseCase {
                +invoke(): CustomResult < UserSession, Exception >
            }
            class CheckAuthenticationStatusUseCase {
                +invoke(): CustomResult < Pair<Boolean, Boolean>, Exception >
            }
            class LoginUseCase {
                +invoke(email: String, password: String): CustomResult< UserSession, Exception>
            }
            class GetAuthErrorMessageUseCase {
                +invoke(errorCode: String): String
                +invoke(errorType: AuthErrorType): String
                +invoke(exception: Exception): String
                +getLoginErrorMessage(exception: Exception): String
                +getSignUpErrorMessage(exception: Exception): String
            }
            class SignUpUseCase {
                +invoke(email: String, password: String, nickname: String, consentTimeStamp: Instant): CustomResult<User, Exception>
            }
            class SendEmailVerificationUseCase {
                +invoke(): CustomResult< Unit, Exception >
            }
            class RequestPasswordResetUseCase {
                +invoke(email: String): CustomResult< Unit, Exception >
            }
            class ValidatePasswordResetCodeUseCase {
                +invoke(code: String): Boolean
            }
            class LogoutUseCase {
                +invoke(): CustomResult< Unit, Exception >
            }
            class CheckEmailVerificationUseCase {
                +invoke(): CustomResult< Boolean, Exception >
            }
            class ValidateEmailFormatUseCase {
                +invoke(email: String): Boolean
            }
            class ValidatePasswordFormatUseCase {
                +invoke(password: String): Boolean
            }
            class ValidateEmailForSignUpUseCase {
                +invoke(email: String): Boolean
            }
            class ValidatePasswordForSignUpUseCase {
                +invoke(password: String): Boolean
            }
            class ValidateNicknameForSignUpUseCase {
                +invoke(nickname: String): Boolean
            }
            class ValidateNewPasswordUseCase {
                +invoke(password: String): Boolean
            }
            class RequestEmailVerificationAfterSignUpUseCase {
                +invoke(): CustomResult<Unit, Exception>
            }
        }
        namespace UseCases_UserNS {
            class CheckNicknameAvailabilityUseCase {
                +invoke(nickname: String): CustomResult<Boolean, Exception>
            }
        }

        namespace Repositories_DomainNS {
            class AuthRepository {
                <<Interface>>
                +getCurrentUserSession(): CustomResult<UserSession, Exception>
                +isLoggedIn(): Boolean
                +isEmailVerified(): Boolean
                +login(email: String, password: String): CustomResult<UserSession, Exception>
                +signUp(email: String, password: String): CustomResult<String, Exception> %% Returns UID
                +sendEmailVerification(): CustomResult<Unit, Exception>
                +requestPasswordReset(email: String): CustomResult<Unit, Exception>
                +verifyPasswordResetCode(code: String): CustomResult<String, Exception> %% Returns email
                +resetPassword(code: String, newPassword: String): CustomResult<Unit, Exception>
                +logout(): CustomResult<Unit, Exception>
                +getCurrentUserId(): String?
            }

            class UserRepository {
                <<Interface>>
                +isNicknameAvailable(nickname: String): CustomResult<Boolean, Exception>
                +createUserProfile(uid: String, email: String, nickname: String, consentTimeStamp: Instant): CustomResult<Unit, Exception>
                +getUserById(userId: String): CustomResult<User, Exception>
            }
        }
        %% note for UserRepository "사용자 데이터 접근 추상화 인터페이스 (Auth에서 일부 사용)" (Covered by new note)
    end

    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class AuthRepositoryImpl {
                -authRemoteDataSource: AuthRemoteDataSource
            }
            class UserRepositoryImpl {
                -userRemoteDataSource: UserRemoteDataSource
            }
        }

        namespace RemoteDataSources_DataNS {
            class AuthRemoteDataSource {
                <<Interface>>
                +login(email: String, password: String): CustomResult<UserSessionDTO, Exception>
                +signUp(email: String, password: String): CustomResult<String, Exception> %% UID
                +sendEmailVerification(): CustomResult<Unit, Exception>
                +requestPasswordReset(email: String): CustomResult<Unit, Exception>
                +verifyPasswordResetCode(code: String): CustomResult<String, Exception> %% email
                +resetPasswordWithCode(code: String, newPassword: String): CustomResult<Unit, Exception>
                +logout(): CustomResult<Unit, Exception>
                +getCurrentUserSession(): CustomResult<UserSessionDTO, Exception>
                +isLoggedIn(): Boolean
                +isEmailVerified(): Boolean
                +getCurrentUserId(): String?
            }
            class UserRemoteDataSource {
                <<Interface>>
                +isNicknameAvailable(nickname: String): CustomResult<Boolean, Exception>
                +createUser(userDto: UserDTO): CustomResult<Unit, Exception>
                +getUserById(userId: String): CustomResult<UserDTO, Exception>
            }
        }
        %% note for AuthRemoteDataSource "원격 인증 서비스(Firebase Auth) 통신" (Covered)
        %% note for UserRemoteDataSource "원격 사용자 데이터 서비스(Firestore) 통신 (Auth에서 사용되는 부분)" (Covered)

        namespace DataSourceImpl_DataNS {
            class AuthRemoteDataSourceImpl {
                -firebaseAuth: FirebaseAuth
            }
            class UserRemoteDataSourceImpl {
                -firestore: FirebaseFirestore
            }
        }
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase
    SplashViewModel ..> CheckSessionUseCase : uses
    SplashViewModel ..> CheckAuthenticationStatusUseCase : uses
    LoginViewModel ..> LoginUseCase : uses
    LoginViewModel ..> GetAuthErrorMessageUseCase : uses
    LoginViewModel ..> ValidateEmailFormatUseCase : uses
    LoginViewModel ..> ValidatePasswordFormatUseCase : uses
    SignUpViewModel ..> SignUpUseCase : uses
    SignUpViewModel ..> CheckNicknameAvailabilityUseCase : uses
    SignUpViewModel ..> SendEmailVerificationUseCase : uses
    SignUpViewModel ..> GetAuthErrorMessageUseCase : uses
    SignUpViewModel ..> ValidateEmailForSignUpUseCase : uses
    SignUpViewModel ..> ValidatePasswordForSignUpUseCase : uses
    SignUpViewModel ..> ValidateNicknameForSignUpUseCase : uses
    FindPasswordViewModel ..> RequestPasswordResetUseCase : uses
    FindPasswordViewModel ..> ValidatePasswordResetCodeUseCase : uses
    FindPasswordViewModel ..> ValidateNewPasswordUseCase : uses
    FindPasswordViewModel ..> GetAuthErrorMessageUseCase : uses

    %% UseCase -> Repository Interface
    CheckSessionUseCase ..> AuthRepository : accesses
    CheckAuthenticationStatusUseCase ..> AuthRepository : accesses
    LoginUseCase ..> AuthRepository : accesses
    SignUpUseCase ..> AuthRepository : for auth operations
    SignUpUseCase ..> UserRepository : for profile creation
    SendEmailVerificationUseCase ..> AuthRepository : accesses
    RequestPasswordResetUseCase ..> AuthRepository : accesses
    ValidatePasswordResetCodeUseCase ..> AuthRepository : accesses
    CheckNicknameAvailabilityUseCase ..> UserRepository : accesses
    LogoutUseCase ..> AuthRepository : accesses
    CheckEmailVerificationUseCase ..> AuthRepository : accesses
    RequestEmailVerificationAfterSignUpUseCase ..> AuthRepository : accesses
    ValidateNicknameForSignUpUseCase ..> UserRepository : for nickname validation
    GetAuthErrorMessageUseCase ..> AuthRepository : for error mapping
    
    %% UseCase -> UseCase relationships (for validation chains)
    ValidateEmailForSignUpUseCase ..> ValidateEmailFormatUseCase : uses
    
    %% Repository Implementation -> Repository Interface
    %% Repository Implementation -> Repository Interface
    AuthRepository <|.. AuthRepositoryImpl : implements
    UserRepository <|.. UserRepositoryImpl : implements

    %% Repository Implementation -> DataSource Interface (Remote Only)
    AuthRepositoryImpl ..> AuthRemoteDataSource : uses
    UserRepositoryImpl ..> UserRemoteDataSource : uses

    %% DataSource Implementation -> DataSource Interface
    AuthRemoteDataSource <|.. AuthRemoteDataSourceImpl : implements
    UserRemoteDataSource <|.. UserRemoteDataSourceImpl : implements
