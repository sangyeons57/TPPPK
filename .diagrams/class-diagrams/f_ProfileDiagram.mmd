classDiagram
    title Profile Feature Architecture

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_ProfileNS {
            class EditProfileViewModel {
                -getCurrentUserUseCase: GetCurrentUserStreamUseCase  %% Renamed from GetMyProfileUseCase in diagram
                -updateUserProfileUseCase: UpdateUserProfileUseCase
                -uploadProfileImageUseCase: UploadProfileImageUseCase
                +loadUserProfile()
                +onNameChanged(newName: String)
                +onProfileImageClicked()
                +handleImageSelection(uri: Uri?)
                +onSaveProfileClicked()
            }
            class ChangeStatusViewModel {
                -getCurrentStatusUseCase: GetCurrentStatusUseCase
                -updateUserStatusUseCase: UpdateUserStatusUseCase
                +loadCurrentStatus()
                +onStatusSelected(status: UserStatus)
                +updateStatus()
            }
            class ProfileImageViewModel {
                -uploadProfileImageUseCase: UploadProfileImageUseCase
                +uploadProfileImage(imageUri: Uri)
            }
        }
    end

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_UserNS {
            class GetCurrentUserStreamUseCase {
                -authRepository: AuthRepository
                -userRepository: UserRepository
                +invoke(): Flow<CustomResult<User, Exception>>
            }
            class UpdateUserProfileUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(params: UpdateUserProfileParams): CustomResult<User, Exception>
            }
            class UpdateNicknameUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(newNickname: String): CustomResult<User, Exception>
            }
            class CheckNicknameAvailabilityUseCase {
                -userRepository: UserRepository
                +invoke(nickname: String): CustomResult<Boolean, Exception>
            }
            class UploadProfileImageUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                -context: Context
                +invoke(imageUri: Uri): CustomResult<User, Exception>
            }
            class RemoveProfileImageUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): CustomResult<Unit, Exception>
            }
            class UpdateUserImageUseCase {
                <<Interface>>
                +invoke(imageUri: Uri): Result<String>
            }
            class UpdateUserImageUseCaseImpl {
                -userRepository: UserRepository
                +invoke(imageUri: Uri): Result<String>
            }
            class GetCurrentStatusUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): Flow<CustomResult<UserStatus, Exception>>
            }
            class UpdateUserStatusUseCase {
                <<Interface>>
                +invoke(status: UserStatus): CustomResult<Unit, Exception>
            }
            class UpdateUserStatusUseCaseImpl {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(status: UserStatus): CustomResult<Unit, Exception>
            }
        }

        namespace Repositories_DomainNS {
            class UserRepository {
                <<Interface>>
                +getUserStream(userId: String): Flow<CustomResult<User, Exception>>
                +updateUserProfile(userId: String, user: User, localImageUri: Uri?): CustomResult<User, Exception>
                +checkNicknameAvailability(nickname: String): CustomResult<Boolean, Exception>
                +deleteUserProfileImage(userId: String): CustomResult<Unit, Exception>
                +updateUserConnectionStatus(userId: String, newStatus: UserStatus): CustomResult<Unit, Exception>
            }
            class AuthRepository {
                <<Interface>>
                +getCurrentUserSession(): CustomResult<UserSession, Exception>
            }
            class MediaRepository {
                <<Interface>>
                +uploadFile(uri: Uri, storagePath: String): CustomResult<String, Exception>
                +deleteFile(fileUrl: String): CustomResult<Unit, Exception>
            }
        }
    end

    %% Data Layer
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class UserRepositoryImpl {
                -userRemoteDataSource: UserRemoteDataSource
                -mediaRepository: MediaRepository
            }
            class AuthRepositoryImpl {
                -authRemoteDataSource: AuthRemoteDataSource
                -auth: FirebaseAuth
                -authWrapper: FirebaseAuthWrapper
            }
            class MediaRepositoryImpl {
                -firebaseStorage: FirebaseStorage
                -context: Context
            }
        }

        namespace RemoteDataSources_DataNS {
            class UserRemoteDataSource {
                <<Interface>>
                +observeUser(userId: String): Flow<CustomResult<UserDTO, Exception>>
                +updateUserProfile(name: String, userDTO: UserDTO): CustomResult<Unit, Exception>
                +checkNicknameAvailability(nickname: String): CustomResult<Boolean, Exception>
                +uploadProfileImage(imageUri: Uri): CustomResult<String, Exception>
                +updateUserStatus(status: String): CustomResult<Unit, Exception>
            }
            class AuthRemoteDataSource {
                <<Interface>>
                +getCurrentUser(): CustomResult<FirebaseUser, Exception>
                +getCurrentUserId(): String?
            }
        }

        namespace DataSourceImpl_DataNS {
            class UserRemoteDataSourceImpl {
                -auth: FirebaseAuth
                -firestore: FirebaseFirestore
                -storage: FirebaseStorage
            }
            class AuthRemoteDataSourceImpl {
                -auth: FirebaseAuth
            }
        }
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase
    ViewModels_ProfileNS.EditProfileViewModel ..> UseCases_UserNS.GetCurrentUserStreamUseCase : uses
    ViewModels_ProfileNS.EditProfileViewModel ..> UseCases_UserNS.UpdateUserProfileUseCase : uses
    ViewModels_ProfileNS.EditProfileViewModel ..> UseCases_UserNS.UploadProfileImageUseCase : uses

    ViewModels_ProfileNS.ChangeStatusViewModel ..> UseCases_UserNS.GetCurrentStatusUseCase : uses
    ViewModels_ProfileNS.ChangeStatusViewModel ..> UseCases_UserNS.UpdateUserStatusUseCase : uses

    ViewModels_ProfileNS.ProfileImageViewModel ..> UseCases_UserNS.UploadProfileImageUseCase : uses

    %% UseCase -> Repository Interface
    UseCases_UserNS.GetCurrentUserStreamUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.GetCurrentUserStreamUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UpdateUserProfileUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UpdateUserProfileUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.UpdateNicknameUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UpdateNicknameUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.CheckNicknameAvailabilityUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UploadProfileImageUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UploadProfileImageUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.RemoveProfileImageUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.RemoveProfileImageUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.UpdateUserImageUseCaseImpl ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.GetCurrentStatusUseCase ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.GetCurrentStatusUseCase ..> Repositories_DomainNS.AuthRepository : accesses
    UseCases_UserNS.UpdateUserStatusUseCaseImpl ..> Repositories_DomainNS.UserRepository : accesses
    UseCases_UserNS.UpdateUserStatusUseCaseImpl ..> Repositories_DomainNS.AuthRepository : accesses

    UseCases_UserNS.UpdateUserImageUseCase <|.. UseCases_UserNS.UpdateUserImageUseCaseImpl : implements
    UseCases_UserNS.UpdateUserStatusUseCase <|.. UseCases_UserNS.UpdateUserStatusUseCaseImpl : implements

    %% Repository Impl -> Repo Interface
    Repositories_DomainNS.UserRepository <|.. RepositoryImpl_DataNS.UserRepositoryImpl : implements
    Repositories_DomainNS.AuthRepository <|.. RepositoryImpl_DataNS.AuthRepositoryImpl : implements
    Repositories_DomainNS.MediaRepository <|.. RepositoryImpl_DataNS.MediaRepositoryImpl : implements

    %% Repository Impl -> DataSource Interface / Other Repo
    RepositoryImpl_DataNS.UserRepositoryImpl ..> RemoteDataSources_DataNS.UserRemoteDataSource : uses
    RepositoryImpl_DataNS.UserRepositoryImpl ..> Repositories_DomainNS.MediaRepository : uses
    RepositoryImpl_DataNS.AuthRepositoryImpl ..> RemoteDataSources_DataNS.AuthRemoteDataSource : uses
    %% MediaRepositoryImpl uses FirebaseStorage directly

    %% DataSource Impl -> DS Interface
    RemoteDataSources_DataNS.UserRemoteDataSource <|.. DataSourceImpl_DataNS.UserRemoteDataSourceImpl : implements
    RemoteDataSources_DataNS.AuthRemoteDataSource <|.. DataSourceImpl_DataNS.AuthRemoteDataSourceImpl : implements

    note for UseCases_UserNS.UploadProfileImageUseCase "Context dependency for reading URI."
    note for RepositoryImpl_DataNS.UserRepositoryImpl "Delegates to MediaRepository for file operations."
    note for RepositoryImpl_DataNS.MediaRepositoryImpl "Directly uses FirebaseStorage."
    note for ViewModels_ProfileNS.EditProfileViewModel "CheckNickname and RemoveProfileImage UseCases are not directly injected here."
