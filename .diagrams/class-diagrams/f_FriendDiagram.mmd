classDiagram
    title Friend Feature Architecture

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_Friends {
            class FriendViewModel {
                -getUserUseCase: GetUserUseCase
                -getDmChannelIdUseCase: GetDmChannelIdUseCase
                -getFriendsListStreamUseCase: GetFriendsListStreamUseCase
                -authUtil: AuthUtil
                +observeFriendRelationships()
                +onFriendClick(friendId: String)
                +onAcceptFriendClick()
                +requestAddFriendToggle()
            }
            class AddFriendViewModel {
                -sendFriendRequestUseCase: SendFriendRequestUseCase
                -searchUserByNameUseCase: SearchUserByNameUseCase
                -validateSearchQueryUseCase: ValidateSearchQueryUseCase
                -authUtil: AuthUtil
                +onUsernameChange(name: String)
                +sendFriendRequest()
            }
            class AcceptFriendsViewModel {
                -getPendingFriendRequestsUseCase: GetPendingFriendRequestsUseCase
                -acceptFriendRequestUseCase: AcceptFriendRequestUseCase
                -denyFriendRequestUseCase: RemoveOrDenyFriendUseCase
                -authUtil: AuthUtil
                +loadPendingFriendRequests()
                +acceptFriendRequest(userId: String)
                +denyFriendRequest(userId: String)
            }
        }
    end

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_Friend {
            class GetFriendsListStreamUseCase {
                -friendRepository: FriendRepository
                +invoke(currentUserId: String): Flow<CustomResult<List<Friend>, Exception>>
            }
            class GetPendingFriendRequestsUseCase {
                -friendRepository: FriendRepository
                +invoke(currentUserId: String): Flow<CustomResult<List<Friend>, Exception>>
            }
            class SendFriendRequestUseCase {
                <<Interface>>
                +invoke(targetUserId: String): CustomResult<Unit, Exception>
            }
            class SendFriendRequestUseCaseImpl {
                -friendRepository: FriendRepository
                -authRepository: AuthRepository
                +invoke(targetUserId: String): CustomResult<Unit, Exception>
            }
            class AcceptFriendRequestUseCase {
                -friendRepository: FriendRepository
                +invoke(requesterId: String, currentUserId: String): CustomResult<Unit, Exception>
            }
            class RemoveOrDenyFriendUseCase {
                -friendRepository: FriendRepository
                -authRepository: AuthRepository
                +invoke(friendId: String): CustomResult<Unit, Exception>
            }
            class ValidateSearchQueryUseCase {
                +invoke(query: String): Boolean
            }
        }
        namespace UseCases_User {
            class SearchUserByNameUseCase {
                <<Interface>>
                +invoke(name: String): CustomResult<List<User>, Exception>
            }
            class SearchUserByNameUseCaseImpl {
                -userRepository: UserRepository
                +invoke(name: String): CustomResult<List<User>, Exception>
            }
            class GetCurrentUserUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): Flow<CustomResult<User, Exception>>
            }
            class GetUserUseCase {
                <<Interface>>
                +invoke(userId: String): Flow<CustomResult<User, Exception>>
            }
            class GetUserUseCaseImpl {
                -userRepository: UserRepository
                +invoke(userId: String): Flow<CustomResult<User, Exception>>
            }
        }
        namespace UseCases_DM {
             class CreateDmChannelUseCase {
                -dmRepository: DMChannelRepository
                +invoke(targetUserId: String): CustomResult<DMChannel, Exception>
            }
            class GetDmChannelIdUseCase {
                -dmRepository: DMChannelRepository
                +invoke(targetUserId: String): CustomResult<String, Exception>
            }
            class GetDmChannelUseCase {
                -dmRepository: DMChannelRepository
                -authRepository: AuthRepository
                +invoke(targetUserId: String): CustomResult<DMChannel, Exception>
            }
        }

        namespace Repositories_Domain {
            class FriendRepository {
                <<Interface>>
                +getFriendsStream(currentUserId: String): Flow<CustomResult<List<Friend>, Exception>>
                +getFriendRequestsStream(currentUserId: String): Flow<CustomResult<List<FriendStatus>, Exception>>
                +sendFriendRequest(senderId: String, receiverId: String): CustomResult<Unit, Exception>
                +acceptFriendRequest(friendRequestId: String, currentUserId: String): CustomResult<Unit, Exception>
                +declineFriendRequest(friendRequestId: String, currentUserId: String): CustomResult<Unit, Exception>
                +removeFriend(currentUserId: String, friendId: String): CustomResult<Unit, Exception>
                +searchUsersForFriend(nickname: String, currentUserId: String): CustomResult<List<User>, Exception>
            }
            class UserRepository {
                <<Interface>>
                +getUserStream(userId: String): Flow<CustomResult<User, Exception>>
                +searchUsersByName(name: String, limit: Int): CustomResult<List<User>, Exception>
            }
            class DMChannelRepository {
                <<Interface>>
                +getDmChannelById(dmChannelId: String): CustomResult<DMChannel, Exception>
                +getDmChannelId(otherUserId: String): CustomResult<String, Exception>
                +createDmChannel(otherUserId: String): CustomResult<String, Exception>
                +getDmChannelWithUser(otherUserIds: List<String>): CustomResult<DMChannel, Exception>
            }
            class AuthRepository {
                <<Interface>>
                +getCurrentUserSession(): CustomResult<UserSession, Exception>
            }
        }
    end

    %% Data Layer
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_Data {
            class FriendRepositoryImpl {
                -friendRemoteDataSource: FriendRemoteDataSource
                -userRemoteDataSource: UserRemoteDataSource
            }
            class UserRepositoryImpl {
                -userRemoteDataSource: UserRemoteDataSource
                -mediaRepository: MediaRepository
            }
            class DMChannelRepositoryImpl {
                -dmChannelRemoteDataSource: DMChannelRemoteDataSource
                -auth: FirebaseAuth
            }
        }

        namespace RemoteDataSources_Data {
            class FriendRemoteDataSource {
                <<Interface>>
                +observeFriends(userId: String): Flow<CustomResult<List<FriendDTO>, Exception>>
                +observeFriendRequests(userId: String): Flow<CustomResult<List<FriendDTO>, Exception>>
                +requestFriend(friendId: String, myName: String, myProfileImageUrl: String?): CustomResult<Unit, Exception>
                +acceptFriendRequest(requesterId: String): CustomResult<Unit, Exception>
                +removeOrDenyFriend(friendId: String): CustomResult<Unit, Exception>
            }
            class UserRemoteDataSource {
                <<Interface>>
                +observeUser(userId: String): Flow<CustomResult<UserDTO, Exception>>
                +searchUsersByName(nameQuery: String, maxResults: Int): CustomResult<List<UserDTO>, Exception>
                +getMyUserInfo(): CustomResult<UserDTO, Exception>
            }
            class DMChannelRemoteDataSource {
                <<Interface>>
                +observeDMChannel(channelId: String): Flow<DMChannelDTO?>
                +findOrCreateDMChannel(otherUserId: String): CustomResult<String, Exception>
            }
        }

        namespace DataSourceImpl_Data {
            class FriendRemoteDataSourceImpl {
                -auth: FirebaseAuth
                -firestore: FirebaseFirestore
            }
            class UserRemoteDataSourceImpl {
                -auth: FirebaseAuth
                -firestore: FirebaseFirestore
                -storage: FirebaseStorage
            }
            class DMChannelRemoteDataSourceImpl {
                -auth: FirebaseAuth
                -firestore: FirebaseFirestore
            }
        }
        namespace Utils_Data {
            class AuthUtil {
                 +getCurrentUserId(): String
            }
        }
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase & Utils
    ViewModels_Friends.FriendViewModel ..> UseCases_Friend.GetFriendsListStreamUseCase : uses
    ViewModels_Friends.FriendViewModel ..> UseCases_User.GetUserUseCase : uses
    ViewModels_Friends.FriendViewModel ..> UseCases_DM.GetDmChannelIdUseCase : uses
    ViewModels_Friends.FriendViewModel ..> Utils_Data.AuthUtil : uses

    ViewModels_Friends.AddFriendViewModel ..> UseCases_Friend.SendFriendRequestUseCase : uses
    ViewModels_Friends.AddFriendViewModel ..> UseCases_User.SearchUserByNameUseCase : uses
    ViewModels_Friends.AddFriendViewModel ..> UseCases_Friend.ValidateSearchQueryUseCase : uses
    ViewModels_Friends.AddFriendViewModel ..> Utils_Data.AuthUtil : uses

    ViewModels_Friends.AcceptFriendsViewModel ..> UseCases_Friend.GetPendingFriendRequestsUseCase : uses
    ViewModels_Friends.AcceptFriendsViewModel ..> UseCases_Friend.AcceptFriendRequestUseCase : uses
    ViewModels_Friends.AcceptFriendsViewModel ..> UseCases_Friend.RemoveOrDenyFriendUseCase : uses
    ViewModels_Friends.AcceptFriendsViewModel ..> Utils_Data.AuthUtil : uses

    %% UseCase -> Repository Interface
    UseCases_Friend.GetFriendsListStreamUseCase ..> Repositories_Domain.FriendRepository : accesses
    UseCases_Friend.GetPendingFriendRequestsUseCase ..> Repositories_Domain.FriendRepository : accesses
    UseCases_Friend.SendFriendRequestUseCaseImpl ..> Repositories_Domain.FriendRepository : accesses
    UseCases_Friend.SendFriendRequestUseCaseImpl ..> Repositories_Domain.AuthRepository : accesses
    UseCases_Friend.AcceptFriendRequestUseCase ..> Repositories_Domain.FriendRepository : accesses
    UseCases_Friend.RemoveOrDenyFriendUseCase ..> Repositories_Domain.FriendRepository : accesses
    UseCases_Friend.RemoveOrDenyFriendUseCase ..> Repositories_Domain.AuthRepository : accesses

    UseCases_User.SearchUserByNameUseCaseImpl ..> Repositories_Domain.UserRepository : accesses
    UseCases_User.GetCurrentUserUseCase ..> Repositories_Domain.UserRepository : accesses
    UseCases_User.GetCurrentUserUseCase ..> Repositories_Domain.AuthRepository : accesses
    UseCases_User.GetUserUseCaseImpl ..> Repositories_Domain.UserRepository : accesses

    UseCases_DM.CreateDmChannelUseCase ..> Repositories_Domain.DMChannelRepository : accesses
    UseCases_DM.GetDmChannelIdUseCase ..> Repositories_Domain.DMChannelRepository : accesses
    UseCases_DM.GetDmChannelUseCase ..> Repositories_Domain.DMChannelRepository : accesses
    UseCases_DM.GetDmChannelUseCase ..> Repositories_Domain.AuthRepository : accesses

    UseCases_Friend.SendFriendRequestUseCase <|.. UseCases_Friend.SendFriendRequestUseCaseImpl : implements
    UseCases_User.SearchUserByNameUseCase <|.. UseCases_User.SearchUserByNameUseCaseImpl : implements
    UseCases_User.GetUserUseCase <|.. UseCases_User.GetUserUseCaseImpl : implements

    %% Repository Implementation -> Repository Interface
    Repositories_Domain.FriendRepository <|.. RepositoryImpl_Data.FriendRepositoryImpl : implements
    Repositories_Domain.UserRepository <|.. RepositoryImpl_Data.UserRepositoryImpl : implements
    Repositories_Domain.DMChannelRepository <|.. RepositoryImpl_Data.DMChannelRepositoryImpl : implements

    %% Repository Implementation -> DataSource Interface
    RepositoryImpl_Data.FriendRepositoryImpl ..> RemoteDataSources_Data.FriendRemoteDataSource : uses
    RepositoryImpl_Data.FriendRepositoryImpl ..> RemoteDataSources_Data.UserRemoteDataSource : uses
    RepositoryImpl_Data.UserRepositoryImpl ..> RemoteDataSources_Data.UserRemoteDataSource : uses
    RepositoryImpl_Data.DMChannelRepositoryImpl ..> RemoteDataSources_Data.DMChannelRemoteDataSource : uses

    %% DataSource Implementation -> DataSource Interface
    RemoteDataSources_Data.FriendRemoteDataSource <|.. DataSourceImpl_Data.FriendRemoteDataSourceImpl : implements
    RemoteDataSources_Data.UserRemoteDataSource <|.. DataSourceImpl_Data.UserRemoteDataSourceImpl : implements
    RemoteDataSources_Data.DMChannelRemoteDataSource <|.. DataSourceImpl_Data.DMChannelRemoteDataSourceImpl : implements

    note for Utils_Data.AuthUtil "Utility providing current user ID (likely wraps FirebaseAuth)."
    note for Repositories_Domain.AuthRepository "Interface for auth related ops like getting current session."
    note for RepositoryImpl_Data.UserRepositoryImpl "MediaRepository dep is part of full UserRepository."
    note for DataSourceImpl_Data.UserRemoteDataSourceImpl "FirebaseStorage dep is part of full UserRemoteDataSource."
