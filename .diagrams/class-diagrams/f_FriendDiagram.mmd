classDiagram
    title Friend Feature Architecture
    %% Layered Architecture: Feature (ViewModels) -> Domain (UseCases, Repository Interfaces) -> Data (Repository Implementations, DataSources).
    %% Data Flow: External services (e.g., Firebase Firestore) are accessed by DataSource Implementations, which are abstracted by DataSource Interfaces.
    %% Repository Implementations use DataSource Interfaces and are abstracted by Repository Interfaces.
    %% UseCases consume Repository Interfaces for business logic. ViewModels use UseCases for UI state and interactions.
    %% UI (not shown) observes ViewModels.
    %% Data Models: DTOs (e.g., FriendDTO) in Data layer, Domain Models (e.g., Friend) in Domain/ViewModel layers.

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        %% ViewModels 네임스페이스 (MMD 코드 가독성을 위함)
        namespace ViewModels_Friends {
            class FriendViewModel {
                -getFriendsListStreamUseCase: GetFriendsListStreamUseCase
                -fetchFriendsListUseCase: FetchFriendsListUseCase
                -removeOrDenyFriendUseCase: RemoveOrDenyFriendUseCase
                -getCurrentUserUseCase: GetCurrentUserUseCase
                -getUserInfoUseCase: GetUserInfoUseCase
                -createDmChannelUseCase: CreateDmChannelUseCase
                -getDmChannelIdUseCase: GetDmChannelIdUseCase
                +observeFriends()
                +unfriend(friendId: String)
                +openDmChat(friendId: String)
            }
            class AddFriendViewModel {
                -searchUserByNameUseCase: SearchUserByNameUseCase
                -sendFriendRequestUseCase: SendFriendRequestUseCase
                +searchUser(nickname: String)
                +sendRequest(userId: String)
            }
            class AcceptFriendsViewModel {
                -getPendingFriendRequestsUseCase: GetPendingFriendRequestsUseCase
                -acceptFriendRequestUseCase: AcceptFriendRequestUseCase
                -removeOrDenyFriendUseCase: RemoveOrDenyFriendUseCase
                +loadPendingRequests()
                +acceptRequest(requestId: String)
                +denyRequest(requestId: String)
            }
        }
    end
    %% SUBNOTE: 친구 목록, 추가, 요청 수락 화면의 UI 로직 및 상태 관리

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        %% Friend UseCases 네임스페이스
        namespace UseCases_Friend {
            class GetFriendsListStreamUseCase {
                -friendRepository: FriendRepository
                +invoke(currentUserId: String): Flow < CustomResult < List < Friend >, Exception > >
            }
            class FetchFriendsListUseCase {
                -friendRepository: FriendRepository
                +invoke(currentUserId: String): CustomResult < Unit, Exception >
            }
            class GetPendingFriendRequestsUseCase {
                -friendRepository: FriendRepository
                +invoke(currentUserId: String): Flow < CustomResult < List < Friend >, Exception > >
            }
            class SendFriendRequestUseCase {
                -friendRepository: FriendRepository
                -userRepository: UserRepository %% For nickname validation/lookup
                +invoke(targetNickname: String, currentUserId: String): CustomResult < Unit, Exception >
            }
            class AcceptFriendRequestUseCase {
                -friendRepository: FriendRepository
                +invoke(requesterId: String, currentUserId: String): CustomResult < Unit, Exception >
            }
            class RemoveOrDenyFriendUseCase {
                -friendRepository: FriendRepository
                +invoke(targetUserId: String, currentUserId: String, isRequest: Boolean): CustomResult < Unit, Exception >
            }
            class ValidateSearchQueryUseCase {
                +invoke(query: String): CustomResult < String, Exception >
            }
        }
        %% User UseCases 네임스페이스 (Friends 기능에서 사용)
        namespace UseCases_User {
            class SearchUserByNameUseCase {
                -userRepository: UserRepository
                +invoke(nickname: String): Flow < CustomResult < List < User >, Exception > >
            }
            class GetCurrentUserUseCase {
                -userRepository: UserRepository
                -authRepository: AuthRepository
                +invoke(): CustomResult < User, Exception >
            }
            class GetUserInfoUseCase {
                -userRepository: UserRepository
                +invoke(userId: String): CustomResult < User, Exception >
            }
        }
        %% DM UseCases 네임스페이스 (Friends 기능에서 사용)
        namespace UseCases_DM {
             class CreateDmChannelUseCase {
                -dmRepository: DMChannelRepository
                +invoke(targetUserId: String): CustomResult < DMChannel, Exception >
            }
            class GetDmChannelIdUseCase {
                -dmRepository: DMChannelRepository
                -authRepository: AuthRepository
                +invoke(targetUserId: String): CustomResult < String, Exception >
            }
        }

        %% Repositories 네임스페이스
        namespace Repositories_Domain {
            class FriendRepository {
                <<Interface>>
                +getFriendsStream(currentUserId: String): Flow < CustomResult < List < Friend >, Exception > >
                +fetchFriends(currentUserId: String): CustomResult < Unit, Exception >
                +removeFriend(friendId: String, currentUserId: String): CustomResult < Unit, Exception >
                +acceptFriendRequest(requesterId: String, currentUserId: String): CustomResult < Unit, Exception >
                +denyFriendRequest(requesterId: String, currentUserId: String): CustomResult < Unit, Exception >
                +sendFriendRequest(targetNickname: String, currentUserId: String): CustomResult < Unit, Exception >
            }
            class UserRepository {
                <<Interface>>
                +searchUsersByName(nickname: String): Flow < CustomResult < List < User >, Exception > >
                +getCurrentUser(userId: String): CustomResult < User, Exception >
                +getUserById(userId: String): CustomResult < User, Exception >
                %% Simplified for diagram
            }
            class DMChannelRepository {
                <<Interface>>
                +createDmChannel(targetUserId: String): CustomResult < String, Exception >
                +getDmChannelWithUser(userIds: List<String>): CustomResult < DMChannel, Exception >
                +getDmChannelById(channelId: String): CustomResult < DMChannel, Exception >
                %% Simplified for diagram
            }
        }
        note for FriendRepository "친구 데이터 접근을 위한<br/>추상화 인터페이스"
        note for FriendRequestRepository "친구 요청 데이터 접근을 위한<br/>추상화 인터페이스"
        note for UserRepository "사용자 데이터 접근 인터페이스"
        note for ChannelRepository "채널(DM 포함) 데이터 접근 인터페이스"
    end

    %% Data Layer (Repository Implementation & Remote DataSources - Local Excluded)
    subgraph Data Layer
        direction LR
        %% Repository Implementations 네임스페이스
        namespace RepositoryImpl_Data {
            class FriendRepositoryImpl {
                -friendRemoteDataSource: FriendRemoteDataSource
                %% LocalDataSource excluded
            }
            class FriendRequestRepositoryImpl {
                -friendRemoteDataSource: FriendRemoteDataSource %% Assuming FriendRemoteDataSource handles requests
                -userRemoteDataSource: UserRemoteDataSource %% For fetching user by nickname
            }
            class UserRepositoryImpl {
                -userRemoteDataSource: UserRemoteDataSource
                %% LocalDataSource excluded
            }
            class ChannelRepositoryImpl {
                -dmChannelRemoteDataSource: DMChannelRemoteDataSource
                %% Other datasources for project channels excluded for this context
            }
        }
        note for FriendRepositoryImpl "FriendRepository 구현체 (Remote)"
        note for FriendRequestRepositoryImpl "FriendRequestRepository 구현체 (Remote)"
        note for UserRepositoryImpl "UserRepository 구현체 (Remote)"
        note for ChannelRepositoryImpl "ChannelRepository 구현체 (Remote DM)"


        %% Remote DataSources 네임스페이스
        namespace RemoteDataSources_Data {
            class FriendRemoteDataSource {
                <<Interface>>
                +getFriends(): Flow < List < FriendDTO > >
                +fetchFriendsFromServer(): Result < Unit >
                +removeFriend(friendId: String): Result < Unit >
                +getPendingRequests(): Flow < List < FriendRequestDTO > >
                +sendFriendRequestToUser(receiverNickname: String): Result < Unit >
                +acceptRequest(requestId: String): Result < Unit >
                +denyRequest(requestId: String): Result < Unit >
                +addFriend(userId: String, friendId: String): Result < Unit >
            }
            class UserRemoteDataSource {
                <<Interface>>
                +searchUsers(nickname: String): Flow < List < UserDTO > >
                +getCurrentUserDto(): Flow < UserDTO? >
                +getUserDto(userId: String): Flow < UserDTO? >
            }
            class DMChannelRemoteDataSource {
                <<Interface>>
                +createDmChannel(targetUserId: String): Result < String >
                +findDmChannelIdWithUser(targetUserId: String): Result < String? >
            }
        }
        note for FriendRemoteDataSource "원격 친구 및 요청 서비스 통신"
        note for UserRemoteDataSource "원격 사용자 서비스 통신"
        note for DMChannelRemoteDataSource "원격 DM 채널 서비스 통신"

        %% DataSource Implementations 네임스페이스
        namespace DataSourceImpl_Data {
            class FriendRemoteDataSourceImpl {
                -firestore: FirebaseFirestore
                -currentUserProvider: CurrentUserProvider
            }
            class UserRemoteDataSourceImpl {
                -firestore: FirebaseFirestore
            }

            class DMChannelRemoteDataSourceImpl {
                -firestore: FirebaseFirestore
                -currentUserProvider: CurrentUserProvider
            }
        }
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase
    FriendViewModel ..> GetFriendsListStreamUseCase : uses
    FriendViewModel ..> FetchFriendsListUseCase : uses
    FriendViewModel ..> RemoveOrDenyFriendUseCase : uses
    FriendViewModel ..> GetCurrentUserUseCase : uses
    FriendViewModel ..> GetUserInfoUseCase : uses
    FriendViewModel ..> CreateDmChannelUseCase : uses
    FriendViewModel ..> GetDmChannelIdUseCase : uses
    AddFriendViewModel ..> SearchUserByNameUseCase : uses
    AddFriendViewModel ..> SendFriendRequestUseCase : uses
    AcceptFriendsViewModel ..> GetPendingFriendRequestsUseCase : uses
    AcceptFriendsViewModel ..> AcceptFriendRequestUseCase : uses
    AcceptFriendsViewModel ..> RemoveOrDenyFriendUseCase : uses

    %% UseCase -> Repository Interface
    GetFriendsListStreamUseCase ..> FriendRepository : accesses
    FetchFriendsListUseCase ..> FriendRepository : accesses
    GetPendingFriendRequestsUseCase ..> FriendRepository : accesses
    SendFriendRequestUseCase ..> FriendRepository : accesses
    SendFriendRequestUseCase ..> UserRepository : accesses %% For nickname validation
    AcceptFriendRequestUseCase ..> FriendRepository : accesses
    RemoveOrDenyFriendUseCase ..> FriendRepository : accesses
    SearchUserByNameUseCase ..> UserRepository : accesses
    GetCurrentUserUseCase ..> UserRepository : accesses
    GetCurrentUserUseCase ..> AuthRepository : accesses
    GetUserInfoUseCase ..> UserRepository : accesses
    CreateDmChannelUseCase ..> DMChannelRepository : accesses
    GetDmChannelIdUseCase ..> DMChannelRepository : accesses
    GetDmChannelIdUseCase ..> AuthRepository : accesses

    %% Repository Implementation -> Repository Interface
    FriendRepository <|.. FriendRepositoryImpl : implements
    UserRepository <|.. UserRepositoryImpl : implements
    DMChannelRepository <|.. DMChannelRepositoryImpl : implements
    AuthRepository <|.. AuthRepositoryImpl : implements

    %% Repository Implementation -> DataSource Interface (Remote Only)
    FriendRepositoryImpl ..> FriendRemoteDataSource : uses
    UserRepositoryImpl ..> UserRemoteDataSource : uses
    DMChannelRepositoryImpl ..> DMChannelRemoteDataSource : uses
    AuthRepositoryImpl ..> AuthRemoteDataSource : uses

    %% DataSource Implementation -> DataSource Interface
    FriendRemoteDataSource <|.. FriendRemoteDataSourceImpl : implements
    UserRemoteDataSource <|.. UserRemoteDataSourceImpl : implements
    DMChannelRemoteDataSource <|.. DMChannelRemoteDataSourceImpl : implements