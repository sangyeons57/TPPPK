classDiagram
    title Project Feature Architecture
    %% Layered Architecture: Feature (ViewModels) -> Domain (UseCases, Repository Interfaces) -> Data (Repository Implementations, DataSources).
    %% Data Flow: External services (e.g., Firebase) are accessed by DataSource Implementations, which are abstracted by DataSource Interfaces.
    %% Repository Implementations use DataSource Interfaces and are abstracted by Repository Interfaces.
    %% UseCases consume Repository Interfaces for business logic. ViewModels use UseCases for UI state and interactions.
    %% UI (not shown) observes ViewModels.
    %% Data Models: DTOs (e.g., ProjectDTO) in Data layer, Domain Models (e.g., Project) in Domain/ViewModel layers.

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_ProjectNS {
            class AddProjectViewModel {
                -createProjectUseCase: CreateProjectUseCase
                -isProjectNameAvailableUseCase: IsProjectNameAvailableUseCase
                +createProject(name: String, description: String)
            }
            class JoinProjectViewModel { %% Covers JoinProjectDialogViewModel as well for simplicity
                -joinProjectWithCodeUseCase: JoinProjectWithCodeUseCase
                +joinProject(code: String)
            }
            class ProjectDetailViewModel {
                -getProjectInfoFromTokenUseCase: GetProjectInfoFromTokenUseCase
                -getProjectStructureUseCase: GetProjectStructureUseCase
                -updateProjectStructureUseCase: UpdateProjectStructureUseCase
                -observeProjectMembersUseCase: ObserveProjectMembersUseCase
                +loadProjectDetails(projectId: String)
                +reorderChannels(categoryId: String, channels: List)
            }
            class ProjectSettingViewModel {
                -renameProjectUseCase: RenameProjectUseCase
                -deleteProjectUseCase: DeleteProjectUseCase
                -getProjectInfoFromTokenUseCase: GetProjectInfoFromTokenUseCase
                +loadSettings(projectId: String)
                +updateProjectName(newName: String)
                +confirmDeleteProject()
            }
            class MemberListViewModel {
                -observeProjectMembersUseCase: ObserveProjectMembersUseCase
                -fetchProjectMembersUseCase: FetchProjectMembersUseCase
                +loadMembers(projectId: String)
            }
            class AddMemberViewModel {
                -searchUserByNameUseCase: SearchUserByNameUseCase
                -addProjectMemberUseCase: AddProjectMemberUseCase
                -getProjectRolesUseCase: GetProjectRolesUseCase
                +searchUsers(name: String)
                +inviteUserToProject(userId: String, roleId: String)
            }
            class EditMemberViewModel {
                -getProjectMemberDetailsUseCase: GetProjectMemberDetailsUseCase
                -updateMemberRolesUseCase: UpdateMemberRolesUseCase
                -removeProjectMemberUseCase: RemoveProjectMemberUseCase
                -getProjectRolesUseCase: GetProjectRolesUseCase
                +loadMemberDetails(projectId: String, memberId: String)
                +changeMemberRole(newRoleId: String)
                +kickMember()
            }
            class RoleListViewModel {
                -getProjectRolesUseCase: GetProjectRolesUseCase
                +loadRoles(projectId: String)
            }
            class EditRoleViewModel {
                -createRoleUseCase: CreateRoleUseCase
                -getRoleDetailsUseCase: GetRoleDetailsUseCase
                -updateRoleUseCase: UpdateRoleUseCase
                -deleteRoleUseCase: DeleteRoleUseCase
                +loadRoleDetails(projectId: String, roleId: String)
                +saveRole(name: String, permissions: List)
                +removeRole()
            }
            class CreateCategoryViewModel {
                -updateProjectStructureUseCase: UpdateProjectStructureUseCase %% Simplified dependency
                +createCategory(projectId: String, name: String)
            }
            class CreateChannelViewModel {
                -createCategoryChannelUseCase: CreateCategoryChannelUseCase
                +createChannel(projectId: String, categoryId: String, name: String, type: String)
            }
            class EditCategoryViewModel{
                -updateProjectStructureUseCase: UpdateProjectStructureUseCase
                -deleteCategoryUseCase: DeleteCategoryUseCase
                +renameCategory(newName: String)
                +confirmDeleteCategory()
            }
            class EditChannelViewModel{
                -updateProjectStructureUseCase: UpdateProjectStructureUseCase
                -deleteChannelUseCase: DeleteChannelUseCase
                +renameChannel(newName: String)
                +confirmDeleteChannel()
            }
        }
    end
    note for AddProjectViewModel "새 프로젝트 생성 화면 UI 로직"
    note for JoinProjectViewModel "프로젝트 참여 코드 입력 화면/다이얼로그 UI 로직"
    note for ProjectDetailViewModel "프로젝트 상세 및 구조(채널/카테고리) 조회/편집 UI 로직"
    note for ProjectSettingViewModel "프로젝트 설정(이름 변경, 삭제 등) UI 로직"
    note for MemberListViewModel "프로젝트 멤버 목록 조회 UI 로직"
    note for AddMemberViewModel "프로젝트 멤버 추가 UI 로직"
    note for EditMemberViewModel "프로젝트 멤버 역할 변경/추방 UI 로직"
    note for RoleListViewModel "프로젝트 역할 목록 조회 UI 로직"
    note for EditRoleViewModel "프로젝트 역할 생성/편집/삭제 UI 로직"
    note for CreateCategoryViewModel "카테고리 생성 UI 로직"
    note for CreateChannelViewModel "채널 생성 UI 로직"
    note for EditCategoryViewModel "카테고리 편집/삭제 UI 로직"
    note for EditChannelViewModel "채널 편집/삭제 UI 로직"


    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_ProjectNS {
            class CreateProjectUseCase {
                -projectRepository: ProjectRepository
                -roleRepository: RoleRepository
                +invoke(name: String, description: String): Result<String> %% Returns ProjectId
            }
            class IsProjectNameAvailableUseCase {
                -projectRepository: ProjectRepository
                +invoke(name: String): Result<Boolean>
            }
            class JoinProjectWithCodeUseCase {
                -inviteRepository: InviteRepository
                -projectRepository: ProjectRepository
                +invoke(code: String): Result<Unit>
            }
            class GetProjectInfoFromTokenUseCase { %% Simplified name for GetProjectById or similar
                -projectRepository: ProjectRepository
                +invoke(projectId: String): Flow<Project>
            }
            class GetProjectStructureUseCase {
                -projectRepository: ProjectRepository
                %% -categoryRepository: CategoryRepository (Handled via ProjectRepository)
                %% -channelRepository: ChannelRepository (Handled via ProjectRepository)
                +invoke(projectId: String): Flow<ProjectStructure>
            }
            class UpdateProjectStructureUseCase {
                -projectRepository: ProjectRepository
                %% -categoryRepository: CategoryRepository
                %% -channelRepository: ChannelRepository
                +invoke(projectId: String, newStructure: ProjectStructure): Result<Unit>
            }
            class ObserveProjectMembersUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String): Flow<List<Member>>
            }
            class FetchProjectMembersUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String): Result<Unit>
            }
            class RenameProjectUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String, newName: String): Result<Unit>
            }
            class DeleteProjectUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String): Result<Unit>
            }
            class AddProjectMemberUseCase {
                -projectRepository: ProjectRepository %% To add member
                -userRepository: UserRepository %% To validate/get user by name/id
                -roleRepository: RoleRepository %% To assign default role or specific role
                +invoke(projectId: String, userId: String, roleId: String): Result<Unit>
            }
            class GetProjectMemberDetailsUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String, memberId: String): Flow<Member>
            }
            class UpdateMemberRolesUseCase {
                -projectRepository: ProjectRepository
                %% -roleRepository: RoleRepository (For role validation)
                +invoke(projectId: String, memberId: String, newRoleIds: List<String>): Result<Unit>
            }
            class RemoveProjectMemberUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String, memberId: String): Result<Unit>
            }
            class CreateRoleUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, name: String, permissions: List): Result<String> %% RoleId
            }
            class GetProjectRolesUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String): Flow<List<Role>>
            }
            class GetRoleDetailsUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, roleId: String): Flow<Role>
            }
            class UpdateRoleUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, roleId: String, newName: String, newPermissions: List): Result<Unit>
            }
            class DeleteRoleUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, roleId: String): Result<Unit>
            }
            class CreateCategoryChannelUseCase {
                -channelRepository: ChannelRepository
                -categoryRepository: CategoryRepository 
                +invoke(projectId: String, categoryId: String, channelName: String, channelType: String): Result<String> %% ChannelId
            }
            class DeleteCategoryUseCase{
                -categoryRepository: CategoryRepository
                -projectRepository: ProjectRepository 
                +invoke(projectId: String, categoryId: String): Result<Unit>
            }
            class DeleteChannelUseCase{
                -channelRepository: ChannelRepository
                -projectRepository: ProjectRepository 
                +invoke(projectId: String, channelId: String): Result<Unit>
            }
        }

        namespace UseCases_UserNS { 
            class SearchUserByNameUseCase {
                -userRepository: UserRepository
                +invoke(name: String): Flow<List<User>>
            }
        }
        %% Permission UseCases (if any specific to project, else handled by main use cases)
        namespace UseCases_PermissionNS {
            class CheckChannelPermissionUseCase {
                -userRepository: UserRepository
                -projectRepository: ProjectRepository
                -roleRepository: RoleRepository
                +invoke(userId: String, projectId: String, channelId: String, permission: String): Flow<Boolean>
            }
        }


        namespace Repositories_DomainNS {
            class ProjectRepository {
                <<Interface>>
                +createProject(name: String, description: String, ownerId: String): Result<String>
                +isProjectNameAvailable(name: String): Result<Boolean>
                +joinProjectByCode(userId: String, code: String): Result<Unit>
                +getProjectById(projectId: String): Flow<Project>
                +getProjectStructure(projectId: String): Flow<ProjectStructure>
                +updateProjectStructure(projectId: String, structure: ProjectStructure): Result<Unit>
                +observeProjectMembers(projectId: String): Flow<List<Member>>
                +fetchProjectMembers(projectId: String): Result<Unit>
                +addMemberToProject(projectId: String, userId: String, roleIds: List<String>): Result<Unit>
                +getMemberDetails(projectId: String, memberId: String): Flow<Member>
                +updateMemberRoles(projectId: String, memberId: String, roleIds: List<String>): Result<Unit>
                +removeMemberFromProject(projectId: String, memberId: String): Result<Unit>
                +renameProject(projectId: String, newName: String): Result<Unit>
                +deleteProject(projectId: String): Result<Unit>
                %% Category/Channel specific methods can be here or in dedicated repos
                +createCategoryInProject(projectId: String, categoryName: String): Result<String>
                +createChannelInProjectCategory(projectId: String, categoryId: String, channelName: String, channelType: String): Result<String>
                +deleteCategoryFromProject(projectId: String, categoryId: String): Result<Unit>
                +deleteChannelFromProject(projectId: String, channelId: String): Result<Unit>
            }
            class RoleRepository {
                <<Interface>>
                +createRoleInProject(projectId: String, name: String, permissions: List): Result<String>
                +getRolesForProject(projectId: String): Flow<List<Role>>
                +getRoleDetails(projectId: String, roleId: String): Flow<Role>
                +updateRole(projectId: String, roleId: String, newName: String, newPermissions: List): Result<Unit>
                +deleteRole(projectId: String, roleId: String): Result<Unit>
                +assignDefaultRolesToOwner(projectId: String, ownerId: String): Result<Unit>
            }
            class InviteRepository {
                <<Interface>>
                +validateInviteCode(code: String): Result<String> %% Returns ProjectId
                +generateInviteCode(projectId: String): Result<String>
            }
            class CategoryRepository { %% If managed separately from ProjectRepository
                <<Interface>>
                +createCategory(projectId: String, name: String): Result<String>
                +deleteCategory(categoryId: String): Result<Unit>
            }
            class ChannelRepository { %% If managed separately from ProjectRepository
                <<Interface>>
                +createChannel(projectId: String, categoryId: String, name: String, type: String): Result<String>
                +deleteChannel(channelId: String): Result<Unit>
            }
            %% UserRepository is defined in other features, assumed available
        }
        note for ProjectRepository "프로젝트 생성, 조회, 멤버, 구조 등 핵심 관리 인터페이스"
        note for RoleRepository "프로젝트 내 역할 관리 인터페이스"
        note for InviteRepository "프로젝트 초대 코드 관리 인터페이스"
        note for CategoryRepository "프로젝트 카테고리 관리 인터페이스 (ProjectRepo에 통합될 수 있음)"
        note for ChannelRepository "프로젝트 채널 관리 인터페이스 (ProjectRepo에 통합될 수 있음)"
    end

    %% Data Layer
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class ProjectRepositoryImpl {
                -projectRemoteDataSource: ProjectRemoteDataSource
                -memberRemoteDataSource: MemberRemoteDataSource
                -categoryRemoteDataSource: CategoryRemoteDataSource
                -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource
                -inviteRemoteDataSource: InviteRemoteDataSource
                -projectsWrapperRemoteDataSource: ProjectsWrapperRemoteDataSource
                %% Role operations might be delegated or use RoleRemoteDataSource directly if needed
            }
            class RoleRepositoryImpl {
                -roleRemoteDataSource: RoleRemoteDataSource
            }
            class InviteRepositoryImpl {
                -inviteRemoteDataSource: InviteRemoteDataSource
            }
            class CategoryRepositoryImpl {
                -categoryRemoteDataSource: CategoryRemoteDataSource
            }
            class ChannelRepositoryImpl {
                -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource
            }
            %% UserRepositoryImpl is defined in other features
        }
        note for ProjectRepositoryImpl "ProjectRepository 구현체 (다수 Remote DS 사용)"
        note for RoleRepositoryImpl "RoleRepository 구현체 (Remote)"
        note for InviteRepositoryImpl "InviteRepository 구현체 (Remote)"
        note for CategoryRepositoryImpl "CategoryRepository 구현체 (Remote)"
        note for ChannelRepositoryImpl "ChannelRepository 구현체 (Remote)"

        namespace RemoteDataSources_DataNS {
            class ProjectRemoteDataSource {
                <<Interface>>
                +createProject(projectDTO: ProjectDTO): Result<String>
                +checkProjectName(name: String): Result<Boolean>
                +getProject(projectId: String): Flow<ProjectDTO>
                +getProjectStructureData(projectId: String): Flow<ProjectStructureDTO>
                +updateProjectStructureData(projectId: String, structureDTO: ProjectStructureDTO): Result<Unit>
                +renameProject(projectId: String, newName: String): Result<Unit>
                +deleteProject(projectId: String): Result<Unit>
            }
            class ProjectsWrapperRemoteDataSource{
                <<Interface>>
                +getProjectsWrappers(userId: String): Flow<List<ProjectsWrapperDTO>>
            }
            class MemberRemoteDataSource {
                <<Interface>>
                +getMembers(projectId: String): Flow<List<MemberDTO>>
                +fetchMembers(projectId: String): Result<Unit>
                +addMember(projectId: String, userId: String, roleIds: List<String>): Result<Unit>
                +getMember(projectId: String, memberId: String): Flow<MemberDTO>
                +updateMemberRoles(projectId: String, memberId: String, roleIds: List<String>): Result<Unit>
                +removeMember(projectId: String, memberId: String): Result<Unit>
            }
            class RoleRemoteDataSource {
                <<Interface>>
                +createRole(projectId: String, roleDTO: RoleDTO): Result<String>
                +getRoles(projectId: String): Flow<List<RoleDTO>>
                +getRole(projectId: String, roleId: String): Flow<RoleDTO>
                +updateRole(projectId: String, roleId: String, roleDTO: RoleDTO): Result<Unit>
                +deleteRole(projectId: String, roleId: String): Result<Unit>
                +setupDefaultRolesForProject(projectId: String, ownerId: String): Result<Unit>
            }
            class InviteRemoteDataSource {
                <<Interface>>
                +getProjectIdByInviteCode(code: String): Result<String>
                +createInviteCode(projectId: String): Result<String>
            }
            class CategoryRemoteDataSource {
                <<Interface>>
                +createCategory(projectId: String, categoryDTO: CategoryDTO): Result<String>
                +deleteCategory(categoryId: String): Result<Unit>
                 %% updateCategory, getCategories etc.
            }
            class ProjectChannelRemoteDataSource {
                <<Interface>>
                +createChannel(projectId: String, categoryId: String, channelDTO: ChannelDTO): Result<String>
                +deleteChannel(channelId: String): Result<Unit>
                %% updateChannel, getChannels etc.
            }
            %% UserRemoteDataSource is defined in other features
        }
        note for ProjectRemoteDataSource "원격 프로젝트 핵심 데이터 통신"
        note for ProjectsWrapperRemoteDataSource "원격 프로젝트 목록(상세 포함) 통신"
        note for MemberRemoteDataSource "원격 프로젝트 멤버 데이터 통신"
        note for RoleRemoteDataSource "원격 프로젝트 역할 데이터 통신"
        note for InviteRemoteDataSource "원격 프로젝트 초대 코드 데이터 통신"
        note for CategoryRemoteDataSource "원격 카테고리 데이터 통신"
        note for ProjectChannelRemoteDataSource "원격 프로젝트 채널 데이터 통신"

        namespace DataSourceImpl_DataNS {
            class ProjectRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class ProjectsWrapperRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class MemberRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class RoleRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class InviteRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class CategoryRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class ProjectChannelRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            %% UserRemoteDataSourceImpl is defined in other features
        }
    end

    %% ===== Relationships =====
    %% ViewModel -> UseCase
    AddProjectViewModel ..> CreateProjectUseCase : uses
    AddProjectViewModel ..> IsProjectNameAvailableUseCase : uses
    JoinProjectViewModel ..> JoinProjectWithCodeUseCase : uses
    ProjectDetailViewModel ..> GetProjectInfoFromTokenUseCase : observes project
    ProjectDetailViewModel ..> GetProjectStructureUseCase : observes structure
    ProjectDetailViewModel ..> UpdateProjectStructureUseCase : updates structure
    ProjectDetailViewModel ..> ObserveProjectMembersUseCase : observes members
    ProjectSettingViewModel ..> GetProjectInfoFromTokenUseCase : loads project name
    ProjectSettingViewModel ..> RenameProjectUseCase : renames
    ProjectSettingViewModel ..> DeleteProjectUseCase : deletes
    MemberListViewModel ..> ObserveProjectMembersUseCase : observes
    MemberListViewModel ..> FetchProjectMembersUseCase : refreshes
    AddMemberViewModel ..> SearchUserByNameUseCase : searches user
    AddMemberViewModel ..> AddProjectMemberUseCase : adds member
    AddMemberViewModel ..> GetProjectRolesUseCase : to show roles for assignment
    EditMemberViewModel ..> GetProjectMemberDetailsUseCase : loads member
    EditMemberViewModel ..> UpdateMemberRolesUseCase : updates roles
    EditMemberViewModel ..> RemoveProjectMemberUseCase : removes member
    EditMemberViewModel ..> GetProjectRolesUseCase : to show available roles
    RoleListViewModel ..> GetProjectRolesUseCase : observes roles
    EditRoleViewModel ..> CreateRoleUseCase : creates
    EditRoleViewModel ..> GetRoleDetailsUseCase : loads role
    EditRoleViewModel ..> UpdateRoleUseCase : updates
    EditRoleViewModel ..> DeleteRoleUseCase : deletes
    CreateCategoryViewModel ..> UpdateProjectStructureUseCase : creates category via structure update
    CreateChannelViewModel ..> CreateCategoryChannelUseCase : creates channel
    EditCategoryViewModel ..> UpdateProjectStructureUseCase : renames category via structure update
    EditCategoryViewModel ..> DeleteCategoryUseCase : deletes category
    EditChannelViewModel ..> UpdateProjectStructureUseCase : renames channel via structure update
    EditChannelViewModel ..> DeleteChannelUseCase : deletes channel
    ProjectDetailViewModel ..> CheckChannelPermissionUseCase : checks permission (example)

    %% UseCase -> Repository Interface
    CreateProjectUseCase ..> ProjectRepository : creates project
    CreateProjectUseCase ..> RoleRepository : setups default roles
    IsProjectNameAvailableUseCase ..> ProjectRepository : checks name
    JoinProjectWithCodeUseCase ..> InviteRepository : validates code
    JoinProjectWithCodeUseCase ..> ProjectRepository : adds user to project
    GetProjectInfoFromTokenUseCase ..> ProjectRepository : gets project
    GetProjectStructureUseCase ..> ProjectRepository : gets structure
    %% GetProjectStructureUseCase may also directly use CategoryRepository, ChannelRepository if not through ProjectRepository
    UpdateProjectStructureUseCase ..> ProjectRepository : updates structure
    %% UpdateProjectStructureUseCase may also directly use CategoryRepository, ChannelRepository
    ObserveProjectMembersUseCase ..> ProjectRepository : observes members
    FetchProjectMembersUseCase ..> ProjectRepository : fetches members
    RenameProjectUseCase ..> ProjectRepository : renames project
    DeleteProjectUseCase ..> ProjectRepository : deletes project
    AddProjectMemberUseCase ..> ProjectRepository : adds member
    AddProjectMemberUseCase ..> UserRepository : gets user info
    AddProjectMemberUseCase ..> RoleRepository : gets role info
    GetProjectMemberDetailsUseCase ..> ProjectRepository : gets member details
    UpdateMemberRolesUseCase ..> ProjectRepository : updates member roles
    RemoveProjectMemberUseCase ..> ProjectRepository : removes member
    CreateRoleUseCase ..> RoleRepository : creates role
    GetProjectRolesUseCase ..> RoleRepository : gets roles
    GetRoleDetailsUseCase ..> RoleRepository : gets role details
    UpdateRoleUseCase ..> RoleRepository : updates role
    DeleteRoleUseCase ..> RoleRepository : deletes role
    CreateCategoryChannelUseCase ..> ChannelRepository : creates channel
    CreateCategoryChannelUseCase ..> CategoryRepository : for category context
    DeleteCategoryUseCase ..> CategoryRepository : deletes category
    DeleteCategoryUseCase ..> ProjectRepository : for structure consistency
    DeleteChannelUseCase ..> ChannelRepository : deletes channel
    DeleteChannelUseCase ..> ProjectRepository : for structure consistency
    SearchUserByNameUseCase ..> UserRepository : searches users
    CheckChannelPermissionUseCase ..> UserRepository : uses
    CheckChannelPermissionUseCase ..> ProjectRepository : uses
    CheckChannelPermissionUseCase ..> RoleRepository : uses


    %% Repository Implementation -> Repository Interface
    ProjectRepository <|.. ProjectRepositoryImpl : implements
    RoleRepository <|.. RoleRepositoryImpl : implements
    InviteRepository <|.. InviteRepositoryImpl : implements
    CategoryRepository <|.. CategoryRepositoryImpl : implements
    ChannelRepository <|.. ChannelRepositoryImpl : implements
    %% UserRepository <|.. UserRepositoryImpl (defined in other features)

    %% Repository Implementation -> DataSource Interface (Remote Only)
    ProjectRepositoryImpl ..> ProjectRemoteDataSource : uses
    ProjectRepositoryImpl ..> ProjectsWrapperRemoteDataSource : uses
    ProjectRepositoryImpl ..> MemberRemoteDataSource : uses
    ProjectRepositoryImpl ..> CategoryRemoteDataSource : uses
    ProjectRepositoryImpl ..> ProjectChannelRemoteDataSource : uses
    ProjectRepositoryImpl ..> InviteRemoteDataSource : uses
    %% ProjectRepositoryImpl also uses RoleRemoteDataSource indirectly via RoleRepository, or directly
    RoleRepositoryImpl ..> RoleRemoteDataSource : uses
    InviteRepositoryImpl ..> InviteRemoteDataSource : uses
    CategoryRepositoryImpl ..> CategoryRemoteDataSource : uses
    ChannelRepositoryImpl ..> ProjectChannelRemoteDataSource : uses
    %% UserRepositoryImpl ..> UserRemoteDataSource (defined in other features)


    %% DataSource Implementation -> DataSource Interface
    ProjectRemoteDataSource <|.. ProjectRemoteDataSourceImpl : implements
    ProjectsWrapperRemoteDataSource <|.. ProjectsWrapperRemoteDataSourceImpl : implements
    MemberRemoteDataSource <|.. MemberRemoteDataSourceImpl : implements
    RoleRemoteDataSource <|.. RoleRemoteDataSourceImpl : implements
    InviteRemoteDataSource <|.. InviteRemoteDataSourceImpl : implements
    CategoryRemoteDataSource <|.. CategoryRemoteDataSourceImpl : implements
    ProjectChannelRemoteDataSource <|.. ProjectChannelRemoteDataSourceImpl : implements
    %% UserRemoteDataSource <|.. UserRemoteDataSourceImpl (defined in other features)