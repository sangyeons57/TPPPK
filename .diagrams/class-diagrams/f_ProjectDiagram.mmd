classDiagram
    title Project Feature Architecture

    %% Feature Layer (ViewModels)
    subgraph Feature Layer - ViewModels
        direction LR
        namespace ViewModels_ProjectNS {
            class AddProjectViewModel {
                -createProjectUseCase: CreateProjectUseCase
                -joinProjectWithCodeUseCase: JoinProjectWithCodeUseCase
                +createProject(name: String, description: String)
                +onJoinProjectClick()
            }
            class JoinProjectViewModel {
                -joinProjectWithCodeUseCase: JoinProjectWithCodeUseCase
                +joinProject()
            }
            class JoinProjectDialogViewModel {
                +setToken(token: String?)
                +joinProject()
            }
            class SetProjectNameViewModel {
                +onProjectNameChange(name: String)
                +onNextClick()
            }
            class ProjectDetailViewModel {
                -getProjectChannelsUseCase: GetProjectChannelsUseCase
                -createCategoryChannelUseCase: CreateCategoryChannelUseCase
                -createDirectChannelUseCase: CreateDirectChannelUseCase
                +fetchProjectStructure()
                +confirmCreateChannel()
            }
            class ProjectSettingViewModel {
                -getProjectAllCategoriesUseCase: GetProjectAllCategoriesUseCase
                -deleteCategoryUseCase: DeleteCategoryUseCase
                -deleteChannelUseCase: DeleteChannelUseCase
                -renameProjectUseCase: RenameProjectUseCase
                -deleteProjectUseCase: DeleteProjectUseCase
                +loadProjectStructure()
                +confirmRenameProject(newName: String)
                +confirmDeleteProject()
            }
            class MemberListViewModel {
                -observeProjectMembersUseCase: ObserveProjectMembersUseCase
                -deleteProjectMemberUseCase: DeleteProjectMemberUseCase
                -getProjectRolesUseCase: GetProjectRolesUseCase
                +observeMembers()
                +confirmDeleteMember(member: Member)
            }
            class AddMemberViewModel {
                -searchUserByNameUseCase: SearchUserByNameUseCase
                -addProjectMemberUseCase: AddProjectMemberUseCase
                +addSelectedMembers(projectId: String, defaultRoleIds: List<String>)
            }
            class EditMemberViewModel {
                -getProjectMemberDetailsUseCase: GetProjectMemberDetailsUseCase
                -getProjectRolesUseCase: GetProjectRolesUseCase
                -updateMemberRolesUseCase: UpdateMemberRolesUseCase
                +saveMemberRoles()
            }
            class RoleListViewModel {
                -getProjectRolesUseCase: GetProjectRolesUseCase
                -deleteProjectRoleUseCase: DeleteProjectRoleUseCase
                +confirmDeleteRole(roleId: String)
            }
            class EditRoleViewModel {
                -getRoleDetailsUseCase: GetRoleDetailsUseCase
                -createRoleUseCase: CreateRoleUseCase
                -updateRoleUseCase: UpdateRoleUseCase
                -deleteRoleUseCase: DeleteRoleUseCase
                +saveRole()
                +confirmDeleteRole()
            }
            class CreateCategoryViewModel {
                %% Placeholder logic in code, actual UseCase for creation TBD
                +createCategory()
            }
            class CreateChannelViewModel {
                %% Placeholder logic in code, actual UseCase for creation TBD
                +createChannel()
            }
            class EditCategoryViewModel {
                %% Placeholder logic in code, actual UseCases for update/delete TBD
                +updateCategory()
                +confirmDelete()
            }
            class EditChannelViewModel {
                %% Placeholder logic in code, actual UseCases for update/delete TBD
                +updateChannel()
                +confirmDelete()
            }
        }
    end

    %% Domain Layer (UseCases & Repository Interfaces)
    subgraph Domain Layer
        direction LR
        namespace UseCases_ProjectNS {
            class CreateProjectUseCase {
                -projectRepository: ProjectRepository
                -authRepository: AuthRepository
                +invoke(name: String, description: String): CustomResult<String, Exception>
            }
            class JoinProjectWithCodeUseCase {
                -projectRepository: ProjectRepository
                +invoke(code: String): CustomResult<String, Exception>
            }
            class JoinProjectWithTokenUseCase {
                -projectRepository: ProjectRepository
                +invoke(token: String): CustomResult<String, Exception>
            }
            class GetProjectChannelsUseCase {
                -categoryCollectionRepository: CategoryCollectionRepository
                +invoke(projectId: String): Flow<ProjectStructure>
            }
            class CreateCategoryChannelUseCase {
                -categoryCollectionRepository: CategoryCollectionRepository
                 +invoke(projectId: String, categoryId: String, channelName: String, channelMode: ChannelMode, order: Int): Result<ProjectChannel>
            }
            class CreateDirectChannelUseCase {
                 -categoryCollectionRepository: CategoryCollectionRepository
                 +invoke(projectId: String, channelName: String, channelMode: ChannelMode, order: Int): Result<ProjectChannel>
            }
            class GetProjectAllCategoriesUseCase {
                 -categoryCollectionRepository: CategoryCollectionRepository
                 +invoke(projectId: String): Flow<CustomResult<List<CategoryCollection>, Exception>>
            }
            class RenameProjectUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String, newName: String): CustomResult<Unit, Exception>
            }
            class DeleteProjectUseCase {
                -projectRepository: ProjectRepository
                +invoke(projectId: String): CustomResult<Unit, Exception>
            }
            class AddCategoryUseCase {
                 -categoryCollectionRepository: CategoryCollectionRepository
                 +invoke(categories: List<CategoryCollection>, projectId: String, categoryName: String): CustomResult<List<CategoryCollection>, Exception>
            }
            class AddChannelUseCase {
                 -categoryCollectionRepository: CategoryCollectionRepository
                 +invoke(projectId: String, channelName: String, channelType: ProjectChannelType, categoryId: String): CustomResult<CategoryCollection, Exception>
            }
            class DeleteCategoryUseCase {
                -categoryRepository: CategoryRepository
                +invoke(categoryId: String): CustomResult<Unit, Exception>
            }
            class DeleteChannelUseCase {
                -projectChannelRepository: ProjectChannelRepository
                +invoke(channelId: String): CustomResult<Unit, Exception>
            }
            class ObserveProjectMembersUseCase {
                -memberRepository: MemberRepository
                +invoke(projectId: String): Flow<List<Member>>
            }
            class AddProjectMemberUseCase { <<Interface>> }
            class AddProjectMemberUseCaseImpl { -projectMemberRepository: MemberRepository }
            class GetProjectMemberDetailsUseCase {
                -memberRepository: MemberRepository
                +invoke(projectId: String, userId: String): Flow<CustomResult<Member, Exception>>
            }
            class UpdateMemberRolesUseCase {
                -memberRepository: MemberRepository
                +invoke(projectId: String, userId: String, newRoleIds: List<String>): CustomResult<Unit, Exception>
            }
            class DeleteProjectMemberUseCase {
                -memberRepository: MemberRepository
                +invoke(projectId: String, userId: String): CustomResult<Unit, Exception>
            }
        }
        namespace UseCases_RoleNS {
            class CreateRoleUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, name: String, permissions: List<RolePermission>, isDefault: Boolean): CustomResult<String, Exception>
            }
            class GetProjectRolesUseCase { <<Interface>> }
            class GetProjectRolesUseCaseImpl { -projectRoleRepository: RoleRepository }
            class GetRoleDetailsUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, roleId: String): CustomResult<Role, Exception>
            }
            class UpdateRoleUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, roleId: String, name: String?, permissions: List<Permission>?, isDefault: Boolean?): CustomResult<Unit, Exception>
            }
            class DeleteRoleUseCase {
                -roleRepository: RoleRepository
                +invoke(projectId: String, roleId: String): CustomResult<Unit, Exception>
            }
            class DeleteProjectRoleUseCase { -roleRepository: RoleRepository }
        }
        namespace UseCases_UserNS { class SearchUserByNameUseCase { -userRepository: UserRepository } }

        namespace Repositories_DomainNS {
            class ProjectRepository { <<Interface>> }
            class ProjectsWrapperRepository { <<Interface>> }
            class RoleRepository { <<Interface>> }
            class InviteRepository { <<Interface>> }
            class CategoryRepository { <<Interface>> }
            class ProjectChannelRepository { <<Interface>> }
            class MemberRepository { <<Interface>> }
            class PermissionRepository { <<Interface>> }
            class UserRepository { <<Interface>> }
            class MediaRepository { <<Interface>> }
            class AuthRepository { <<Interface>> }
            class CategoryCollectionRepository { <<Interface>> }
        }
    end

    %% Data Layer
    subgraph Data Layer
        direction LR
        namespace RepositoryImpl_DataNS {
            class ProjectRepositoryImpl {
                -projectRemoteDataSource: ProjectRemoteDataSource
                -categoryRemoteDataSource: CategoryRemoteDataSource
                -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource
                -memberRemoteDataSource: MemberRemoteDataSource
                -mediaRepository: MediaRepository
            }
            class ProjectsWrapperRepositoryImpl { -projectsWrapperRemoteDataSource: ProjectsWrapperRemoteDataSource }
            class RoleRepositoryImpl { -roleRemoteDataSource: RoleRemoteDataSource }
            class InviteRepositoryImpl { -inviteRemoteDataSource: InviteRemoteDataSource }
            class CategoryRepositoryImpl { -categoryRemoteDataSource: CategoryRemoteDataSource }
            class ProjectChannelRepositoryImpl { -projectChannelRemoteDataSource: ProjectChannelRemoteDataSource }
            class MemberRepositoryImpl { -memberRemoteDataSource: MemberRemoteDataSource }
            class PermissionRepositoryImpl { -permissionRemoteDataSource: PermissionRemoteDataSource }
            class CategoryCollectionRepositoryImpl { -categoryCollectionRemoteDataSource: CategoryCollectionRemoteDataSource }
        }

        namespace RemoteDataSources_DataNS {
            class ProjectRemoteDataSource { <<Interface>> }
            class ProjectsWrapperRemoteDataSource { <<Interface>> }
            class RoleRemoteDataSource { <<Interface>> }
            class InviteRemoteDataSource { <<Interface>> }
            class CategoryRemoteDataSource { <<Interface>> }
            class ProjectChannelRemoteDataSource { <<Interface>> }
            class MemberRemoteDataSource { <<Interface>> }
            class PermissionRemoteDataSource { <<Interface>> }
            class CategoryCollectionRemoteDataSource { <<Interface>> }
        }

        namespace DataSourceImpl_DataNS {
            class ProjectRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class ProjectsWrapperRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class RoleRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class InviteRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class CategoryRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class ProjectChannelRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class MemberRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class PermissionRemoteDataSourceImpl { -firestore: FirebaseFirestore }
            class CategoryCollectionRemoteDataSourceImpl { -firestore: FirebaseFirestore }
        }
    end

    %% ===== Relationships ===== (Simplified for brevity - key interactions)
    ViewModels_ProjectNS.AddProjectViewModel ..> UseCases_ProjectNS.CreateProjectUseCase
    ViewModels_ProjectNS.ProjectDetailViewModel ..> UseCases_ProjectNS.GetProjectChannelsUseCase
    ViewModels_ProjectNS.MemberListViewModel ..> UseCases_ProjectNS.ObserveProjectMembersUseCase
    ViewModels_ProjectNS.AddMemberViewModel ..> UseCases_UserNS.SearchUserByNameUseCase
    ViewModels_ProjectNS.AddMemberViewModel ..> UseCases_ProjectNS.AddProjectMemberUseCase
    ViewModels_ProjectNS.EditRoleViewModel ..> UseCases_RoleNS.CreateRoleUseCase

    UseCases_ProjectNS.CreateProjectUseCase ..> Repositories_DomainNS.ProjectRepository
    UseCases_ProjectNS.GetProjectChannelsUseCase ..> Repositories_DomainNS.CategoryCollectionRepository
    UseCases_ProjectNS.AddProjectMemberUseCaseImpl ..> Repositories_DomainNS.MemberRepository
    UseCases_RoleNS.GetProjectRolesUseCaseImpl ..> Repositories_DomainNS.RoleRepository

    Repositories_DomainNS.ProjectRepository <|.. RepositoryImpl_DataNS.ProjectRepositoryImpl
    Repositories_DomainNS.RoleRepository <|.. RepositoryImpl_DataNS.RoleRepositoryImpl
    Repositories_DomainNS.CategoryCollectionRepository <|.. RepositoryImpl_DataNS.CategoryCollectionRepositoryImpl

    RepositoryImpl_DataNS.ProjectRepositoryImpl ..> RemoteDataSources_DataNS.ProjectRemoteDataSource
    RepositoryImpl_DataNS.ProjectRepositoryImpl ..> RemoteDataSources_DataNS.CategoryRemoteDataSource
    RepositoryImpl_DataNS.RoleRepositoryImpl ..> RemoteDataSources_DataNS.RoleRemoteDataSource
    RepositoryImpl_DataNS.CategoryCollectionRepositoryImpl ..> RemoteDataSources_DataNS.CategoryCollectionRemoteDataSource

    RemoteDataSources_DataNS.ProjectRemoteDataSource <|.. DataSourceImpl_DataNS.ProjectRemoteDataSourceImpl
    RemoteDataSources_DataNS.RoleRemoteDataSource <|.. DataSourceImpl_DataNS.RoleRemoteDataSourceImpl
    RemoteDataSources_DataNS.CategoryCollectionRemoteDataSource <|.. DataSourceImpl_DataNS.CategoryCollectionRemoteDataSourceImpl

    note "Many ViewModels and UseCases omitted for brevity in relationships section."
    note "Detailed method signatures and all dependencies are captured in the actual file content."
    note "Structure modification UseCases like UpdateProjectStructureUseCase were not found; specific creation/deletion UseCases are used or logic is placeholder in VMs."
    note "Invite and Permission UseCases from diagram were not found directly; their functionality might be in other UseCases or Repositories."
