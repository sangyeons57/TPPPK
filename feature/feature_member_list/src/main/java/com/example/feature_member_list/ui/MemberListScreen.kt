package com.example.feature_member_list.ui

// Removed direct Coil imports
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.PersonAdd
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.example.core_navigation.core.NavigationManger
import com.example.core_ui.components.buttons.DebouncedBackButton
import com.example.core_ui.components.user.UserProfileImage
import com.example.domain.model.ui.data.MemberUiModel
import com.example.domain.model.vo.UserId
import com.example.feature_member_list.dialog.ui.AddMemberDialog
import com.example.feature_member_list.viewmodel.MemberListEvent
import com.example.feature_member_list.viewmodel.MemberListUiState
import com.example.feature_member_list.viewmodel.MemberListViewModel
import kotlinx.coroutines.flow.collectLatest

/**
 * MemberListScreen: ÌîÑÎ°úÏ†ùÌä∏ Î©§Î≤Ñ Î™©Î°ù ÌôîÎ©¥ (Stateful)
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MemberListScreen(
    navigationManger: NavigationManger,
    modifier: Modifier = Modifier,
    viewModel: MemberListViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val snackbarHostState = remember { SnackbarHostState() }
    var showDeleteConfirmationDialog by remember { mutableStateOf<MemberUiModel?>(null) }
    var showAddMemberDialogState by remember { mutableStateOf(false) }
    
    // üÜï Bottom Sheet ÏÉÅÌÉú Í¥ÄÎ¶¨
    var showBottomSheet by remember { mutableStateOf(false) }
    var selectedMember by remember { mutableStateOf<MemberUiModel?>(null) }

    LaunchedEffect(Unit) {
        viewModel.eventFlow.collectLatest { event ->
            when (event) {
                is MemberListEvent.ShowDeleteConfirm -> {
                    showDeleteConfirmationDialog = event.member
                }
                is MemberListEvent.ShowSnackbar -> {
                    snackbarHostState.showSnackbar(event.message)
                }
                is MemberListEvent.ShowAddMemberDialog -> {
                    showAddMemberDialogState = true
                }
            }
        }
    }

    Scaffold(
        modifier = modifier,
        snackbarHost = { SnackbarHost(snackbarHostState) },
        topBar = {
            TopAppBar(
                title = { Text("Î©§Î≤Ñ Í¥ÄÎ¶¨") },
                navigationIcon = {
                    DebouncedBackButton(
                        onClick = navigationManger::navigateBack
                    )
                },
                actions = {
                    IconButton(onClick = { viewModel.onAddMemberClick() }) {
                        Icon(Icons.Filled.PersonAdd, contentDescription = "Î©§Î≤Ñ Ï¥àÎåÄ")
                    }
                }
            )
        }
    ) { paddingValues ->
        MemberListContent(
            paddingValues = paddingValues,
            uiState = uiState,
            onSearchQueryChanged = viewModel::onSearchQueryChanged,
            onMemberClick = viewModel::onMemberClick,
            onMemberMoreClick = { member ->
                selectedMember = member
                showBottomSheet = true
            }
        )
    }

    // üÜï Î©§Î≤Ñ ÏòµÏÖò Bottom Sheet
    if (showBottomSheet) {
        MemberOptionsBottomSheet(
            member = selectedMember!!,
            currentUserId = uiState.currentUserId,
            onDismiss = { 
                showBottomSheet = false
                selectedMember = null
            },
            onEditMember = { member ->
                viewModel.onMemberClick(member)
                showBottomSheet = false
                selectedMember = null
            },
            onDeleteMember = { member ->
                showDeleteConfirmationDialog = member
                showBottomSheet = false
                selectedMember = null
            }
        )
    }

    // Î©§Î≤Ñ ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏
    showDeleteConfirmationDialog?.let { memberUiModel ->
        AlertDialog(
            onDismissRequest = { showDeleteConfirmationDialog = null },
            title = { Text("Î©§Î≤Ñ ÎÇ¥Î≥¥ÎÇ¥Í∏∞") },
            text = { Text("${memberUiModel.userName.value}ÎãòÏùÑ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú ÎÇ¥Î≥¥ÎÇ¥ÏãúÍ≤†ÏäµÎãàÍπå?") },
            confirmButton = {
                TextButton(
                    onClick = {
                        viewModel.confirmDeleteMember(memberUiModel)
                        showDeleteConfirmationDialog = null
                    },
                    colors = ButtonDefaults.textButtonColors(contentColor = MaterialTheme.colorScheme.error)
                ) { Text("ÎÇ¥Î≥¥ÎÇ¥Í∏∞") }
            },
            dismissButton = {
                TextButton(onClick = { showDeleteConfirmationDialog = null }) { Text("Ï∑®ÏÜå") }
            }
        )
    }

    // Î©§Î≤Ñ Ï∂îÍ∞Ä Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showAddMemberDialogState) {
        AddMemberDialog(
            projectId = uiState.projectId,
            onDismissRequest = { showAddMemberDialogState = false },
            onMemberAdded = {
                showAddMemberDialogState = false
                viewModel.refreshMembers()
            }
        )
    }
}

/**
 * üÜï Î©§Î≤Ñ ÏòµÏÖò Bottom Sheet
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MemberOptionsBottomSheet(
    member: MemberUiModel,
    currentUserId: UserId?,
    onDismiss: () -> Unit,
    onEditMember: (MemberUiModel) -> Unit,
    onDeleteMember: (MemberUiModel) -> Unit,
    modifier: Modifier = Modifier
) {
    // üö® ÏûêÍ∏∞ ÏûêÏã†Ïù∏ÏßÄ ÌôïÏù∏
    val isSelf = currentUserId?.value == member.userId.value

    ModalBottomSheet(
        onDismissRequest = onDismiss,
        modifier = modifier
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            // Î©§Î≤Ñ Ï†ïÎ≥¥ Ìó§Îçî
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                UserProfileImage(
                    profileImageUrl = member.profileImageUrl?.value,
                    contentDescription = "${member.userName.value}ÎãòÏùò ÌîÑÎ°úÌïÑ",
                    modifier = Modifier
                        .size(48.dp)
                        .clip(CircleShape)
                )
                Spacer(modifier = Modifier.width(12.dp))
                Column {
                    Text(
                        text = member.userName.value,
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    if (member.roleNames.isNotEmpty()) {
                        Text(
                            text = member.roleNames.joinToString(", ") { it.value },
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            }

            HorizontalDivider()

            Spacer(modifier = Modifier.height(8.dp))

            // Ìé∏Ïßë ÏòµÏÖò
            MemberOptionItem(
                icon = Icons.Filled.Edit,
                title = "Î©§Î≤Ñ Ìé∏Ïßë",
                subtitle = "Ïó≠Ìï† Î∞è Í∂åÌïú ÏàòÏ†ï",
                onClick = { onEditMember(member) }
            )

            // üö® ÏûêÍ∏∞ ÏûêÏã†Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå Ï†úÍ±∞ ÏòµÏÖò ÌëúÏãú
            if (!isSelf) {
                MemberOptionItem(
                    icon = Icons.Filled.Delete,
                    title = "Î©§Î≤Ñ ÎÇ¥Î≥¥ÎÇ¥Í∏∞",
                    subtitle = "ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú Ï†úÍ±∞",
                    onClick = { onDeleteMember(member) },
                    isDestructive = true
                )
            }

            // ÌïòÎã® Ïó¨Î∞±
            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

/**
 * üÜï Bottom Sheet ÏòµÏÖò ÏïÑÏù¥ÌÖú
 */
@Composable
private fun MemberOptionItem(
    icon: ImageVector,
    title: String,
    subtitle: String,
    onClick: () -> Unit,
    isDestructive: Boolean = false,
    modifier: Modifier = Modifier
) {
    val contentColor = if (isDestructive) {
        MaterialTheme.colorScheme.error
    } else {
        MaterialTheme.colorScheme.onSurface
    }

    Row(
        modifier = modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(vertical = 12.dp, horizontal = 8.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon,
            contentDescription = null,
            tint = contentColor,
            modifier = Modifier.size(24.dp)
        )
        Spacer(modifier = Modifier.width(16.dp))
        Column {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                color = contentColor,
                fontWeight = FontWeight.Medium
            )
            Text(
                text = subtitle,
                style = MaterialTheme.typography.bodySmall,
                color = if (isDestructive) {
                    MaterialTheme.colorScheme.error.copy(alpha = 0.7f)
                } else {
                    MaterialTheme.colorScheme.onSurfaceVariant
                }
            )
        }
    }
}

/**
 * MemberListContent: Î©§Î≤Ñ Î™©Î°ù UI (Stateless)
 */
@Composable
fun MemberListContent(
    paddingValues: PaddingValues,
    uiState: MemberListUiState,
    onSearchQueryChanged: (String) -> Unit,
    onMemberClick: (MemberUiModel) -> Unit,
    onMemberMoreClick: (MemberUiModel) -> Unit,
    modifier: Modifier = Modifier
) {
    LazyColumn(
        modifier = modifier
            .fillMaxSize()
            .padding(paddingValues)
            .padding(horizontal = 16.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        // Í≤ÄÏÉâ Î∞î (ÏÑ†ÌÉù ÏÇ¨Ìï≠)
        item {
            OutlinedTextField(
                value = uiState.searchQuery,
                onValueChange = onSearchQueryChanged,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                label = { Text("Î©§Î≤Ñ Í≤ÄÏÉâ") },
                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },
                singleLine = true
            )
        }

        if (uiState.isLoading) {
            item {
                Box(modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp), contentAlignment = Alignment.Center) {
                    CircularProgressIndicator()
                }
            }
        } else if (uiState.error != null) {
            item {
                Text(
                    text = "Ïò§Î•ò: ${uiState.error}",
                    color = MaterialTheme.colorScheme.error,
                    modifier = Modifier.padding(16.dp)
                )
            }
        } else if (uiState.members.isEmpty()) {
             item {
                Text(
                    text = "ÌîÑÎ°úÏ†ùÌä∏ Î©§Î≤ÑÍ∞Ä ÏóÜÏäµÎãàÎã§.",
                    modifier = Modifier.padding(16.dp),
                    textAlign = TextAlign.Center
                )
            }
        } else {
            items(uiState.members, key = { it.userId.value }) { member ->
                ProjectMemberListItemComposable(
                    member = member,
                    currentUserId = uiState.currentUserId,
                    onClick = { onMemberClick(member) },
                    onMoreClick = { onMemberMoreClick(member) }
                )
            }
        }
    }
}

/**
 * ProjectMemberListItemComposable: Í∞úÎ≥Ñ ÌîÑÎ°úÏ†ùÌä∏ Î©§Î≤Ñ ÏïÑÏù¥ÌÖú UI (Stateless)
 */
@Composable
fun ProjectMemberListItemComposable(
    member: MemberUiModel,
    currentUserId: UserId?,
    onClick: (MemberUiModel) -> Unit,
    onMoreClick: (MemberUiModel) -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .clickable { onClick(member) }
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        UserProfileImage(
            profileImageUrl = member.profileImageUrl?.value,
            contentDescription = "${member.userName.value}ÎãòÏùò ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ",
            modifier = Modifier
                .size(40.dp)
                .clip(CircleShape)
        )
        Spacer(modifier = Modifier.width(12.dp))
        Column(modifier = Modifier.weight(1f)) {
            Text(
                text = member.userName.value,
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
            if (member.roleNames.isNotEmpty()) {
                Text(
                    text = member.roleNames.joinToString(", ") { it.value },
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
            }
        }

        // üîÑ Î™®Îì† Î©§Î≤ÑÏóêÍ≤å ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº ÌëúÏãú (Bottom SheetÏóêÏÑú Ï†úÏñ¥)
        IconButton(onClick = { onMoreClick(member) }) {
            Icon(Icons.Filled.MoreVert, contentDescription = "Îçî Î≥¥Í∏∞")
        }
    }
}

@Preview
@Composable 
fun MemberListScreenPreview() {
    MemberListScreen(
        navigationManger = TODO(),
        modifier = TODO(),
        viewModel = TODO()
    )
}