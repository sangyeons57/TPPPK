rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // === 유틸리티 함수 ===
    
    // 사용자 인증 여부 확인
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 요청 사용자와 문서 ID 일치 여부 확인
    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // 프로젝트 소유자 여부 확인
    function isProjectOwner(projectId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }
    
    // 프로젝트 멤버 여부 확인
    function isProjectMember(projectId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid));
    }
    
    // 채널 참가자 여부 확인
    function isChannelParticipant(channelId) {
      let channel = get(/databases/$(database)/documents/channels/$(channelId));
      
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/channels/$(channelId)) &&
             (
               // 프로젝트 채널: 프로젝트 멤버
               (
                 channel.data.type == 'PROJECT' &&
                 channel.data.projectSpecificData != null &&
                 channel.data.projectSpecificData.projectId != null &&
                 isProjectMember(channel.data.projectSpecificData.projectId)
               ) ||
               // DM 채널: 참가자
               (
                 channel.data.type == 'DM' &&
                 channel.data.dmSpecificData != null &&
                 channel.data.dmSpecificData.participantIds != null &&
                 request.auth.uid in channel.data.dmSpecificData.participantIds
               )
             );
    }
    
    // === 기본 규칙 ===
    // 기본적으로 모든 접근을 거부하고, 명시적 규칙으로만 허용
    match /{document=**} {
      allow read, write: if false;
    }

    // === 사용자 관련 규칙 ===
    match /users/{userId} {
      // 사용자 프로필 읽기: 모든 사용자
      allow read: if true;

      // 사용자 프로필 수정: 자기 자신만
      allow write: if isCurrentUser(userId);
      
      // 사용자 친구 서브컬렉션
      match /friends/{friendId} {
        // 친구 목록 읽기: 자기 자신만
        allow read: if isCurrentUser(userId);
        
        // 친구 생성: 요청자가 senderId이고, 수신자가 friendId이며, 상태가 pending_sent
        allow create: if isAuthenticated() && 
                        request.resource.data.status == 'pending_sent' &&
                        request.resource.data.senderId == request.auth.uid && 
                        request.resource.data.receiverId == friendId;
        
        // 친구 업데이트: 
        // 1. 요청자가 보낸 요청을 취소/수정하는 경우 (senderId가 본인)
        // 2. 수신자가 요청을 수락/거절하는 경우 (receiverId가 본인, 이전 상태가 pending_sent)
        allow update: if isAuthenticated() &&
                        (
                          (resource.data.senderId == request.auth.uid) || 
                          (resource.data.receiverId == request.auth.uid && resource.data.status == 'pending_sent')
                        );
        
        // 친구 삭제: 자기 자신만
        allow delete: if isCurrentUser(userId);
      }
    }

    // === 프로젝트 관련 규칙 ===
    match /projects/{projectId} {
      // 프로젝트 읽기: 인증된 모든 사용자
      allow read: if isAuthenticated();
      
      // 프로젝트 생성: 인증된 사용자만 (생성자가 소유자)
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      
      // 프로젝트 수정/삭제: 프로젝트 소유자만
      allow update, delete: if isProjectOwner(projectId);
      
      // 프로젝트 멤버 서브컬렉션
      match /members/{memberId} {
        // 멤버 목록 조회: 인증된 모든 사용자 (프로젝트에 접근 가능한 사용자 확인용)
        allow read: if isAuthenticated();
        
        // 멤버 추가/수정/삭제: 프로젝트 소유자만
        allow write: if isProjectOwner(projectId);
      }
      
      // 프로젝트 역할 서브컬렉션
      match /roles/{roleId} {
        // 역할 목록 조회: 프로젝트 멤버만
        allow read: if isProjectMember(projectId);
        
        // 역할 관리: 프로젝트 소유자만
        allow write: if isProjectOwner(projectId);
      }
      
      // 프로젝트 카테고리 서브컬렉션
      match /categories/{categoryId} {
        // 카테고리 조회: 인증된 모든 사용자
        allow read: if isAuthenticated();
        
        // 카테고리 관리: 프로젝트 소유자
        allow write: if isProjectOwner(projectId);
      }
    }

    // === 채널 관련 규칙 ===
    match /channels/{channelId} {
      // 채널 읽기: 인증된 모든 사용자 (임시 규칙: 개발 완료 후 제한 필요)
      allow read: if isAuthenticated();
      
      // 채널 생성
      allow create: if isAuthenticated() &&
                      (
                        // 프로젝트 채널 생성: 프로젝트 소유자만
                        (
                          request.resource.data.type == 'PROJECT' && 
                          request.resource.data.projectSpecificData != null && 
                          request.resource.data.projectSpecificData.projectId != null &&
                          isProjectOwner(request.resource.data.projectSpecificData.projectId)
                        ) ||
                        // DM 채널 생성: 참가자 목록에 본인이 포함되고, 참가자가 정확히 2명
                        (
                          request.resource.data.type == 'DM' && 
                          request.resource.data.dmSpecificData != null &&
                          request.resource.data.dmSpecificData.participantIds != null &&
                          request.auth.uid in request.resource.data.dmSpecificData.participantIds &&
                          request.resource.data.dmSpecificData.participantIds.size() == 2
                        )
                      );
      
      // 채널 수정: 채널 타입에 따라 권한 부여
      allow update: if isAuthenticated() && 
                      (
                        // 프로젝트 채널 수정: 프로젝트 소유자만
                        (
                          resource.data.type == 'PROJECT' && 
                          resource.data.projectSpecificData != null && 
                          resource.data.projectSpecificData.projectId != null &&
                          isProjectOwner(resource.data.projectSpecificData.projectId)
                        ) ||
                        // DM 채널 수정: 참가자만 (제한적 권한)
                        (
                          resource.data.type == 'DM' && 
                          resource.data.dmSpecificData != null &&
                          resource.data.dmSpecificData.participantIds != null &&
                          request.auth.uid in resource.data.dmSpecificData.participantIds
                        )
                      );
      
      // 채널 삭제: 프로젝트 채널만 삭제 가능 (프로젝트 소유자만)
      allow delete: if isAuthenticated() && 
                      resource.data.type == 'PROJECT' && 
                      resource.data.projectSpecificData != null && 
                      resource.data.projectSpecificData.projectId != null &&
                      isProjectOwner(resource.data.projectSpecificData.projectId);

      // 채널 메시지 서브컬렉션
      match /messages/{messageId} {
        // 메시지 읽기: 채널 참가자만
        allow read: if isChannelParticipant(channelId);
        
        // 메시지 생성: 채널 참가자이고, 메시지 senderId가 본인
        allow create: if isChannelParticipant(channelId) && request.resource.data.senderId == request.auth.uid;
        
        // 메시지 수정: 본인 메시지만
        allow update: if isChannelParticipant(channelId) && resource.data.senderId == request.auth.uid;
        
        // 메시지 삭제: 본인 메시지 또는 프로젝트 소유자
        allow delete: if isChannelParticipant(channelId) && 
                        (
                          // 본인 메시지
                          resource.data.senderId == request.auth.uid || 
                          // 프로젝트 소유자 (프로젝트 채널인 경우)
                          (
                            get(/databases/$(database)/documents/channels/$(channelId)).data.type == 'PROJECT' &&
                            get(/databases/$(database)/documents/channels/$(channelId)).data.projectSpecificData != null &&
                            get(/databases/$(database)/documents/channels/$(channelId)).data.projectSpecificData.projectId != null &&
                            isProjectOwner(get(/databases/$(database)/documents/channels/$(channelId)).data.projectSpecificData.projectId)
                          )
                        );
      }
    }
    
    // === 일정 관련 규칙 ===
    match /schedules/{scheduleId} {
      //에러 너무나서 임시로
      allow read, write, create, update, delete: if isAuthenticated();

      // 일정 읽기: 해당 프로젝트 멤버만
      allow read: if isAuthenticated() && 
                    resource.data.projectId != null &&
                    isProjectMember(resource.data.projectId);

      // 일정 읽기: 인증된 사용자 + 일정 생성자
      allow read: if isAuthenticated() && 
                    resource.data.creatorId == request.auth.uid;
      
      // 일정 생성: 인증된 사용자 + 프로젝트 멤버
      allow create: if isAuthenticated() &&
                     request.resource.data.projectId != null &&
                     isProjectMember(request.resource.data.projectId) &&
                     request.resource.data.creatorId == request.auth.uid;

      allow create: if isAuthenticated() &&
                    request.resource.data.creatorId == request.auth.uid &&
                    request.resource.data.projectId == null;
      
      // 일정 수정/삭제: 프로젝트 소유자 또는 일정 생성자
      allow update, delete: if isAuthenticated() &&
                             resource.data.projectId != null &&
                             (
                               isProjectOwner(resource.data.projectId) ||
                               (resource.data.creatorId != null && resource.data.creatorId == request.auth.uid)
                             );

      // 일정 수정/삭제: 인증된 사용자 + 일정 생성자
      allow update, delete: if isAuthenticated() &&
                            resource.data.creatorId == request.auth.uid &&
                            resource.data.projectId == null;

    }
    
    // === 초대 관련 규칙 ===
    match /invites/{inviteId} {
      // 초대 읽기: 인증된 사용자만
      allow read: if isAuthenticated();
      
      // 초대 생성: 인증된 사용자 + 초대자가 본인
      allow create: if isAuthenticated() && request.resource.data.senderId == request.auth.uid;
      
      // 초대 업데이트: 
      // 1. 초대자가 초대를 취소/수정 (senderId가 본인) 
      // 2. 수신자가 초대를 수락/거절 (receiverId가 본인)
      allow update: if isAuthenticated() &&
                      (
                        resource.data.senderId == request.auth.uid ||
                        resource.data.receiverId == request.auth.uid
                      );
      
      // 초대 삭제: 초대자 또는 수신자만
      allow delete: if isAuthenticated() &&
                      (
                        resource.data.senderId == request.auth.uid ||
                        resource.data.receiverId == request.auth.uid
                      );
    }
  }
}