rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 공통 함수: 인증된 사용자 확인
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 공통 함수: 요청 사용자와 문서 ID가 일치하는지 확인
    function isCurrentUser(userId) {
      return request.auth.uid == userId;
    }
    
    // 공통 함수: 프로젝트 멤버인지 확인
    function isProjectMember(projectId) {
      return isAuthenticated() && exists(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid));
    }
    
    // 공통 함수: 특정 권한을 가진 프로젝트 역할이 있는지 확인
    function hasProjectPermission(projectId, permission) {
      return isAuthenticated() && 
        isProjectMember(projectId) && 
        (
          // 프로젝트 소유자 확인
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid ||
          // 또는 해당 권한이 있는 역할 확인
          exists(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid)) && 
          (
            // 사용자의 역할 ID 목록 가져오기
            get(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid)).data.roleIds.hasAny(
              // 해당 권한이 있는 역할 ID 필터링 (필터링 로직을 단순화)
              // 실제로는 권한별 역할 검사를 수행해야 함
              get(/databases/$(database)/documents/projects/$(projectId)/roles).data.keys
            )
          )
        );
    }

    // 기본 규칙: 인증된 사용자만 접근 가능
    match /{document=**} {
      allow read, write: if false; // 기본적으로 모든 접근 거부 (명시적 규칙으로 허용해야 함)
    }

    // --- 1. 사용자 관련 규칙 ---
    match /users/{userId} {
      // 사용자 프로필 읽기: 모든 인증된 사용자
      allow read: if isAuthenticated();
      // 사용자 프로필 수정: 자기 자신만
      allow write: if isCurrentUser(userId);
    }

    // --- 2. 친구 관련 규칙 ---
    // 사용자 문서 내 friends 서브컬렉션 규칙
    match /users/{userId}/friends/{friendId} {
      // 친구 목록 읽기: 자기 자신만
      allow read: if isCurrentUser(userId);
      
      // 친구 추가/수정:
      // 1. 자기 자신만 친구 요청 가능
      // 2. 친구 요청 수락 시 양쪽 사용자 모두 가능
      allow create, update: if isCurrentUser(userId) || 
                              (isCurrentUser(friendId) && 
                               request.resource.data.status == 'accepted' && 
                               resource.data.status == 'pending_received');
                               
      // 친구 삭제: 자기 자신만
      allow delete: if isCurrentUser(userId);
    }

    // --- 3. 프로젝트 관련 규칙 ---
    match /projects/{projectId} {
      // 프로젝트 읽기: 프로젝트 멤버만
      allow read: if isProjectMember(projectId);
      
      // 프로젝트 생성: 인증된 모든 사용자
      allow create: if isAuthenticated();
      
      // 프로젝트 수정: 프로젝트 관리 권한이 있는 사용자만
      allow update: if hasProjectPermission(projectId, 'project_manage');
      
      // 프로젝트 삭제: 프로젝트 소유자만
      allow delete: if request.auth.uid == resource.data.ownerId;
      
      // 프로젝트 멤버 서브컬렉션
      match /members/{memberId} {
        // 멤버 목록 조회: 프로젝트 멤버만
        allow read: if isProjectMember(projectId);
        
        // 멤버 추가/수정: 멤버 관리 권한이 있는 사용자만
        allow write: if hasProjectPermission(projectId, 'member_manage');
      }
      
      // 프로젝트 역할 서브컬렉션
      match /roles/{roleId} {
        // 역할 목록 조회: 프로젝트 멤버만
        allow read: if isProjectMember(projectId);
        
        // 역할 관리: 역할 관리 권한이 있는 사용자만
        allow write: if hasProjectPermission(projectId, 'role_manage');
      }
      
      // 프로젝트 카테고리 서브컬렉션
      match /categories/{categoryId} {
        // 카테고리 목록 조회: 프로젝트 멤버만
        allow read: if isProjectMember(projectId);
        
        // 카테고리 관리: 카테고리 관리 권한이 있는 사용자만
        allow write: if hasProjectPermission(projectId, 'category_manage');
        
        // 채널 서브컬렉션
        match /channels/{channelId} {
          // 채널 목록 조회: 프로젝트 멤버만
          allow read: if isProjectMember(projectId);
          
          // 채널 관리: 채널 관리 권한이 있는 사용자만
          allow write: if hasProjectPermission(projectId, 'channel_manage');
          
          // 채널 메시지 서브컬렉션
          match /messages/{messageId} {
            // 메시지 읽기: 프로젝트 멤버만
            allow read: if isProjectMember(projectId);
            
            // 메시지 생성: 프로젝트 멤버만
            allow create: if isProjectMember(projectId) && request.resource.data.senderId == request.auth.uid;
            
            // 메시지 수정: 본인 메시지만
            allow update: if resource.data.senderId == request.auth.uid;
            
            // 메시지 삭제: 본인 메시지 또는 관리자
            allow delete: if resource.data.senderId == request.auth.uid || 
                            hasProjectPermission(projectId, 'message_delete');
          }
        }
      }
    }

    // --- 4. DM 관련 규칙 ---
    match /dms/{dmId} {
      // 참가자만 DM에 접근 가능
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }
      
      // DM 읽기: 참가자만
      allow read: if isAuthenticated() && isParticipant();
      
      // DM 생성: 인증된 사용자만, 본인이 참가자에 포함되어야 함
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      // DM 메시지 서브컬렉션
      match /messages/{messageId} {
        // 메시지 읽기: DM 참가자만
        allow read: if isAuthenticated() && isParticipant();
        
        // 메시지 생성: DM 참가자만, 메시지 senderId가 본인이어야 함
        allow create: if isAuthenticated() && 
                        isParticipant() && 
                        request.resource.data.senderId == request.auth.uid;
        
        // 메시지 수정: 본인 메시지만
        allow update: if isAuthenticated() && 
                        isParticipant() && 
                        resource.data.senderId == request.auth.uid;
        
        // 메시지 삭제: 본인 메시지만
        allow delete: if isAuthenticated() && 
                        isParticipant() && 
                        resource.data.senderId == request.auth.uid;
      }
    }
    
    // --- 5. 일정 관련 규칙 ---
    match /schedules/{scheduleId} {
      // 일정 읽기: 
      // 1. 개인 일정인 경우 본인만
      // 2. 프로젝트 일정인 경우 프로젝트 멤버만
      allow read: if isAuthenticated() && 
                    (request.auth.uid in resource.data.participants || 
                    (resource.data.projectId != null && isProjectMember(resource.data.projectId)));
      
      // 일정 생성: 인증된 사용자만, 프로젝트 일정은 해당 프로젝트 멤버만
      allow create: if isAuthenticated() && 
                      (request.resource.data.projectId == null || 
                      isProjectMember(request.resource.data.projectId));
      
      // 일정 수정/삭제: 
      // 1. 개인 일정인 경우 생성자만
      // 2. 프로젝트 일정인 경우 일정 관리 권한이 있는 멤버만
      allow update, delete: if isAuthenticated() && 
                              (resource.data.creatorId == request.auth.uid || 
                              (resource.data.projectId != null && 
                               hasProjectPermission(resource.data.projectId, 'schedule_manage')));
    }
    
    // --- 6. 초대 관련 규칙 ---
    match /invites/{inviteToken} {
      // 초대 토큰 읽기: 인증된 사용자만
      allow read: if isAuthenticated();
      
      // 초대 토큰 생성: 
      // 1. 인증된 사용자만
      // 2. inviterId가 본인이어야 함
      // 3. 프로젝트 초대인 경우, 프로젝트 멤버여야 함
      allow create: if isAuthenticated() && 
                      request.resource.data.inviterId == request.auth.uid &&
                      (request.resource.data.projectId == null || 
                       isProjectMember(request.resource.data.projectId));
      
      // 초대 토큰 삭제: 생성자만
      allow delete: if isAuthenticated() && resource.data.inviterId == request.auth.uid;
    }
    
    // --- 7. 비밀번호 재설정 토큰 ---
    match /passwordResetTokens/{tokenId} {
      // 비밀번호 재설정 토큰은 관리자 또는 서버측 로직에 의해서만 접근
      allow read, write: if false; // 클라이언트 접근 불가
    }
  }
}