package com.example.feature_main.ui.calendar

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.MutableTransitionState
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkVertically
import androidx.compose.animation.slideInVertically
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.example.core_ui.theme.Dimens
import com.example.feature_main.viewmodel.CalendarEvent
import com.example.feature_main.viewmodel.CalendarViewModel
import kotlinx.coroutines.flow.collectLatest
import androidx.compose.ui.tooling.preview.Preview
import com.example.core_ui.theme.TeamnovaPersonalProjectProjectingKotlinTheme
import com.example.feature_main.viewmodel.CalendarUiState
import com.example.feature_main.viewmodel.ScheduleItem
import java.time.LocalDate
import java.time.LocalTime

/**
 * 罹섎┛??紐⑤뱢
 * 
 * ??紐⑤뱢? ?ㅼ쓬??罹섎┛??愿??而댄룷?뚰듃?ㅼ쓣 ?쒓났?⑸땲??
 * - CalendarScreen: 硫붿씤 罹섎┛???붾㈃ Composable
 * - 罹섎┛??洹몃━??(CalendarContent): ?붾퀎 罹섎┛??
 * - ?쇱젙 ?뱀뀡 (ScheduleSection): ?좏깮???좎쭨???쇱젙 紐⑸줉
 * 
 * CalendarComponents.kt?먮뒗 ?ㅼ쓬 UI ?붿냼?ㅼ씠 ?ы븿?섏뼱 ?덉뒿?덈떎:
 * - DayCell: ?좎쭨 ? 而댄룷?뚰듃 (?ъ궗??媛??
 * - ScheduleListItem: 媛쒕퀎 ?쇱젙 ?꾩씠??UI (?ъ궗??媛??
 * - 湲고? 罹섎┛??愿??UI 而댄룷?뚰듃??
 * 
 * 李멸퀬: ???뚯씪? ?댁쟾??`com.example.feature_main.ui.CalendarScreen`???덈뜕 ?붾㈃???泥댄빀?덈떎.
 * 紐⑤뱺 肄붾뱶???댁젣 ???뚯씪怨?愿??罹섎┛??而댄룷?뚰듃 ?뚯씪濡??듯빀?섏뿀?듬땲??
 */

/**
 * 罹섎┛???붾㈃??硫붿씤 Composable ?⑥닔
 * 
 * ?곹깭 愿由?諛??대깽??泥섎━(Stateful)瑜??대떦?섎ŉ, ?????ㅻ퉬寃뚯씠?섏쓣 泥섎━?⑸땲??
 * ViewModel濡쒕????곹깭瑜??섏떊?섍퀬 ?ъ슜???대깽?몄뿉 諛섏쓳?섎뒗 濡쒖쭅???ы븿?⑸땲??
 * 
 * 紐⑤뱢?붾맂 援ъ“:
 * - ???뚯씪: 硫붿씤 ?듯빀 ?붾㈃, ?대깽??泥섎━
 * - CalendarContent: ?곷떒 罹섎┛??洹몃━??
 * - ScheduleSection: ?섎떒 ?쇱젙 紐⑸줉
 * - CalendarComponents: 怨듭슜 而댄룷?뚰듃 (DayCell ??
 * - CalendarDimens: UI ?ш린 ?곸닔
 *
 * @param modifier ??而댄룷?뚰듃???곸슜??Modifier
 * @param onClickFAB ?쇱젙 異붽? 踰꾪듉 ?대┃ ???몄텧??肄쒕갚, ?ㅻ퉬寃뚯씠??寃쎈줈 臾몄옄?댁쓣 ?몄옄濡?諛쏆쓬
 * @param onNavigateToScheduleDetail ?쇱젙 ?곸꽭?붾㈃?쇰줈 ?대룞?섎뒗 肄쒕갚, ?쇱젙 ID瑜??몄옄濡?諛쏆쓬
 * @param onNavigateToCalendar24Hour 24?쒓컙 罹섎┛???붾㈃?쇰줈 ?대룞?섎뒗 肄쒕갚, ?곕룄,???쇱쓣 ?몄옄濡?諛쏆쓬
 * @param viewModel 罹섎┛???붾㈃???곹깭? 濡쒖쭅??愿由ы븯??ViewModel ?몄뒪?댁뒪
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CalendarScreen(
    modifier: Modifier = Modifier,
    onClickFAB: (route: String) -> Unit,
    onNavigateToScheduleDetail: (String) -> Unit = {}, 
    onNavigateToCalendar24Hour: (Int, Int, Int) -> Unit = { _, _, _ -> },
    viewModel: CalendarViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val snackbarHostState = remember { SnackbarHostState() }
    
    // FAB ?좊땲硫붿씠???곹깭
    var isFabVisible by remember { mutableStateOf(true) }
    val fabScale by animateFloatAsState(
        targetValue = if (isFabVisible) 1f else 0f,
        animationSpec = spring(),
        label = "FAB Scale Animation"
    )
    
    // ?쇱젙 ?뱀뀡 吏꾩엯 ?좊땲硫붿씠???곹깭
    val scheduleVisibilityState = remember {
        MutableTransitionState(false).apply { targetState = true }
    }

    // ?대깽??泥섎━
    LaunchedEffect(viewModel) { 
        viewModel.eventFlow.collectLatest { event ->
            when (event) {
                is CalendarEvent.ShowSnackbar -> {
                    snackbarHostState.showSnackbar(event.message, duration = SnackbarDuration.Short)
                }
                is CalendarEvent.ShowAddScheduleDialog -> {
                    // FAB ?대┃ ?좊땲硫붿씠??
                    isFabVisible = false
                    kotlinx.coroutines.delay(150) // ?좊땲硫붿씠???④낵 吏??
                    onClickFAB(
                        com.example.navigation.AddSchedule.createRoute(
                            uiState.selectedDate.year,
                            uiState.selectedDate.monthValue,
                            uiState.selectedDate.dayOfMonth,
                        )
                    )
                    kotlinx.coroutines.delay(50) // ?좊땲硫붿씠???④낵 吏??
                    isFabVisible = true
                }
                is CalendarEvent.NavigateToScheduleDetail -> {
                    onNavigateToScheduleDetail(event.scheduleId)
                }
            }
        }
    }

    // ?먮윭 硫붿떆吏 ?ㅻ궢諛??쒖떆
    LaunchedEffect(uiState.errorMessage) {
        if (uiState.errorMessage != null) {
            snackbarHostState.showSnackbar(uiState.errorMessage!!, duration = SnackbarDuration.Short)
            viewModel.errorMessageShown()
        }
    }

    // ?좎쭨 蹂寃?媛먯?
    LaunchedEffect(uiState.selectedDate) {
        // ?좏깮???좎쭨媛 蹂寃쎈맆 ?뚮쭏???쇱젙 ?뱀뀡 ?좊땲硫붿씠???ъ떆??
        scheduleVisibilityState.targetState = false
        kotlinx.coroutines.delay(100)
        scheduleVisibilityState.targetState = true
    }

    Scaffold(
        modifier = modifier,
        snackbarHost = { SnackbarHost(snackbarHostState) },
        floatingActionButton = {
            FloatingActionButton(
                onClick = viewModel::onAddScheduleClick,
                modifier = Modifier.scale(fabScale)
            ) {
                Icon(Icons.Filled.Add, contentDescription = "?쇱젙 異붽?")
            }
        }
    ) { paddingValues ->
        Column(modifier = Modifier.fillMaxSize().padding(paddingValues)) {
            // 罹섎┛??而⑦뀗痢?(?곷떒)
            CalendarContent(
                modifier = Modifier
                    .weight(1f)
                    .padding(horizontal = Dimens.paddingXLarge),
                uiState = uiState,
                onPreviousMonthClick = viewModel::onPreviousMonthClick,
                onNextMonthClick = viewModel::onNextMonthClick,
                onDateClick = viewModel::onDateSelected
            )
            
            // 援щ텇??
            HorizontalDivider()
            
            // ?좏깮???좎쭨???쇱젙 ?뱀뀡 (?섎떒) - ?좊땲硫붿씠???곸슜
            AnimatedVisibility(
                visibleState = scheduleVisibilityState,
                enter = fadeIn(animationSpec = tween(durationMillis = 300)) +
                        expandVertically(animationSpec = tween(durationMillis = 300)),
                exit = fadeOut(animationSpec = tween(durationMillis = 200)) +
                        shrinkVertically(animationSpec = tween(durationMillis = 200))
            ) {
                ScheduleSection(
                    uiState = uiState,
                    onScheduleClick = viewModel::onScheduleClick,
                    onDateClick24Hour = { date ->
                        onNavigateToCalendar24Hour(date.year, date.monthValue, date.dayOfMonth)
                    }
                )
            }
        }
    }
}

/**
 * ?꾨━酉??좏떥由ы떚 媛앹껜
 * 
 * 罹섎┛??愿??而댄룷?뚰듃瑜?誘몃━蹂닿린?섍린 ?꾪븳 ?섑뵆 ?곗씠?곕? ?쒓났?⑸땲??
 */
private object PreviewUtils {
    
    /**
     * ?꾨━酉곗슜 ?섑뵆 ?쇱젙 ?앹꽦
     */
    fun getSampleSchedules(): List<ScheduleItem> = listOf(
        ScheduleItem(
            "s1",
            "? ?뚯쓽",
            LocalDate.now(),
            LocalTime.of(10, 0),
            LocalTime.of(11, 30),
            0xFFEF5350
        ),
        ScheduleItem(
            "s2",
            "?먯떖 ?쎌냽",
            LocalDate.now(),
            LocalTime.of(12, 0),
            LocalTime.of(13, 0),
            0xFF66BB6A
        ),
        ScheduleItem(
            "s3",
            "?꾨줈?앺듃 ?뚯쓽",
            LocalDate.now(),
            LocalTime.of(14, 0),
            LocalTime.of(15, 30),
            0xFF42A5F5
        )
    )
    
    /**
     * 誘몃━蹂닿린??UI ?곹깭 ?앹꽦
     */
    fun getPreviewState(isEmpty: Boolean = false, isLoading: Boolean = false): CalendarUiState {
        return CalendarUiState(
            schedulesForSelectedDate = if (isEmpty) emptyList() else getSampleSchedules(),
            isLoading = isLoading
        )
    }
}

/**
 * ?꾩껜 罹섎┛???붾㈃ 誘몃━蹂닿린
 */
@Preview(showBackground = true, name = "?꾩껜 罹섎┛???붾㈃")
@Composable
fun CalendarScreenPreview() {
    TeamnovaPersonalProjectProjectingKotlinTheme {
        val previewState = PreviewUtils.getPreviewState()
        
        Scaffold(
            floatingActionButton = {
                FloatingActionButton(onClick = {}) {
                    Icon(Icons.Default.Add, contentDescription = "?쇱젙 異붽?")
                }
            }
        ) { paddingValues ->
            Column(modifier = Modifier.fillMaxSize().padding(paddingValues)) {
                // ?곷떒 罹섎┛??
                CalendarContent(
                    modifier = Modifier.weight(1f),
                    uiState = previewState,
                    onPreviousMonthClick = {},
                    onNextMonthClick = {},
                    onDateClick = {}
                )
                
                // 援щ텇??
                HorizontalDivider()
                
                // ?섎떒 ?쇱젙 ?뱀뀡
                ScheduleSection(
                    uiState = previewState,
                    onScheduleClick = {},
                    onDateClick24Hour = {}
                )
            }
        }
    }
} 
